
BluePill_Baremetal_REMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  08009b70  08009b70  0000ab70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a68c  0800a68c  0000c5e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a68c  0800a68c  0000b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a694  0800a694  0000c5e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a694  0800a694  0000b694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a698  0800a698  0000b698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e0  20000000  0800a69c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ec  200005e0  0800ac7c  0000c5e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001acc  0800ac7c  0000cacc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079a8  00000000  00000000  0000c609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  00013fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00016420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e2  00000000  00000000  00016c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a62  00000000  00000000  000171e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b89f  00000000  00000000  0002ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d526  00000000  00000000  000364e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00093a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f7c  00000000  00000000  00093a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000969c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005e0 	.word	0x200005e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009b54 	.word	0x08009b54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005e4 	.word	0x200005e4
 800014c:	08009b54 	.word	0x08009b54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <_kill>:

int _kill(int pid, int sig)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001168:	f006 fd36 	bl	8007bd8 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	2216      	movs	r2, #22
 8001170:	601a      	str	r2, [r3, #0]
  return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_exit>:

void _exit (int status)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001186:	f04f 31ff 	mov.w	r1, #4294967295
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffe7 	bl	800115e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <_exit+0x12>

08001194 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
  }

  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
  }
  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122c:	605a      	str	r2, [r3, #4]
  return 0;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f006 fc9e 	bl	8007bd8 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20005000 	.word	0x20005000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200005fc 	.word	0x200005fc
 80012d0:	20001ad0 	.word	0x20001ad0

080012d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <pidController_setup>:
#include "control/controlHeaderFiles/pidController.h"
#include <math.h>

void pidController_setup(PID* pid, float Kp, float Ki, float Kd, float min, float max) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	609a      	str	r2, [r3, #8]

	pid->integral = 0.0f;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
	pid->last_error = 0.0f;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	60da      	str	r2, [r3, #12]

	pid->min = min;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	619a      	str	r2, [r3, #24]
	pid->max = max;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	61da      	str	r2, [r3, #28]

	pid->last_time = timers_stopwatch();
 800131c:	f005 fcc4 	bl	8006ca8 <timers_stopwatch>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fcd6 	bl	8000cd4 <__aeabi_ui2f>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <pidController_compute>:

float pidController_compute(PID* pid, float setPoint, float input) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b08b      	sub	sp, #44	@ 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
    uint32_t now = timers_stopwatch();
 8001344:	f005 fcb0 	bl	8006ca8 <timers_stopwatch>
 8001348:	6238      	str	r0, [r7, #32]
    float dt = (now - pid->last_time) / 1000000.0f; // micros → seconds
 800134a:	6a38      	ldr	r0, [r7, #32]
 800134c:	f7ff fcc2 	bl	8000cd4 <__aeabi_ui2f>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff fc09 	bl	8000b70 <__aeabi_fsub>
 800135e:	4603      	mov	r3, r0
 8001360:	4971      	ldr	r1, [pc, #452]	@ (8001528 <pidController_compute+0x1f0>)
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fdc2 	bl	8000eec <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	61fb      	str	r3, [r7, #28]
    if (dt <= 0.0f) return pid->min;
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	69f8      	ldr	r0, [r7, #28]
 8001372:	f7ff feaf 	bl	80010d4 <__aeabi_fcmple>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <pidController_compute+0x4a>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	e0ce      	b.n	8001520 <pidController_compute+0x1e8>

    float error = setPoint - input;
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff fbf3 	bl	8000b70 <__aeabi_fsub>
 800138a:	4603      	mov	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]

    // --- Static integral limits ---
    static float integral_max = 0.0f;
    static float integral_min = 0.0f;
    if (integral_max == 0.0f && pid->Ki != 0.0f) {
 800138e:	4b67      	ldr	r3, [pc, #412]	@ (800152c <pidController_compute+0x1f4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe88 	bl	80010ac <__aeabi_fcmpeq>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d021      	beq.n	80013e6 <pidController_compute+0xae>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f04f 0100 	mov.w	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe7e 	bl	80010ac <__aeabi_fcmpeq>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d117      	bne.n	80013e6 <pidController_compute+0xae>
        integral_max = pid->max / pid->Ki;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff fd93 	bl	8000eec <__aeabi_fdiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b58      	ldr	r3, [pc, #352]	@ (800152c <pidController_compute+0x1f4>)
 80013cc:	601a      	str	r2, [r3, #0]
        integral_min = pid->min / pid->Ki;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff fd87 	bl	8000eec <__aeabi_fdiv>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <pidController_compute+0x1f8>)
 80013e4:	601a      	str	r2, [r3, #0]
    }

    // --- Conditional integral (deadband) ---
    const float integral_deadband = 0.01f * (pid->max - pid->min); // 1% of output range
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f7ff fbbd 	bl	8000b70 <__aeabi_fsub>
 80013f6:	4603      	mov	r3, r0
 80013f8:	494e      	ldr	r1, [pc, #312]	@ (8001534 <pidController_compute+0x1fc>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fcc2 	bl	8000d84 <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	617b      	str	r3, [r7, #20]
    if (fabs(error) > integral_deadband) {
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800140a:	4619      	mov	r1, r3
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff fe57 	bl	80010c0 <__aeabi_fcmplt>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02c      	beq.n	8001472 <pidController_compute+0x13a>
        pid->integral += error * dt;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	695c      	ldr	r4, [r3, #20]
 800141c:	69f9      	ldr	r1, [r7, #28]
 800141e:	69b8      	ldr	r0, [r7, #24]
 8001420:	f7ff fcb0 	bl	8000d84 <__aeabi_fmul>
 8001424:	4603      	mov	r3, r0
 8001426:	4619      	mov	r1, r3
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff fba3 	bl	8000b74 <__addsf3>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	615a      	str	r2, [r3, #20]
        if (pid->integral > integral_max) pid->integral = integral_max;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a3c      	ldr	r2, [pc, #240]	@ (800152c <pidController_compute+0x1f4>)
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe5b 	bl	80010fc <__aeabi_fcmpgt>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <pidController_compute+0x11c>
 800144c:	4b37      	ldr	r3, [pc, #220]	@ (800152c <pidController_compute+0x1f4>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	615a      	str	r2, [r3, #20]
        if (pid->integral < integral_min) pid->integral = integral_min;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4a35      	ldr	r2, [pc, #212]	@ (8001530 <pidController_compute+0x1f8>)
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe2e 	bl	80010c0 <__aeabi_fcmplt>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <pidController_compute+0x13a>
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <pidController_compute+0x1f8>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	615a      	str	r2, [r3, #20]
    }

    float derivative = (error - pid->last_error) / dt;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4619      	mov	r1, r3
 8001478:	69b8      	ldr	r0, [r7, #24]
 800147a:	f7ff fb79 	bl	8000b70 <__aeabi_fsub>
 800147e:	4603      	mov	r3, r0
 8001480:	69f9      	ldr	r1, [r7, #28]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd32 	bl	8000eec <__aeabi_fdiv>
 8001488:	4603      	mov	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

    float effort = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	69b9      	ldr	r1, [r7, #24]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc76 	bl	8000d84 <__aeabi_fmul>
 8001498:	4603      	mov	r3, r0
 800149a:	461c      	mov	r4, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4610      	mov	r0, r2
 80014a8:	f7ff fc6c 	bl	8000d84 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fb5f 	bl	8000b74 <__addsf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	6939      	ldr	r1, [r7, #16]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc5f 	bl	8000d84 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fb52 	bl	8000b74 <__addsf3>
 80014d0:	4603      	mov	r3, r0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
	//uart_send("error:%f,",error); uart_send("effort:%f\n",effort);
    // Clamp output
    if (effort > pid->max) effort = pid->max;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4619      	mov	r1, r3
 80014da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014dc:	f7ff fe0e 	bl	80010fc <__aeabi_fcmpgt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <pidController_compute+0x1b4>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (effort < pid->min) effort = pid->min;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014f4:	f7ff fde4 	bl	80010c0 <__aeabi_fcmplt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <pidController_compute+0x1cc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24

    effort = fabs(effort);
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    //uart_send("error:%f,",pid->Kp * error); uart_send("effort:%f\n",effort);

    pid->last_error = error;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	60da      	str	r2, [r3, #12]
    pid->last_time = now;
 8001512:	6a38      	ldr	r0, [r7, #32]
 8001514:	f7ff fbde 	bl	8000cd4 <__aeabi_ui2f>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	611a      	str	r2, [r3, #16]

    return effort;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001520:	4618      	mov	r0, r3
 8001522:	372c      	adds	r7, #44	@ 0x2c
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	49742400 	.word	0x49742400
 800152c:	20000600 	.word	0x20000600
 8001530:	20000604 	.word	0x20000604
 8001534:	3c23d70a 	.word	0x3c23d70a

08001538 <API_mazeWidth>:

//=============================================================================
// UTILITY AND HELPER FUNCTIONS (API AND LOGGING)
//=============================================================================

int API_mazeWidth() { return mazeWidth; }
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
 800153c:	2308      	movs	r3, #8
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <API_mazeHeight>:
int API_mazeHeight() { return mazeHeight; }
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
 800154a:	2308      	movs	r3, #8
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <API_wallFront>:
bool API_wallFront() { return ((walls & (0b0010)) || (walls & (0b0100))); }
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <API_wallFront+0x30>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <API_wallFront+0x1c>
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <API_wallFront+0x30>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <API_wallFront+0x20>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <API_wallFront+0x22>
 8001574:	2300      	movs	r3, #0
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	2000190c 	.word	0x2000190c

08001588 <API_wallRight>:
bool API_wallRight() { return (walls & (0b0001)); }
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <API_wallRight+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000190c 	.word	0x2000190c

080015ac <API_wallLeft>:
bool API_wallLeft() { return (walls & (0b1000)); }
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <API_wallLeft+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000190c 	.word	0x2000190c

080015d0 <API_moveFORW>:
void API_moveFORW() { remi(FULLSTEP); }
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	2003      	movs	r0, #3
 80015d6:	f002 ff73 	bl	80044c0 <remi>
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <API_turnRight>:
void API_turnRight() { remi(SPINRIGHT); }
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	2004      	movs	r0, #4
 80015e4:	f002 ff6c 	bl	80044c0 <remi>
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <API_turnLeft>:
void API_turnLeft() { remi(SPINLEFT); }
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	2005      	movs	r0, #5
 80015f2:	f002 ff65 	bl	80044c0 <remi>
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <API_log>:
void API_log(const char* text) { /*uart_send("log %s\n", text);*/ }
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <isValid>:

//=============================================================================
// CORE LOGIC HELPER FUNCTIONS
//=============================================================================

static inline int isValid(int x, int y) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    return (x >= 0 && x < astar.maze_width && y >= 0 && y < astar.maze_height);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db10      	blt.n	800163e <isValid+0x32>
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <isValid+0x40>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4293      	cmp	r3, r2
 8001626:	da0a      	bge.n	800163e <isValid+0x32>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db07      	blt.n	800163e <isValid+0x32>
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <isValid+0x40>)
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	461a      	mov	r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4293      	cmp	r3, r2
 8001638:	da01      	bge.n	800163e <isValid+0x32>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <isValid+0x34>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000708 	.word	0x20000708

08001650 <safe_malloc>:

static void* safe_malloc(size_t size) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    void* ptr = malloc(size);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f005 fbcb 	bl	8006df4 <malloc>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    if (!ptr) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <safe_malloc+0x1e>
        API_log("Critical Error: Memory allocation failed!");
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <safe_malloc+0x28>)
 800166a:	f7ff ffc6 	bl	80015fa <API_log>
    }
    return ptr;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08009b70 	.word	0x08009b70

0800167c <allocate_2d_uint8_array>:

static uint8_t** allocate_2d_uint8_array(int width, int height) {
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
    uint8_t** array = (uint8_t**)safe_malloc(width * sizeof(uint8_t*));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffe0 	bl	8001650 <safe_malloc>
 8001690:	60f8      	str	r0, [r7, #12]
    if (!array) return NULL;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <allocate_2d_uint8_array+0x20>
 8001698:	2300      	movs	r3, #0
 800169a:	e032      	b.n	8001702 <allocate_2d_uint8_array+0x86>

    for (int i = 0; i < width; i++) {
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e02a      	b.n	80016f8 <allocate_2d_uint8_array+0x7c>
        array[i] = (uint8_t*)safe_malloc(height * sizeof(uint8_t));
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	18d4      	adds	r4, r2, r3
 80016ac:	4608      	mov	r0, r1
 80016ae:	f7ff ffcf 	bl	8001650 <safe_malloc>
 80016b2:	4603      	mov	r3, r0
 80016b4:	6023      	str	r3, [r4, #0]
        if (!array[i]) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d116      	bne.n	80016f2 <allocate_2d_uint8_array+0x76>
            for (int j = 0; j < i; j++) free(array[j]);
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e00a      	b.n	80016e0 <allocate_2d_uint8_array+0x64>
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 fb95 	bl	8006e04 <free>
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3301      	adds	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf0      	blt.n	80016ca <allocate_2d_uint8_array+0x4e>
            free(array);
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f005 fb8b 	bl	8006e04 <free>
            return NULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e007      	b.n	8001702 <allocate_2d_uint8_array+0x86>
    for (int i = 0; i < width; i++) {
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbd0      	blt.n	80016a2 <allocate_2d_uint8_array+0x26>
        }
    }
    return array;
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	4618      	mov	r0, r3
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}

0800170a <allocate_2d_uint16_array>:

static uint16_t** allocate_2d_uint16_array(int width, int height) {
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
    uint16_t** array = (uint16_t**)safe_malloc(width * sizeof(uint16_t*));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff99 	bl	8001650 <safe_malloc>
 800171e:	60f8      	str	r0, [r7, #12]
    if (!array) return NULL;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <allocate_2d_uint16_array+0x20>
 8001726:	2300      	movs	r3, #0
 8001728:	e033      	b.n	8001792 <allocate_2d_uint16_array+0x88>

    for (int i = 0; i < width; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e02b      	b.n	8001788 <allocate_2d_uint16_array+0x7e>
        array[i] = (uint16_t*)safe_malloc(height * sizeof(uint16_t));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	0059      	lsls	r1, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	18d4      	adds	r4, r2, r3
 800173c:	4608      	mov	r0, r1
 800173e:	f7ff ff87 	bl	8001650 <safe_malloc>
 8001742:	4603      	mov	r3, r0
 8001744:	6023      	str	r3, [r4, #0]
        if (!array[i]) {
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <allocate_2d_uint16_array+0x78>
            for (int j = 0; j < i; j++) free(array[j]);
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e00a      	b.n	8001770 <allocate_2d_uint16_array+0x66>
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fb4d 	bl	8006e04 <free>
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3301      	adds	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <allocate_2d_uint16_array+0x50>
            free(array);
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f005 fb43 	bl	8006e04 <free>
            return NULL;
 800177e:	2300      	movs	r3, #0
 8001780:	e007      	b.n	8001792 <allocate_2d_uint16_array+0x88>
    for (int i = 0; i < width; i++) {
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbcf      	blt.n	8001730 <allocate_2d_uint16_array+0x26>
        }
    }
    return array;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}

0800179a <free_2d_uint8_array>:

static void free_2d_uint8_array(uint8_t** array, int width) {
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
    if (!array) return;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <free_2d_uint8_array+0x3c>
    for (int i = 0; i < width; i++) free(array[i]);
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e00a      	b.n	80017c6 <free_2d_uint8_array+0x2c>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fb22 	bl	8006e04 <free>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf0      	blt.n	80017b0 <free_2d_uint8_array+0x16>
    free(array);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f005 fb18 	bl	8006e04 <free>
 80017d4:	e000      	b.n	80017d8 <free_2d_uint8_array+0x3e>
    if (!array) return;
 80017d6:	bf00      	nop
}
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <free_2d_uint16_array>:

static void free_2d_uint16_array(uint16_t** array, int width) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
    if (!array) return;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d015      	beq.n	800181a <free_2d_uint16_array+0x3c>
    for (int i = 0; i < width; i++) free(array[i]);
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e00a      	b.n	800180a <free_2d_uint16_array+0x2c>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fb00 	bl	8006e04 <free>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf0      	blt.n	80017f4 <free_2d_uint16_array+0x16>
    free(array);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f005 faf6 	bl	8006e04 <free>
 8001818:	e000      	b.n	800181c <free_2d_uint16_array+0x3e>
    if (!array) return;
 800181a:	bf00      	nop
}
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <deallocate_all_memory>:

static void deallocate_all_memory(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    free_2d_uint8_array(astar.walls, astar.maze_width);
 8001828:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a26      	ldr	r2, [pc, #152]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800182e:	7892      	ldrb	r2, [r2, #2]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffb1 	bl	800179a <free_2d_uint8_array>
    free_2d_uint8_array(astar.visited, astar.maze_width);
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800183e:	7892      	ldrb	r2, [r2, #2]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffa9 	bl	800179a <free_2d_uint8_array>
    free_2d_uint16_array(astar.g_scores, astar.maze_width);
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800184e:	7892      	ldrb	r2, [r2, #2]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffc3 	bl	80017de <free_2d_uint16_array>
    free_2d_uint8_array(astar.predecessor_x, astar.maze_width);
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1a      	ldr	r2, [pc, #104]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800185e:	7892      	ldrb	r2, [r2, #2]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff99 	bl	800179a <free_2d_uint8_array>
    free_2d_uint8_array(astar.predecessor_y, astar.maze_width);
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800186e:	7892      	ldrb	r2, [r2, #2]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff91 	bl	800179a <free_2d_uint8_array>
    free_2d_uint8_array(astar.in_closed_list, astar.maze_width);
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800187e:	7892      	ldrb	r2, [r2, #2]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff89 	bl	800179a <free_2d_uint8_array>

    free(astar.open_list);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	4618      	mov	r0, r3
 800188e:	f005 fab9 	bl	8006e04 <free>
    free(astar.optimal_path_x);
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <deallocate_all_memory+0xa4>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fab4 	bl	8006e04 <free>
    free(astar.optimal_path_y);
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <deallocate_all_memory+0xa4>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 faaf 	bl	8006e04 <free>
    free(astar.path_history_x);
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <deallocate_all_memory+0xa4>)
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 faaa 	bl	8006e04 <free>
    free(astar.path_history_y);
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <deallocate_all_memory+0xa4>)
 80018b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b4:	4618      	mov	r0, r3
 80018b6:	f005 faa5 	bl	8006e04 <free>

    memset(&astar, 0, sizeof(AStarState));
 80018ba:	2244      	movs	r2, #68	@ 0x44
 80018bc:	2100      	movs	r1, #0
 80018be:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <deallocate_all_memory+0xa4>)
 80018c0:	f006 f928 	bl	8007b14 <memset>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000708 	.word	0x20000708

080018cc <cleanupAStar>:

void cleanupAStar(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    if (!astar.initialized) return;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <cleanupAStar+0x28>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <cleanupAStar+0x24>

    deallocate_all_memory();
 80018de:	f7ff ffa1 	bl	8001824 <deallocate_all_memory>

    astar.initialized = false;
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <cleanupAStar+0x28>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    API_log("A* cleanup completed");
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <cleanupAStar+0x2c>)
 80018ea:	f7ff fe86 	bl	80015fa <API_log>
 80018ee:	e000      	b.n	80018f2 <cleanupAStar+0x26>
    if (!astar.initialized) return;
 80018f0:	bf00      	nop
}
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000708 	.word	0x20000708
 80018f8:	08009b9c 	.word	0x08009b9c

080018fc <setWallInternal>:

static void setWallInternal(int x, int y, int direction) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
    if (!isValid(x, y)) return;
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fe7e 	bl	800160c <isValid>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a9 	beq.w	8001a6a <setWallInternal+0x16e>
    astar.walls[x][y] |= direction;
 8001918:	4b56      	ldr	r3, [pc, #344]	@ (8001a74 <setWallInternal+0x178>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b25a      	sxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b259      	sxtb	r1, r3
 8001934:	4b4f      	ldr	r3, [pc, #316]	@ (8001a74 <setWallInternal+0x178>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4413      	add	r3, r2
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]

    if (direction == WALL_NORTH && isValid(x, y + 1)) astar.walls[x][y + 1] |= WALL_SOUTH;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d11f      	bne.n	800198e <setWallInternal+0x92>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	4619      	mov	r1, r3
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fe59 	bl	800160c <isValid>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d016      	beq.n	800198e <setWallInternal+0x92>
 8001960:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <setWallInternal+0x178>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3301      	adds	r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b3f      	ldr	r3, [pc, #252]	@ (8001a74 <setWallInternal+0x178>)
 8001976:	68d9      	ldr	r1, [r3, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3301      	adds	r3, #1
 8001984:	440b      	add	r3, r1
 8001986:	f042 0204 	orr.w	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    if (direction == WALL_SOUTH && isValid(x, y - 1)) astar.walls[x][y - 1] |= WALL_NORTH;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d11f      	bne.n	80019d4 <setWallInternal+0xd8>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3b01      	subs	r3, #1
 8001998:	4619      	mov	r1, r3
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fe36 	bl	800160c <isValid>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d016      	beq.n	80019d4 <setWallInternal+0xd8>
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <setWallInternal+0x178>)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <setWallInternal+0x178>)
 80019bc:	68d9      	ldr	r1, [r3, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	440b      	add	r3, r1
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
    if (direction == WALL_EAST && isValid(x + 1, y)) astar.walls[x + 1][y] |= WALL_WEST;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d11f      	bne.n	8001a1a <setWallInternal+0x11e>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fe13 	bl	800160c <isValid>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d016      	beq.n	8001a1a <setWallInternal+0x11e>
 80019ec:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <setWallInternal+0x178>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <setWallInternal+0x178>)
 8001a02:	68d9      	ldr	r1, [r3, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	6819      	ldr	r1, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	440b      	add	r3, r1
 8001a12:	f042 0208 	orr.w	r2, r2, #8
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    if (direction == WALL_WEST && isValid(x - 1, y)) astar.walls[x - 1][y] |= WALL_EAST;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d125      	bne.n	8001a6c <setWallInternal+0x170>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fdf0 	bl	800160c <isValid>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01c      	beq.n	8001a6c <setWallInternal+0x170>
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <setWallInternal+0x178>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <setWallInternal+0x178>)
 8001a4c:	68d9      	ldr	r1, [r3, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a54:	3b01      	subs	r3, #1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	440b      	add	r3, r1
 8001a60:	f042 0202 	orr.w	r2, r2, #2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e000      	b.n	8001a6c <setWallInternal+0x170>
    if (!isValid(x, y)) return;
 8001a6a:	bf00      	nop
}
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000708 	.word	0x20000708

08001a78 <debugPrintWallState>:

//=============================================================================
// ENHANCED WALL READING AND DEBUGGING FUNCTIONS
//=============================================================================

static void debugPrintWallState(void) {
 8001a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a7c:	b0c8      	sub	sp, #288	@ 0x120
 8001a7e:	af06      	add	r7, sp, #24
    char wall_debug[256];
    snprintf(wall_debug, sizeof(wall_debug),
        "Position (%d,%d) Heading:%d - Front:%s Left:%s Right:%s",
        astar.current_x, astar.current_y, astar.current_heading,
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <debugPrintWallState+0x7c>)
 8001a82:	799b      	ldrb	r3, [r3, #6]
    snprintf(wall_debug, sizeof(wall_debug),
 8001a84:	4698      	mov	r8, r3
        astar.current_x, astar.current_y, astar.current_heading,
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <debugPrintWallState+0x7c>)
 8001a88:	79db      	ldrb	r3, [r3, #7]
    snprintf(wall_debug, sizeof(wall_debug),
 8001a8a:	461e      	mov	r6, r3
        astar.current_x, astar.current_y, astar.current_heading,
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <debugPrintWallState+0x7c>)
 8001a8e:	7a1b      	ldrb	r3, [r3, #8]
    snprintf(wall_debug, sizeof(wall_debug),
 8001a90:	607b      	str	r3, [r7, #4]
        API_wallFront() ? "WALL" : "OPEN",
 8001a92:	f7ff fd5f 	bl	8001554 <API_wallFront>
 8001a96:	4603      	mov	r3, r0
    snprintf(wall_debug, sizeof(wall_debug),
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <debugPrintWallState+0x28>
 8001a9c:	4c16      	ldr	r4, [pc, #88]	@ (8001af8 <debugPrintWallState+0x80>)
 8001a9e:	e000      	b.n	8001aa2 <debugPrintWallState+0x2a>
 8001aa0:	4c16      	ldr	r4, [pc, #88]	@ (8001afc <debugPrintWallState+0x84>)
        API_wallLeft() ? "WALL" : "OPEN",
 8001aa2:	f7ff fd83 	bl	80015ac <API_wallLeft>
 8001aa6:	4603      	mov	r3, r0
    snprintf(wall_debug, sizeof(wall_debug),
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <debugPrintWallState+0x38>
 8001aac:	4d12      	ldr	r5, [pc, #72]	@ (8001af8 <debugPrintWallState+0x80>)
 8001aae:	e000      	b.n	8001ab2 <debugPrintWallState+0x3a>
 8001ab0:	4d12      	ldr	r5, [pc, #72]	@ (8001afc <debugPrintWallState+0x84>)
        API_wallRight() ? "WALL" : "OPEN");
 8001ab2:	f7ff fd69 	bl	8001588 <API_wallRight>
 8001ab6:	4603      	mov	r3, r0
    snprintf(wall_debug, sizeof(wall_debug),
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <debugPrintWallState+0x48>
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <debugPrintWallState+0x80>)
 8001abe:	e000      	b.n	8001ac2 <debugPrintWallState+0x4a>
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <debugPrintWallState+0x84>)
 8001ac2:	f107 0008 	add.w	r0, r7, #8
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	9503      	str	r5, [sp, #12]
 8001aca:	9402      	str	r4, [sp, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	9600      	str	r6, [sp, #0]
 8001ad2:	4643      	mov	r3, r8
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <debugPrintWallState+0x88>)
 8001ad6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ada:	f005 ff65 	bl	80079a8 <sniprintf>
    API_log(wall_debug);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fd89 	bl	80015fa <API_log>
}
 8001ae8:	bf00      	nop
 8001aea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af4:	20000708 	.word	0x20000708
 8001af8:	08009bb4 	.word	0x08009bb4
 8001afc:	08009bbc 	.word	0x08009bbc
 8001b00:	08009bc4 	.word	0x08009bc4

08001b04 <readWallWithRetry>:

static bool readWallWithRetry(bool (*sensor_func)(void), const char* sensor_name) {
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b0a9      	sub	sp, #164	@ 0xa4
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    bool reading1 = sensor_func();
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4798      	blx	r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool dummy = API_wallFront();
 8001b18:	f7ff fd1c 	bl	8001554 <API_wallFront>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    (void)dummy;
    bool reading2 = sensor_func();
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4798      	blx	r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

    if (reading1 != reading2) {
 8001b2c:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001b30:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d020      	beq.n	8001b7a <readWallWithRetry+0x76>
        bool reading3 = sensor_func();
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
        char debug_msg[128];
        snprintf(debug_msg, sizeof(debug_msg),
 8001b42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001b46:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8001b4a:	f897 108c 	ldrb.w	r1, [r7, #140]	@ 0x8c
 8001b4e:	f897 008c 	ldrb.w	r0, [r7, #140]	@ 0x8c
 8001b52:	f107 040c 	add.w	r4, r7, #12
 8001b56:	9003      	str	r0, [sp, #12]
 8001b58:	9102      	str	r1, [sp, #8]
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <readWallWithRetry+0x84>)
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	4620      	mov	r0, r4
 8001b66:	f005 ff1f 	bl	80079a8 <sniprintf>
            "Inconsistent %s readings: %d,%d,%d - using %d",
            sensor_name, reading1, reading2, reading3, reading3);
        API_log(debug_msg);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fd43 	bl	80015fa <API_log>
        return reading3;
 8001b74:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001b78:	e001      	b.n	8001b7e <readWallWithRetry+0x7a>
    }

    return reading1;
 8001b7a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3794      	adds	r7, #148	@ 0x94
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	08009bfc 	.word	0x08009bfc

08001b8c <updateWalls>:

void updateWalls(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
    if (!isValid(astar.current_x, astar.current_y)) {
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <updateWalls+0x100>)
 8001b94:	799b      	ldrb	r3, [r3, #6]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <updateWalls+0x100>)
 8001b9a:	79db      	ldrb	r3, [r3, #7]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f7ff fd34 	bl	800160c <isValid>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <updateWalls+0x26>
        API_log("ERROR: Invalid current position for wall update");
 8001baa:	4839      	ldr	r0, [pc, #228]	@ (8001c90 <updateWalls+0x104>)
 8001bac:	f7ff fd25 	bl	80015fa <API_log>
        return;
 8001bb0:	e068      	b.n	8001c84 <updateWalls+0xf8>
    }

    astar.visited[astar.current_x][astar.current_y] = 1;
 8001bb2:	4b36      	ldr	r3, [pc, #216]	@ (8001c8c <updateWalls+0x100>)
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <updateWalls+0x100>)
 8001bb8:	799b      	ldrb	r3, [r3, #6]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <updateWalls+0x100>)
 8001bc2:	79d2      	ldrb	r2, [r2, #7]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]

    debugPrintWallState();
 8001bca:	f7ff ff55 	bl	8001a78 <debugPrintWallState>

    bool wall_front = readWallWithRetry(API_wallFront, "FRONT");
 8001bce:	4931      	ldr	r1, [pc, #196]	@ (8001c94 <updateWalls+0x108>)
 8001bd0:	4831      	ldr	r0, [pc, #196]	@ (8001c98 <updateWalls+0x10c>)
 8001bd2:	f7ff ff97 	bl	8001b04 <readWallWithRetry>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
    bool wall_left = readWallWithRetry(API_wallLeft, "LEFT");
 8001bda:	4930      	ldr	r1, [pc, #192]	@ (8001c9c <updateWalls+0x110>)
 8001bdc:	4830      	ldr	r0, [pc, #192]	@ (8001ca0 <updateWalls+0x114>)
 8001bde:	f7ff ff91 	bl	8001b04 <readWallWithRetry>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73bb      	strb	r3, [r7, #14]
    bool wall_right = readWallWithRetry(API_wallRight, "RIGHT");
 8001be6:	492f      	ldr	r1, [pc, #188]	@ (8001ca4 <updateWalls+0x118>)
 8001be8:	482f      	ldr	r0, [pc, #188]	@ (8001ca8 <updateWalls+0x11c>)
 8001bea:	f7ff ff8b 	bl	8001b04 <readWallWithRetry>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	737b      	strb	r3, [r7, #13]

    int front_wall_idx = astar.current_heading;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <updateWalls+0x100>)
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	60bb      	str	r3, [r7, #8]
    int right_wall_idx = (astar.current_heading + 1) % 4;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <updateWalls+0x100>)
 8001bfa:	7a1b      	ldrb	r3, [r3, #8]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	425a      	negs	r2, r3
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	bf58      	it	pl
 8001c0a:	4253      	negpl	r3, r2
 8001c0c:	607b      	str	r3, [r7, #4]
    int left_wall_idx = (astar.current_heading + 3) % 4;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <updateWalls+0x100>)
 8001c10:	7a1b      	ldrb	r3, [r3, #8]
 8001c12:	3303      	adds	r3, #3
 8001c14:	425a      	negs	r2, r3
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	bf58      	it	pl
 8001c20:	4253      	negpl	r3, r2
 8001c22:	603b      	str	r3, [r7, #0]

    if (wall_front) setWallInternal(astar.current_x, astar.current_y, wall_bits[front_wall_idx]);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <updateWalls+0xb8>
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <updateWalls+0x100>)
 8001c2c:	799b      	ldrb	r3, [r3, #6]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <updateWalls+0x100>)
 8001c32:	79db      	ldrb	r3, [r3, #7]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <updateWalls+0x120>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f7ff fe5c 	bl	80018fc <setWallInternal>
    if (wall_left)  setWallInternal(astar.current_x, astar.current_y, wall_bits[left_wall_idx]);
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00c      	beq.n	8001c64 <updateWalls+0xd8>
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <updateWalls+0x100>)
 8001c4c:	799b      	ldrb	r3, [r3, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <updateWalls+0x100>)
 8001c52:	79db      	ldrb	r3, [r3, #7]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <updateWalls+0x120>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f7ff fe4c 	bl	80018fc <setWallInternal>
    if (wall_right) setWallInternal(astar.current_x, astar.current_y, wall_bits[right_wall_idx]);
 8001c64:	7b7b      	ldrb	r3, [r7, #13]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <updateWalls+0xf8>
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <updateWalls+0x100>)
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <updateWalls+0x100>)
 8001c72:	79db      	ldrb	r3, [r3, #7]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <updateWalls+0x120>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7ff fe3c 	bl	80018fc <setWallInternal>
}
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000708 	.word	0x20000708
 8001c90:	08009c2c 	.word	0x08009c2c
 8001c94:	08009c5c 	.word	0x08009c5c
 8001c98:	08001555 	.word	0x08001555
 8001c9c:	08009c64 	.word	0x08009c64
 8001ca0:	080015ad 	.word	0x080015ad
 8001ca4:	08009c6c 	.word	0x08009c6c
 8001ca8:	08001589 	.word	0x08001589
 8001cac:	0800a304 	.word	0x0800a304

08001cb0 <initAStar>:

//=============================================================================
// ENHANCED INITIALIZATION WITH VALIDATION
//=============================================================================

int initAStar(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a6      	sub	sp, #152	@ 0x98
 8001cb4:	af02      	add	r7, sp, #8
    if (astar.initialized) {
 8001cb6:	4ba4      	ldr	r3, [pc, #656]	@ (8001f48 <initAStar+0x298>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <initAStar+0x18>
        API_log("Warning: A* already initialized");
 8001cbe:	48a3      	ldr	r0, [pc, #652]	@ (8001f4c <initAStar+0x29c>)
 8001cc0:	f7ff fc9b 	bl	80015fa <API_log>
        cleanupAStar();
 8001cc4:	f7ff fe02 	bl	80018cc <cleanupAStar>
    }

    astar.maze_width = API_mazeWidth();
 8001cc8:	f7ff fc36 	bl	8001538 <API_mazeWidth>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f48 <initAStar+0x298>)
 8001cd2:	709a      	strb	r2, [r3, #2]
    astar.maze_height = API_mazeHeight();
 8001cd4:	f7ff fc37 	bl	8001546 <API_mazeHeight>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	@ (8001f48 <initAStar+0x298>)
 8001cde:	70da      	strb	r2, [r3, #3]

    if (astar.maze_width <= 0 || astar.maze_height <= 0 ||
 8001ce0:	4b99      	ldr	r3, [pc, #612]	@ (8001f48 <initAStar+0x298>)
 8001ce2:	789b      	ldrb	r3, [r3, #2]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <initAStar+0x40>
 8001ce8:	4b97      	ldr	r3, [pc, #604]	@ (8001f48 <initAStar+0x298>)
 8001cea:	78db      	ldrb	r3, [r3, #3]
        astar.maze_width > 255 || astar.maze_height > 255) {
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <initAStar+0x64>
        char error_msg[128];
        snprintf(error_msg, sizeof(error_msg),
            "ERROR: Invalid maze dimensions: %dx%d",
            astar.maze_width, astar.maze_height);
 8001cf0:	4b95      	ldr	r3, [pc, #596]	@ (8001f48 <initAStar+0x298>)
 8001cf2:	789b      	ldrb	r3, [r3, #2]
        snprintf(error_msg, sizeof(error_msg),
 8001cf4:	461a      	mov	r2, r3
            astar.maze_width, astar.maze_height);
 8001cf6:	4b94      	ldr	r3, [pc, #592]	@ (8001f48 <initAStar+0x298>)
 8001cf8:	78db      	ldrb	r3, [r3, #3]
        snprintf(error_msg, sizeof(error_msg),
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	4a93      	ldr	r2, [pc, #588]	@ (8001f50 <initAStar+0x2a0>)
 8001d02:	2180      	movs	r1, #128	@ 0x80
 8001d04:	f005 fe50 	bl	80079a8 <sniprintf>
        API_log(error_msg);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc75 	bl	80015fa <API_log>
        return 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e17f      	b.n	8002014 <initAStar+0x364>
    }

    astar.maze_size = astar.maze_width * astar.maze_height;
 8001d14:	4b8c      	ldr	r3, [pc, #560]	@ (8001f48 <initAStar+0x298>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f48 <initAStar+0x298>)
 8001d1c:	78db      	ldrb	r3, [r3, #3]
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <initAStar+0x298>)
 8001d26:	809a      	strh	r2, [r3, #4]

    astar.walls = allocate_2d_uint8_array(astar.maze_width, astar.maze_height);
 8001d28:	4b87      	ldr	r3, [pc, #540]	@ (8001f48 <initAStar+0x298>)
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b86      	ldr	r3, [pc, #536]	@ (8001f48 <initAStar+0x298>)
 8001d30:	78db      	ldrb	r3, [r3, #3]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f7ff fca1 	bl	800167c <allocate_2d_uint8_array>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a82      	ldr	r2, [pc, #520]	@ (8001f48 <initAStar+0x298>)
 8001d3e:	60d3      	str	r3, [r2, #12]
    astar.visited = allocate_2d_uint8_array(astar.maze_width, astar.maze_height);
 8001d40:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <initAStar+0x298>)
 8001d42:	789b      	ldrb	r3, [r3, #2]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b80      	ldr	r3, [pc, #512]	@ (8001f48 <initAStar+0x298>)
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7ff fc95 	bl	800167c <allocate_2d_uint8_array>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <initAStar+0x298>)
 8001d56:	6113      	str	r3, [r2, #16]
    astar.g_scores = allocate_2d_uint16_array(astar.maze_width, astar.maze_height);
 8001d58:	4b7b      	ldr	r3, [pc, #492]	@ (8001f48 <initAStar+0x298>)
 8001d5a:	789b      	ldrb	r3, [r3, #2]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f48 <initAStar+0x298>)
 8001d60:	78db      	ldrb	r3, [r3, #3]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f7ff fcd0 	bl	800170a <allocate_2d_uint16_array>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a76      	ldr	r2, [pc, #472]	@ (8001f48 <initAStar+0x298>)
 8001d6e:	6153      	str	r3, [r2, #20]
    astar.predecessor_x = allocate_2d_uint8_array(astar.maze_width, astar.maze_height);
 8001d70:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <initAStar+0x298>)
 8001d72:	789b      	ldrb	r3, [r3, #2]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b74      	ldr	r3, [pc, #464]	@ (8001f48 <initAStar+0x298>)
 8001d78:	78db      	ldrb	r3, [r3, #3]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff fc7d 	bl	800167c <allocate_2d_uint8_array>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a70      	ldr	r2, [pc, #448]	@ (8001f48 <initAStar+0x298>)
 8001d86:	6193      	str	r3, [r2, #24]
    astar.predecessor_y = allocate_2d_uint8_array(astar.maze_width, astar.maze_height);
 8001d88:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <initAStar+0x298>)
 8001d8a:	789b      	ldrb	r3, [r3, #2]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f48 <initAStar+0x298>)
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f7ff fc71 	bl	800167c <allocate_2d_uint8_array>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f48 <initAStar+0x298>)
 8001d9e:	61d3      	str	r3, [r2, #28]
    astar.in_closed_list = allocate_2d_uint8_array(astar.maze_width, astar.maze_height);
 8001da0:	4b69      	ldr	r3, [pc, #420]	@ (8001f48 <initAStar+0x298>)
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <initAStar+0x298>)
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff fc65 	bl	800167c <allocate_2d_uint8_array>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a64      	ldr	r2, [pc, #400]	@ (8001f48 <initAStar+0x298>)
 8001db6:	6213      	str	r3, [r2, #32]

    astar.open_list = (Node*)safe_malloc(astar.maze_size * sizeof(Node));
 8001db8:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <initAStar+0x298>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc46 	bl	8001650 <safe_malloc>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a60      	ldr	r2, [pc, #384]	@ (8001f48 <initAStar+0x298>)
 8001dc8:	6253      	str	r3, [r2, #36]	@ 0x24
    astar.optimal_path_x = (uint8_t*)safe_malloc(astar.maze_size * sizeof(uint8_t));
 8001dca:	4b5f      	ldr	r3, [pc, #380]	@ (8001f48 <initAStar+0x298>)
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc3e 	bl	8001650 <safe_malloc>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f48 <initAStar+0x298>)
 8001dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    astar.optimal_path_y = (uint8_t*)safe_malloc(astar.maze_size * sizeof(uint8_t));
 8001dda:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <initAStar+0x298>)
 8001ddc:	889b      	ldrh	r3, [r3, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fc36 	bl	8001650 <safe_malloc>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a58      	ldr	r2, [pc, #352]	@ (8001f48 <initAStar+0x298>)
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
    astar.path_history_x = (uint8_t*)safe_malloc(MAX_PATH_LENGTH * sizeof(uint8_t));
 8001dea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dee:	f7ff fc2f 	bl	8001650 <safe_malloc>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a54      	ldr	r2, [pc, #336]	@ (8001f48 <initAStar+0x298>)
 8001df6:	6393      	str	r3, [r2, #56]	@ 0x38
    astar.path_history_y = (uint8_t*)safe_malloc(MAX_PATH_LENGTH * sizeof(uint8_t));
 8001df8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dfc:	f7ff fc28 	bl	8001650 <safe_malloc>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a51      	ldr	r2, [pc, #324]	@ (8001f48 <initAStar+0x298>)
 8001e04:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (!astar.walls || !astar.visited || !astar.g_scores ||
 8001e06:	4b50      	ldr	r3, [pc, #320]	@ (8001f48 <initAStar+0x298>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d027      	beq.n	8001e5e <initAStar+0x1ae>
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <initAStar+0x298>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d023      	beq.n	8001e5e <initAStar+0x1ae>
 8001e16:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <initAStar+0x298>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01f      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.predecessor_x || !astar.predecessor_y || !astar.in_closed_list ||
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <initAStar+0x298>)
 8001e20:	699b      	ldr	r3, [r3, #24]
    if (!astar.walls || !astar.visited || !astar.g_scores ||
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01b      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.predecessor_x || !astar.predecessor_y || !astar.in_closed_list ||
 8001e26:	4b48      	ldr	r3, [pc, #288]	@ (8001f48 <initAStar+0x298>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <initAStar+0x1ae>
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <initAStar+0x298>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.open_list || !astar.optimal_path_x || !astar.optimal_path_y ||
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <initAStar+0x298>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        !astar.predecessor_x || !astar.predecessor_y || !astar.in_closed_list ||
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00f      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.open_list || !astar.optimal_path_x || !astar.optimal_path_y ||
 8001e3e:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <initAStar+0x298>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <initAStar+0x1ae>
 8001e46:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <initAStar+0x298>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.path_history_x || !astar.path_history_y) {
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <initAStar+0x298>)
 8001e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
        !astar.open_list || !astar.optimal_path_x || !astar.optimal_path_y ||
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <initAStar+0x1ae>
        !astar.path_history_x || !astar.path_history_y) {
 8001e56:	4b3c      	ldr	r3, [pc, #240]	@ (8001f48 <initAStar+0x298>)
 8001e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <initAStar+0x1bc>
        API_log("ERROR: Memory allocation failed during A* initialization");
 8001e5e:	483d      	ldr	r0, [pc, #244]	@ (8001f54 <initAStar+0x2a4>)
 8001e60:	f7ff fbcb 	bl	80015fa <API_log>
        deallocate_all_memory();
 8001e64:	f7ff fcde 	bl	8001824 <deallocate_all_memory>
        return 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e0d3      	b.n	8002014 <initAStar+0x364>
    }

    for (int i = 0; i < astar.maze_width; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e72:	e05e      	b.n	8001f32 <initAStar+0x282>
        for (int j = 0; j < astar.maze_height; j++) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e7a:	e04e      	b.n	8001f1a <initAStar+0x26a>
            astar.walls[i][j] = 0;
 8001e7c:	4b32      	ldr	r3, [pc, #200]	@ (8001f48 <initAStar+0x298>)
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e8e:	4413      	add	r3, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
            astar.visited[i][j] = 0;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <initAStar+0x298>)
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
            astar.g_scores[i][j] = UINT16_MAX;
 8001eac:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <initAStar+0x298>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec6:	801a      	strh	r2, [r3, #0]
            astar.predecessor_x[i][j] = 255;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <initAStar+0x298>)
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eda:	4413      	add	r3, r2
 8001edc:	22ff      	movs	r2, #255	@ 0xff
 8001ede:	701a      	strb	r2, [r3, #0]
            astar.predecessor_y[i][j] = 255;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <initAStar+0x298>)
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ef2:	4413      	add	r3, r2
 8001ef4:	22ff      	movs	r2, #255	@ 0xff
 8001ef6:	701a      	strb	r2, [r3, #0]
            astar.in_closed_list[i][j] = 0;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <initAStar+0x298>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < astar.maze_height; j++) {
 8001f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f14:	3301      	adds	r3, #1
 8001f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <initAStar+0x298>)
 8001f1c:	78db      	ldrb	r3, [r3, #3]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f24:	4293      	cmp	r3, r2
 8001f26:	dba9      	blt.n	8001e7c <initAStar+0x1cc>
    for (int i = 0; i < astar.maze_width; i++) {
 8001f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <initAStar+0x298>)
 8001f34:	789b      	ldrb	r3, [r3, #2]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	db99      	blt.n	8001e74 <initAStar+0x1c4>
        }
    }

    for (int i = 0; i < astar.maze_width; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f46:	e01b      	b.n	8001f80 <initAStar+0x2d0>
 8001f48:	20000708 	.word	0x20000708
 8001f4c:	08009c74 	.word	0x08009c74
 8001f50:	08009c94 	.word	0x08009c94
 8001f54:	08009cbc 	.word	0x08009cbc
        setWallInternal(i, 0, WALL_SOUTH);
 8001f58:	2204      	movs	r2, #4
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001f60:	f7ff fccc 	bl	80018fc <setWallInternal>
        setWallInternal(i, astar.maze_height - 1, WALL_NORTH);
 8001f64:	4b2d      	ldr	r3, [pc, #180]	@ (800201c <initAStar+0x36c>)
 8001f66:	78db      	ldrb	r3, [r3, #3]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001f72:	f7ff fcc3 	bl	80018fc <setWallInternal>
    for (int i = 0; i < astar.maze_width; i++) {
 8001f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f80:	4b26      	ldr	r3, [pc, #152]	@ (800201c <initAStar+0x36c>)
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	dbe4      	blt.n	8001f58 <initAStar+0x2a8>
    }
    for (int j = 0; j < astar.maze_height; j++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f94:	e013      	b.n	8001fbe <initAStar+0x30e>
        setWallInternal(0, j, WALL_WEST);
 8001f96:	2208      	movs	r2, #8
 8001f98:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fcad 	bl	80018fc <setWallInternal>
        setWallInternal(astar.maze_width - 1, j, WALL_EAST);
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <initAStar+0x36c>)
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fca4 	bl	80018fc <setWallInternal>
    for (int j = 0; j < astar.maze_height; j++) {
 8001fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <initAStar+0x36c>)
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	dbe4      	blt.n	8001f96 <initAStar+0x2e6>
    }

    astar.path_history_length = 1;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <initAStar+0x36c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    astar.path_history_x[0] = 0;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <initAStar+0x36c>)
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    astar.path_history_y[0] = 0;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <initAStar+0x36c>)
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

    astar.current_x = 0;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <initAStar+0x36c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	719a      	strb	r2, [r3, #6]
    astar.current_y = 0;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <initAStar+0x36c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	71da      	strb	r2, [r3, #7]
    astar.current_heading = NORTH;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <initAStar+0x36c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	721a      	strb	r2, [r3, #8]
    astar.open_list_count = 0;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <initAStar+0x36c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    astar.state = EXPLORATION;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <initAStar+0x36c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	705a      	strb	r2, [r3, #1]

    astar.initialized = true;
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <initAStar+0x36c>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    API_log("A* initialization successful with enhanced wall reading");
 8002008:	4805      	ldr	r0, [pc, #20]	@ (8002020 <initAStar+0x370>)
 800200a:	f7ff faf6 	bl	80015fa <API_log>

    updateWalls();
 800200e:	f7ff fdbd 	bl	8001b8c <updateWalls>

    return 1;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3790      	adds	r7, #144	@ 0x90
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000708 	.word	0x20000708
 8002020:	08009cf8 	.word	0x08009cf8

08002024 <swap_nodes>:

//=============================================================================
// PRIORITY QUEUE (MIN-HEAP) IMPLEMENTATION
//=============================================================================

static inline void swap_nodes(Node* a, Node* b) {
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    Node temp = *a;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	6810      	ldr	r0, [r2, #0]
 8002036:	6018      	str	r0, [r3, #0]
    *a = *b;
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6013      	str	r3, [r2, #0]
    *b = temp;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	6010      	str	r0, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <heap_sift_up>:

static void heap_sift_up(Node* heap, int index) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
    while (index > 0) {
 8002060:	e01e      	b.n	80020a0 <heap_sift_up+0x4a>
        int parent_index = (index - 1) / 2;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	0fda      	lsrs	r2, r3, #31
 8002068:	4413      	add	r3, r2
 800206a:	105b      	asrs	r3, r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
        if (heap[index].f_score < heap[parent_index].f_score) {
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	885a      	ldrh	r2, [r3, #2]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	440b      	add	r3, r1
 8002080:	885b      	ldrh	r3, [r3, #2]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <heap_sift_up+0x52>
            swap_nodes(&heap[index], &heap[parent_index]);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	18d0      	adds	r0, r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7ff ffc4 	bl	8002024 <swap_nodes>
            index = parent_index;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	603b      	str	r3, [r7, #0]
    while (index > 0) {
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	dcdd      	bgt.n	8002062 <heap_sift_up+0xc>
        } else {
            break;
        }
    }
}
 80020a6:	e000      	b.n	80020aa <heap_sift_up+0x54>
            break;
 80020a8:	bf00      	nop
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <heap_sift_down>:

static void heap_sift_down(Node* heap, int count, int index) {
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b088      	sub	sp, #32
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
    int smallest = index;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	61fb      	str	r3, [r7, #28]
    while (true) {
        int left_child = 2 * index + 1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	3301      	adds	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
        int right_child = 2 * index + 2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	617b      	str	r3, [r7, #20]

        if (left_child < count && heap[left_child].f_score < heap[smallest].f_score) {
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	da0d      	bge.n	80020f6 <heap_sift_down+0x44>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	885a      	ldrh	r2, [r3, #2]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	440b      	add	r3, r1
 80020ec:	885b      	ldrh	r3, [r3, #2]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d201      	bcs.n	80020f6 <heap_sift_down+0x44>
            smallest = left_child;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	61fb      	str	r3, [r7, #28]
        }
        if (right_child < count && heap[right_child].f_score < heap[smallest].f_score) {
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	da0d      	bge.n	800211a <heap_sift_down+0x68>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	885a      	ldrh	r2, [r3, #2]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	68f9      	ldr	r1, [r7, #12]
 800210e:	440b      	add	r3, r1
 8002110:	885b      	ldrh	r3, [r3, #2]
 8002112:	429a      	cmp	r2, r3
 8002114:	d201      	bcs.n	800211a <heap_sift_down+0x68>
            smallest = right_child;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	61fb      	str	r3, [r7, #28]
        }

        if (smallest != index) {
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d00d      	beq.n	800213e <heap_sift_down+0x8c>
            swap_nodes(&heap[index], &heap[smallest]);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	18d0      	adds	r0, r2, r3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7ff ff76 	bl	8002024 <swap_nodes>
            index = smallest;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	607b      	str	r3, [r7, #4]
    while (true) {
 800213c:	e7c1      	b.n	80020c2 <heap_sift_down+0x10>
        } else {
            break;
 800213e:	bf00      	nop
        }
    }
}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <push_to_heap>:

static void push_to_heap(Node* heap, int* count, Node node) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
    if (*count >= astar.maze_size) {
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <push_to_heap+0x50>)
 800215a:	8892      	ldrh	r2, [r2, #4]
 800215c:	4293      	cmp	r3, r2
 800215e:	db03      	blt.n	8002168 <push_to_heap+0x20>
        API_log("Warning: Priority queue is full");
 8002160:	480e      	ldr	r0, [pc, #56]	@ (800219c <push_to_heap+0x54>)
 8002162:	f7ff fa4a 	bl	80015fa <API_log>
        return;
 8002166:	e013      	b.n	8002190 <push_to_heap+0x48>
    }
    heap[*count] = node;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	461a      	mov	r2, r3
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	6010      	str	r0, [r2, #0]
    heap_sift_up(heap, *count);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff ff68 	bl	8002056 <heap_sift_up>
    (*count)++;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000708 	.word	0x20000708
 800219c:	08009d30 	.word	0x08009d30

080021a0 <pop_from_heap>:

static Node pop_from_heap(Node* heap, int* count) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    Node root = heap[0];
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	6810      	ldr	r0, [r2, #0]
 80021b2:	6018      	str	r0, [r3, #0]
    (*count)--;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	601a      	str	r2, [r3, #0]
    heap[0] = heap[*count];
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6013      	str	r3, [r2, #0]
    heap_sift_down(heap, *count, 0);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff6b 	bl	80020b2 <heap_sift_down>
    return root;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	2300      	movs	r3, #0
 80021e2:	89ba      	ldrh	r2, [r7, #12]
 80021e4:	f362 030f 	bfi	r3, r2, #0, #16
 80021e8:	89fa      	ldrh	r2, [r7, #14]
 80021ea:	f362 431f 	bfi	r3, r2, #16, #16
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <calculateHeuristic>:

//=============================================================================
// A* ALGORITHM IMPLEMENTATION (REFACTORED)
//=============================================================================

static inline int calculateHeuristic(int x1, int y1, int x2, int y2) {
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
    return abs(x1 - x2) + abs(y1 - y2);
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800220e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	bfb8      	it	lt
 800221c:	425b      	neglt	r3, r3
 800221e:	4413      	add	r3, r2
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
	...

0800222c <setTarget>:

void setTarget(int x, int y) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    if (isValid(x, y)) {
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff f9e7 	bl	800160c <isValid>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <setTarget+0x2a>
        astar.target_x = x;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <setTarget+0x38>)
 800224a:	725a      	strb	r2, [r3, #9]
        astar.target_y = y;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <setTarget+0x38>)
 8002252:	729a      	strb	r2, [r3, #10]
    } else {
        API_log("Warning: Invalid target coordinates specified");
    }
}
 8002254:	e002      	b.n	800225c <setTarget+0x30>
        API_log("Warning: Invalid target coordinates specified");
 8002256:	4804      	ldr	r0, [pc, #16]	@ (8002268 <setTarget+0x3c>)
 8002258:	f7ff f9cf 	bl	80015fa <API_log>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000708 	.word	0x20000708
 8002268:	08009d50 	.word	0x08009d50

0800226c <isAtTarget>:

static inline int isAtTarget(int x, int y) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    return (x == astar.target_x && y == astar.target_y);
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <isAtTarget+0x34>)
 8002278:	7a5b      	ldrb	r3, [r3, #9]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4293      	cmp	r3, r2
 8002280:	d107      	bne.n	8002292 <isAtTarget+0x26>
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <isAtTarget+0x34>)
 8002284:	7a9b      	ldrb	r3, [r3, #10]
 8002286:	461a      	mov	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <isAtTarget+0x26>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <isAtTarget+0x28>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000708 	.word	0x20000708

080022a4 <resetAStarSearch>:

static void resetAStarSearch(void) {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
    if (!astar.initialized) return;
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <resetAStarSearch+0xac>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d145      	bne.n	8002344 <resetAStarSearch+0xa0>
    for (int i = 0; i < astar.maze_width; i++) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	e038      	b.n	8002330 <resetAStarSearch+0x8c>
        for (int j = 0; j < astar.maze_height; j++) {
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	e02c      	b.n	800231e <resetAStarSearch+0x7a>
            astar.g_scores[i][j] = UINT16_MAX;
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <resetAStarSearch+0xac>)
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022da:	801a      	strh	r2, [r3, #0]
            astar.predecessor_x[i][j] = 255;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <resetAStarSearch+0xac>)
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	22ff      	movs	r2, #255	@ 0xff
 80022ee:	701a      	strb	r2, [r3, #0]
            astar.predecessor_y[i][j] = 255;
 80022f0:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <resetAStarSearch+0xac>)
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	22ff      	movs	r2, #255	@ 0xff
 8002302:	701a      	strb	r2, [r3, #0]
            astar.in_closed_list[i][j] = 0;
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <resetAStarSearch+0xac>)
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < astar.maze_height; j++) {
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <resetAStarSearch+0xac>)
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4293      	cmp	r3, r2
 8002328:	dbcc      	blt.n	80022c4 <resetAStarSearch+0x20>
    for (int i = 0; i < astar.maze_width; i++) {
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3301      	adds	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <resetAStarSearch+0xac>)
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	461a      	mov	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4293      	cmp	r3, r2
 800233a:	dbc0      	blt.n	80022be <resetAStarSearch+0x1a>
        }
    }
    astar.open_list_count = 0;
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <resetAStarSearch+0xac>)
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
 8002342:	e000      	b.n	8002346 <resetAStarSearch+0xa2>
    if (!astar.initialized) return;
 8002344:	bf00      	nop
}
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000708 	.word	0x20000708

08002354 <storeOptimalPath>:

static int storeOptimalPath(int start_x, int start_y) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	@ 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    astar.optimal_path_length = 0;
 800235e:	4b71      	ldr	r3, [pc, #452]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002360:	2200      	movs	r2, #0
 8002362:	869a      	strh	r2, [r3, #52]	@ 0x34
    if (!isValid(start_x, start_y) || !isValid(astar.target_x, astar.target_y)) {
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff f950 	bl	800160c <isValid>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <storeOptimalPath+0x36>
 8002372:	4b6c      	ldr	r3, [pc, #432]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002374:	7a5b      	ldrb	r3, [r3, #9]
 8002376:	461a      	mov	r2, r3
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <storeOptimalPath+0x1d0>)
 800237a:	7a9b      	ldrb	r3, [r3, #10]
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f7ff f944 	bl	800160c <isValid>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <storeOptimalPath+0x40>
        API_log("Error: Invalid coordinates for path reconstruction");
 800238a:	4867      	ldr	r0, [pc, #412]	@ (8002528 <storeOptimalPath+0x1d4>)
 800238c:	f7ff f935 	bl	80015fa <API_log>
        return 0;
 8002390:	2300      	movs	r3, #0
 8002392:	e0c2      	b.n	800251a <storeOptimalPath+0x1c6>
    }

    int trace_x = astar.target_x;
 8002394:	4b63      	ldr	r3, [pc, #396]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002396:	7a5b      	ldrb	r3, [r3, #9]
 8002398:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int trace_y = astar.target_y;
 800239a:	4b62      	ldr	r3, [pc, #392]	@ (8002524 <storeOptimalPath+0x1d0>)
 800239c:	7a9b      	ldrb	r3, [r3, #10]
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
    int safety_counter = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    const int MAX_ITERATIONS = astar.maze_size * 2;
 80023a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023a6:	889b      	ldrh	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]

    while (safety_counter < MAX_ITERATIONS && astar.optimal_path_length < astar.maze_size) {
 80023ac:	e04b      	b.n	8002446 <storeOptimalPath+0xf2>
        astar.optimal_path_x[astar.optimal_path_length] = trace_x;
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023b4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80023b6:	4413      	add	r3, r2
 80023b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
        astar.optimal_path_y[astar.optimal_path_length] = trace_y;
 80023be:	4b59      	ldr	r3, [pc, #356]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a58      	ldr	r2, [pc, #352]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023c4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80023c6:	4413      	add	r3, r2
 80023c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
        astar.optimal_path_length++;
 80023ce:	4b55      	ldr	r3, [pc, #340]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023d0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80023d2:	3301      	adds	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023d8:	869a      	strh	r2, [r3, #52]	@ 0x34

        if (trace_x == start_x && trace_y == start_y) break;
 80023da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d103      	bne.n	80023ea <storeOptimalPath+0x96>
 80023e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d038      	beq.n	800245c <storeOptimalPath+0x108>

        if (astar.predecessor_x[trace_x][trace_y] == 255) {
 80023ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002524 <storeOptimalPath+0x1d0>)
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2bff      	cmp	r3, #255	@ 0xff
 80023fe:	d107      	bne.n	8002410 <storeOptimalPath+0xbc>
            API_log("Error: Broken path - missing predecessor");
 8002400:	484a      	ldr	r0, [pc, #296]	@ (800252c <storeOptimalPath+0x1d8>)
 8002402:	f7ff f8fa 	bl	80015fa <API_log>
            astar.optimal_path_length = 0;
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002408:	2200      	movs	r2, #0
 800240a:	869a      	strh	r2, [r3, #52]	@ 0x34
            return 0;
 800240c:	2300      	movs	r3, #0
 800240e:	e084      	b.n	800251a <storeOptimalPath+0x1c6>
        }

        int temp_x = astar.predecessor_x[trace_x][trace_y];
 8002410:	4b44      	ldr	r3, [pc, #272]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
        int temp_y = astar.predecessor_y[trace_x][trace_y];
 8002424:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
        trace_x = temp_x;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        trace_y = temp_y;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
        safety_counter++;
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	3301      	adds	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
    while (safety_counter < MAX_ITERATIONS && astar.optimal_path_length < astar.maze_size) {
 8002446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	429a      	cmp	r2, r3
 800244c:	da07      	bge.n	800245e <storeOptimalPath+0x10a>
 800244e:	4b35      	ldr	r3, [pc, #212]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002450:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002452:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3a9      	bcc.n	80023ae <storeOptimalPath+0x5a>
 800245a:	e000      	b.n	800245e <storeOptimalPath+0x10a>
        if (trace_x == start_x && trace_y == start_y) break;
 800245c:	bf00      	nop
    }

    if (astar.optimal_path_length == 0 || safety_counter >= MAX_ITERATIONS) {
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002460:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <storeOptimalPath+0x11a>
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	429a      	cmp	r2, r3
 800246c:	db07      	blt.n	800247e <storeOptimalPath+0x12a>
        API_log("Error: Path reconstruction failed");
 800246e:	4830      	ldr	r0, [pc, #192]	@ (8002530 <storeOptimalPath+0x1dc>)
 8002470:	f7ff f8c3 	bl	80015fa <API_log>
        astar.optimal_path_length = 0;
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002476:	2200      	movs	r2, #0
 8002478:	869a      	strh	r2, [r3, #52]	@ 0x34
        return 0;
 800247a:	2300      	movs	r3, #0
 800247c:	e04d      	b.n	800251a <storeOptimalPath+0x1c6>
    }

    for (int i = 0; i < astar.optimal_path_length / 2; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	e036      	b.n	80024f2 <storeOptimalPath+0x19e>
        int j = astar.optimal_path_length - 1 - i;
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002486:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	613b      	str	r3, [r7, #16]
        int temp_x = astar.optimal_path_x[i];
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
        int temp_y = astar.optimal_path_y[i];
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <storeOptimalPath+0x1d0>)
 800249e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]
        astar.optimal_path_x[i] = astar.optimal_path_x[j];
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	441a      	add	r2, r3
 80024b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	440b      	add	r3, r1
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	701a      	strb	r2, [r3, #0]
        astar.optimal_path_y[i] = astar.optimal_path_y[j];
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	441a      	add	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	440b      	add	r3, r1
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
        astar.optimal_path_x[j] = temp_x;
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
        astar.optimal_path_y[j] = temp_y;
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < astar.optimal_path_length / 2; i++) {
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	3301      	adds	r3, #1
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <storeOptimalPath+0x1d0>)
 80024f4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	4293      	cmp	r3, r2
 8002500:	dbc0      	blt.n	8002484 <storeOptimalPath+0x130>
    }

    snprintf(debug_buffer, DEBUG_BUFFER_SIZE, "Path reconstructed: %d steps", astar.optimal_path_length);
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <storeOptimalPath+0x1d0>)
 8002504:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002506:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <storeOptimalPath+0x1e0>)
 8002508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800250c:	480a      	ldr	r0, [pc, #40]	@ (8002538 <storeOptimalPath+0x1e4>)
 800250e:	f005 fa4b 	bl	80079a8 <sniprintf>
    API_log(debug_buffer);
 8002512:	4809      	ldr	r0, [pc, #36]	@ (8002538 <storeOptimalPath+0x1e4>)
 8002514:	f7ff f871 	bl	80015fa <API_log>

    return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	3730      	adds	r7, #48	@ 0x30
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000708 	.word	0x20000708
 8002528:	08009d80 	.word	0x08009d80
 800252c:	08009db4 	.word	0x08009db4
 8002530:	08009de0 	.word	0x08009de0
 8002534:	08009e04 	.word	0x08009e04
 8002538:	20000608 	.word	0x20000608

0800253c <runAStar>:

int runAStar(int start_x, int start_y) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	@ 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
    if (!astar.initialized || !isValid(start_x, start_y)) {
 8002546:	4b98      	ldr	r3, [pc, #608]	@ (80027a8 <runAStar+0x26c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <runAStar+0x26>
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff f858 	bl	800160c <isValid>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <runAStar+0x30>
        API_log("Error: A* not initialized or invalid start coordinates");
 8002562:	4892      	ldr	r0, [pc, #584]	@ (80027ac <runAStar+0x270>)
 8002564:	f7ff f849 	bl	80015fa <API_log>
        return 0;
 8002568:	2300      	movs	r3, #0
 800256a:	e118      	b.n	800279e <runAStar+0x262>
    }

    resetAStarSearch();
 800256c:	f7ff fe9a 	bl	80022a4 <resetAStarSearch>
    astar.g_scores[start_x][start_y] = 0;
 8002570:	4b8d      	ldr	r3, [pc, #564]	@ (80027a8 <runAStar+0x26c>)
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]

    Node start_node = { .x = start_x, .y = start_y, .f_score = calculateHeuristic(start_x, start_y, astar.target_x, astar.target_y) };
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	743b      	strb	r3, [r7, #16]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	747b      	strb	r3, [r7, #17]
 8002592:	4b85      	ldr	r3, [pc, #532]	@ (80027a8 <runAStar+0x26c>)
 8002594:	7a5b      	ldrb	r3, [r3, #9]
 8002596:	461a      	mov	r2, r3
 8002598:	4b83      	ldr	r3, [pc, #524]	@ (80027a8 <runAStar+0x26c>)
 800259a:	7a9b      	ldrb	r3, [r3, #10]
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fe29 	bl	80021f6 <calculateHeuristic>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	827b      	strh	r3, [r7, #18]
    push_to_heap(astar.open_list, &astar.open_list_count, start_node);
 80025aa:	4b7f      	ldr	r3, [pc, #508]	@ (80027a8 <runAStar+0x26c>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	497f      	ldr	r1, [pc, #508]	@ (80027b0 <runAStar+0x274>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fdc8 	bl	8002148 <push_to_heap>

    int nodes_processed = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	@ 0x34
    const int MAX_NODES = astar.maze_size * 4;
 80025bc:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <runAStar+0x26c>)
 80025be:	889b      	ldrh	r3, [r3, #4]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (astar.open_list_count > 0 && nodes_processed < MAX_NODES) {
 80025c4:	e0da      	b.n	800277c <runAStar+0x240>
        Node current_node = pop_from_heap(astar.open_list, &astar.open_list_count);
 80025c6:	4b78      	ldr	r3, [pc, #480]	@ (80027a8 <runAStar+0x26c>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	4979      	ldr	r1, [pc, #484]	@ (80027b0 <runAStar+0x274>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fde7 	bl	80021a0 <pop_from_heap>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60fb      	str	r3, [r7, #12]
        int x = current_node.x;
 80025d6:	7b3b      	ldrb	r3, [r7, #12]
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
        int y = current_node.y;
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24

        nodes_processed++;
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	3301      	adds	r3, #1
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if (isAtTarget(x, y)) {
 80025e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e8:	f7ff fe40 	bl	800226c <isAtTarget>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <runAStar+0xce>
            snprintf(debug_buffer, DEBUG_BUFFER_SIZE, "A* found path in %d iterations", nodes_processed);
 80025f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f4:	4a6f      	ldr	r2, [pc, #444]	@ (80027b4 <runAStar+0x278>)
 80025f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fa:	486f      	ldr	r0, [pc, #444]	@ (80027b8 <runAStar+0x27c>)
 80025fc:	f005 f9d4 	bl	80079a8 <sniprintf>
            API_log(debug_buffer);
 8002600:	486d      	ldr	r0, [pc, #436]	@ (80027b8 <runAStar+0x27c>)
 8002602:	f7fe fffa 	bl	80015fa <API_log>
            return 1;
 8002606:	2301      	movs	r3, #1
 8002608:	e0c9      	b.n	800279e <runAStar+0x262>
        }

        if (astar.in_closed_list[x][y]) continue;
 800260a:	4b67      	ldr	r3, [pc, #412]	@ (80027a8 <runAStar+0x26c>)
 800260c:	6a1a      	ldr	r2, [r3, #32]
 800260e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80ac 	bne.w	800277a <runAStar+0x23e>
        astar.in_closed_list[x][y] = 1;
 8002622:	4b61      	ldr	r3, [pc, #388]	@ (80027a8 <runAStar+0x26c>)
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	4413      	add	r3, r2
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]

        for (int i = 0; i < 4; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
 800263a:	e099      	b.n	8002770 <runAStar+0x234>
            int nx = x + dx[i];
 800263c:	4a5f      	ldr	r2, [pc, #380]	@ (80027bc <runAStar+0x280>)
 800263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002646:	4413      	add	r3, r2
 8002648:	623b      	str	r3, [r7, #32]
            int ny = y + dy[i];
 800264a:	4a5d      	ldr	r2, [pc, #372]	@ (80027c0 <runAStar+0x284>)
 800264c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002654:	4413      	add	r3, r2
 8002656:	61fb      	str	r3, [r7, #28]

            if (!isValid(nx, ny) || (astar.walls[x][y] & wall_bits[i])) {
 8002658:	69f9      	ldr	r1, [r7, #28]
 800265a:	6a38      	ldr	r0, [r7, #32]
 800265c:	f7fe ffd6 	bl	800160c <isValid>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07e      	beq.n	8002764 <runAStar+0x228>
 8002666:	4b50      	ldr	r3, [pc, #320]	@ (80027a8 <runAStar+0x26c>)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <runAStar+0x288>)
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	400b      	ands	r3, r1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d16d      	bne.n	8002764 <runAStar+0x228>
                continue;
            }

            if ((astar.state == OPTIMAL_PATH || astar.state == RETURN_FROM_OPTIMAL) && !astar.visited[nx][ny]) {
 8002688:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <runAStar+0x26c>)
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d003      	beq.n	8002698 <runAStar+0x15c>
 8002690:	4b45      	ldr	r3, [pc, #276]	@ (80027a8 <runAStar+0x26c>)
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d10a      	bne.n	80026ae <runAStar+0x172>
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <runAStar+0x26c>)
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d05c      	beq.n	8002768 <runAStar+0x22c>
                continue;
            }

            int tentative_g = astar.g_scores[x][y] + 1;
 80026ae:	4b3e      	ldr	r3, [pc, #248]	@ (80027a8 <runAStar+0x26c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]

            if (tentative_g < astar.g_scores[nx][ny]) {
 80026c6:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <runAStar+0x26c>)
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4293      	cmp	r3, r2
 80026e0:	da43      	bge.n	800276a <runAStar+0x22e>
                astar.predecessor_x[nx][ny] = x;
 80026e2:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <runAStar+0x26c>)
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
                astar.predecessor_y[nx][ny] = y;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <runAStar+0x26c>)
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
                astar.g_scores[nx][ny] = tentative_g;
 800270e:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <runAStar+0x26c>)
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	b292      	uxth	r2, r2
 8002724:	801a      	strh	r2, [r3, #0]
                uint16_t f_score = tentative_g + calculateHeuristic(nx, ny, astar.target_x, astar.target_y);
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <runAStar+0x26c>)
 8002728:	7a5b      	ldrb	r3, [r3, #9]
 800272a:	461a      	mov	r2, r3
 800272c:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <runAStar+0x26c>)
 800272e:	7a9b      	ldrb	r3, [r3, #10]
 8002730:	69f9      	ldr	r1, [r7, #28]
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	f7ff fd5f 	bl	80021f6 <calculateHeuristic>
 8002738:	4603      	mov	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4413      	add	r3, r2
 8002742:	82fb      	strh	r3, [r7, #22]
                Node neighbor_node = { .x = nx, .y = ny, .f_score = f_score };
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	723b      	strb	r3, [r7, #8]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	727b      	strb	r3, [r7, #9]
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	817b      	strh	r3, [r7, #10]
                push_to_heap(astar.open_list, &astar.open_list_count, neighbor_node);
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <runAStar+0x26c>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4915      	ldr	r1, [pc, #84]	@ (80027b0 <runAStar+0x274>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fcf3 	bl	8002148 <push_to_heap>
 8002762:	e002      	b.n	800276a <runAStar+0x22e>
                continue;
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <runAStar+0x22e>
                continue;
 8002768:	bf00      	nop
        for (int i = 0; i < 4; i++) {
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	3301      	adds	r3, #1
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002772:	2b03      	cmp	r3, #3
 8002774:	f77f af62 	ble.w	800263c <runAStar+0x100>
 8002778:	e000      	b.n	800277c <runAStar+0x240>
        if (astar.in_closed_list[x][y]) continue;
 800277a:	bf00      	nop
    while (astar.open_list_count > 0 && nodes_processed < MAX_NODES) {
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <runAStar+0x26c>)
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	2b00      	cmp	r3, #0
 8002782:	dd04      	ble.n	800278e <runAStar+0x252>
 8002784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	f6ff af1c 	blt.w	80025c6 <runAStar+0x8a>
            }
        }
    }

    if (nodes_processed >= MAX_NODES) {
 800278e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002792:	429a      	cmp	r2, r3
 8002794:	db02      	blt.n	800279c <runAStar+0x260>
        API_log("Warning: A* terminated due to iteration limit");
 8002796:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <runAStar+0x28c>)
 8002798:	f7fe ff2f 	bl	80015fa <API_log>
    }

    return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3738      	adds	r7, #56	@ 0x38
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000708 	.word	0x20000708
 80027ac:	08009e24 	.word	0x08009e24
 80027b0:	20000730 	.word	0x20000730
 80027b4:	08009e5c 	.word	0x08009e5c
 80027b8:	20000608 	.word	0x20000608
 80027bc:	0800a2e4 	.word	0x0800a2e4
 80027c0:	0800a2f4 	.word	0x0800a2f4
 80027c4:	0800a304 	.word	0x0800a304
 80027c8:	08009e7c 	.word	0x08009e7c

080027cc <getRequiredTurns>:

//=============================================================================
// MOVEMENT AND NAVIGATION CONTROL
//=============================================================================

static int getRequiredTurns(Heading from, Heading to) {
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	71fb      	strb	r3, [r7, #7]
 80027d8:	4613      	mov	r3, r2
 80027da:	71bb      	strb	r3, [r7, #6]
    int diff = (to - from + 4) % 4;
 80027dc:	79ba      	ldrb	r2, [r7, #6]
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	3304      	adds	r3, #4
 80027e4:	425a      	negs	r2, r3
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	bf58      	it	pl
 80027f0:	4253      	negpl	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    switch (diff) {
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d813      	bhi.n	8002822 <getRequiredTurns+0x56>
 80027fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <getRequiredTurns+0x34>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	08002815 	.word	0x08002815
 8002808:	08002819 	.word	0x08002819
 800280c:	0800281d 	.word	0x0800281d
        case 0: return 0;
 8002810:	2300      	movs	r3, #0
 8002812:	e007      	b.n	8002824 <getRequiredTurns+0x58>
        case 1: return 1;
 8002814:	2301      	movs	r3, #1
 8002816:	e005      	b.n	8002824 <getRequiredTurns+0x58>
        case 2: return 2;
 8002818:	2302      	movs	r3, #2
 800281a:	e003      	b.n	8002824 <getRequiredTurns+0x58>
        case 3: return -1;
 800281c:	f04f 33ff 	mov.w	r3, #4294967295
 8002820:	e000      	b.n	8002824 <getRequiredTurns+0x58>
    }
    return 0;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <getHeadingForDirection>:

static Heading getHeadingForDirection(int dx_val, int dy_val) {
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e013      	b.n	8002868 <getHeadingForDirection+0x38>
        if (dx[i] == dx_val && dy[i] == dy_val) {
 8002840:	4a0e      	ldr	r2, [pc, #56]	@ (800287c <getHeadingForDirection+0x4c>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d109      	bne.n	8002862 <getHeadingForDirection+0x32>
 800284e:	4a0c      	ldr	r2, [pc, #48]	@ (8002880 <getHeadingForDirection+0x50>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d102      	bne.n	8002862 <getHeadingForDirection+0x32>
            return (Heading)i;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e006      	b.n	8002870 <getHeadingForDirection+0x40>
    for (int i = 0; i < 4; i++) {
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	dde8      	ble.n	8002840 <getHeadingForDirection+0x10>
        }
    }
    return NORTH;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	0800a2e4 	.word	0x0800a2e4
 8002880:	0800a2f4 	.word	0x0800a2f4

08002884 <findNextExplorationStep>:

static int findNextExplorationStep(int* next_x, int* next_y) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    if (astar.g_scores[astar.target_x][astar.target_y] == UINT16_MAX) {
 800288e:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <findNextExplorationStep+0x100>)
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	4b3c      	ldr	r3, [pc, #240]	@ (8002984 <findNextExplorationStep+0x100>)
 8002894:	7a5b      	ldrb	r3, [r3, #9]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <findNextExplorationStep+0x100>)
 800289e:	7a9b      	ldrb	r3, [r3, #10]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d104      	bne.n	80028b8 <findNextExplorationStep+0x34>
        API_log("No path found to target during exploration");
 80028ae:	4836      	ldr	r0, [pc, #216]	@ (8002988 <findNextExplorationStep+0x104>)
 80028b0:	f7fe fea3 	bl	80015fa <API_log>
        return 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e061      	b.n	800297c <findNextExplorationStep+0xf8>
    }

    int trace_x = astar.target_x;
 80028b8:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <findNextExplorationStep+0x100>)
 80028ba:	7a5b      	ldrb	r3, [r3, #9]
 80028bc:	61fb      	str	r3, [r7, #28]
    int trace_y = astar.target_y;
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <findNextExplorationStep+0x100>)
 80028c0:	7a9b      	ldrb	r3, [r3, #10]
 80028c2:	61bb      	str	r3, [r7, #24]
    int safety_counter = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
    const int MAX_TRACE = astar.maze_size * 2;
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <findNextExplorationStep+0x100>)
 80028ca:	889b      	ldrh	r3, [r3, #4]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	613b      	str	r3, [r7, #16]

    while (safety_counter < MAX_TRACE) {
 80028d0:	e04c      	b.n	800296c <findNextExplorationStep+0xe8>
        if (astar.predecessor_x[trace_x][trace_y] == astar.current_x &&
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <findNextExplorationStep+0x100>)
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <findNextExplorationStep+0x100>)
 80028e6:	799b      	ldrb	r3, [r3, #6]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d114      	bne.n	8002916 <findNextExplorationStep+0x92>
            astar.predecessor_y[trace_x][trace_y] == astar.current_y) {
 80028ec:	4b25      	ldr	r3, [pc, #148]	@ (8002984 <findNextExplorationStep+0x100>)
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <findNextExplorationStep+0x100>)
 8002900:	79db      	ldrb	r3, [r3, #7]
        if (astar.predecessor_x[trace_x][trace_y] == astar.current_x &&
 8002902:	429a      	cmp	r2, r3
 8002904:	d107      	bne.n	8002916 <findNextExplorationStep+0x92>
            *next_x = trace_x;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	601a      	str	r2, [r3, #0]
            *next_y = trace_y;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	601a      	str	r2, [r3, #0]
            return 1;
 8002912:	2301      	movs	r3, #1
 8002914:	e032      	b.n	800297c <findNextExplorationStep+0xf8>
        }

        if (astar.predecessor_x[trace_x][trace_y] == 255) {
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <findNextExplorationStep+0x100>)
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2bff      	cmp	r3, #255	@ 0xff
 800292a:	d104      	bne.n	8002936 <findNextExplorationStep+0xb2>
            API_log("Broken path during exploration step finding");
 800292c:	4817      	ldr	r0, [pc, #92]	@ (800298c <findNextExplorationStep+0x108>)
 800292e:	f7fe fe64 	bl	80015fa <API_log>
            return 0;
 8002932:	2300      	movs	r3, #0
 8002934:	e022      	b.n	800297c <findNextExplorationStep+0xf8>
        }

        int temp_x = astar.predecessor_x[trace_x][trace_y];
 8002936:	4b13      	ldr	r3, [pc, #76]	@ (8002984 <findNextExplorationStep+0x100>)
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
        int temp_y = astar.predecessor_y[trace_x][trace_y];
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <findNextExplorationStep+0x100>)
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]
        trace_x = temp_x;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	61fb      	str	r3, [r7, #28]
        trace_y = temp_y;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	61bb      	str	r3, [r7, #24]
        safety_counter++;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
    while (safety_counter < MAX_TRACE) {
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbae      	blt.n	80028d2 <findNextExplorationStep+0x4e>
    }

    API_log("Failed to find next exploration step");
 8002974:	4806      	ldr	r0, [pc, #24]	@ (8002990 <findNextExplorationStep+0x10c>)
 8002976:	f7fe fe40 	bl	80015fa <API_log>
    return 0;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000708 	.word	0x20000708
 8002988:	08009eac 	.word	0x08009eac
 800298c:	08009ed8 	.word	0x08009ed8
 8002990:	08009f04 	.word	0x08009f04

08002994 <calculateMazeCenter>:

//=============================================================================
// STATE MANAGEMENT AND MAIN CONTROL
//=============================================================================

static void calculateMazeCenter(int* center_x, int* center_y) {
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    *center_x = astar.maze_width / 2;
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <calculateMazeCenter+0x60>)
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
    *center_y = astar.maze_height / 2;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <calculateMazeCenter+0x60>)
 80029ae:	78db      	ldrb	r3, [r3, #3]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
    if (astar.maze_width % 2 == 0) (*center_x)--;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <calculateMazeCenter+0x60>)
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <calculateMazeCenter+0x3e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
    if (astar.maze_height % 2 == 0) (*center_y)--;
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <calculateMazeCenter+0x60>)
 80029d4:	78db      	ldrb	r3, [r3, #3]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <calculateMazeCenter+0x56>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20000708 	.word	0x20000708

080029f8 <handleExplorationPhase>:

static int handleExplorationPhase(int* next_x, int* next_y) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    int center_x, center_y;
    calculateMazeCenter(&center_x, &center_y);
 8002a02:	f107 0208 	add.w	r2, r7, #8
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ffc1 	bl	8002994 <calculateMazeCenter>

    if (astar.current_x == center_x && astar.current_y == center_y) {
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <handleExplorationPhase+0x84>)
 8002a14:	799b      	ldrb	r3, [r3, #6]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d10d      	bne.n	8002a3a <handleExplorationPhase+0x42>
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <handleExplorationPhase+0x84>)
 8002a20:	79db      	ldrb	r3, [r3, #7]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d107      	bne.n	8002a3a <handleExplorationPhase+0x42>
        astar.state = RETURN_TO_START;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <handleExplorationPhase+0x84>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	705a      	strb	r2, [r3, #1]
        API_log("Reached center - starting return to origin");
 8002a30:	4813      	ldr	r0, [pc, #76]	@ (8002a80 <handleExplorationPhase+0x88>)
 8002a32:	f7fe fde2 	bl	80015fa <API_log>
        return 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e01b      	b.n	8002a72 <handleExplorationPhase+0x7a>
    }

    setTarget(center_x, center_y);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fbf3 	bl	800222c <setTarget>
    if (!runAStar(astar.current_x, astar.current_y)) {
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <handleExplorationPhase+0x84>)
 8002a48:	799b      	ldrb	r3, [r3, #6]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <handleExplorationPhase+0x84>)
 8002a4e:	79db      	ldrb	r3, [r3, #7]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7ff fd72 	bl	800253c <runAStar>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <handleExplorationPhase+0x70>
        API_log("No path found during exploration");
 8002a5e:	4809      	ldr	r0, [pc, #36]	@ (8002a84 <handleExplorationPhase+0x8c>)
 8002a60:	f7fe fdcb 	bl	80015fa <API_log>
        return 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e004      	b.n	8002a72 <handleExplorationPhase+0x7a>
    }
    return findNextExplorationStep(next_x, next_y);
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ff0a 	bl	8002884 <findNextExplorationStep>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000708 	.word	0x20000708
 8002a80:	08009f2c 	.word	0x08009f2c
 8002a84:	08009f58 	.word	0x08009f58

08002a88 <handleReturnToStartPhase>:

static int handleReturnToStartPhase(int* next_x, int* next_y) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    if (astar.current_x == 0 && astar.current_y == 0) {
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002a94:	799b      	ldrb	r3, [r3, #6]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10e      	bne.n	8002ab8 <handleReturnToStartPhase+0x30>
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002a9c:	79db      	ldrb	r3, [r3, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <handleReturnToStartPhase+0x30>
        astar.state = OPTIMAL_PATH;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	705a      	strb	r2, [r3, #1]
        astar.path_step = 0;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	86da      	strh	r2, [r3, #54]	@ 0x36
        API_log("Returned to origin - starting optimal path phase");
 8002aae:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <handleReturnToStartPhase+0x70>)
 8002ab0:	f7fe fda3 	bl	80015fa <API_log>
        return 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e019      	b.n	8002aec <handleReturnToStartPhase+0x64>
    }

    setTarget(0, 0);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7ff fbb6 	bl	800222c <setTarget>
    if (!runAStar(astar.current_x, astar.current_y)) {
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002ac2:	799b      	ldrb	r3, [r3, #6]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <handleReturnToStartPhase+0x6c>)
 8002ac8:	79db      	ldrb	r3, [r3, #7]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f7ff fd35 	bl	800253c <runAStar>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <handleReturnToStartPhase+0x5a>
        API_log("No path found for returning to start");
 8002ad8:	4808      	ldr	r0, [pc, #32]	@ (8002afc <handleReturnToStartPhase+0x74>)
 8002ada:	f7fe fd8e 	bl	80015fa <API_log>
        return 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e004      	b.n	8002aec <handleReturnToStartPhase+0x64>
    }
    return findNextExplorationStep(next_x, next_y);
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fecd 	bl	8002884 <findNextExplorationStep>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000708 	.word	0x20000708
 8002af8:	08009f7c 	.word	0x08009f7c
 8002afc:	08009fb0 	.word	0x08009fb0

08002b00 <handleOptimalPathPhase>:

static int handleOptimalPathPhase(int* next_x, int* next_y) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
    int center_x, center_y;
    calculateMazeCenter(&center_x, &center_y);
 8002b0a:	f107 0208 	add.w	r2, r7, #8
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff3d 	bl	8002994 <calculateMazeCenter>
    setTarget(center_x, center_y);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fb83 	bl	800222c <setTarget>

    static bool path_calculated = false;
    if (!path_calculated) {
 8002b26:	4b48      	ldr	r3, [pc, #288]	@ (8002c48 <handleOptimalPathPhase+0x148>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02a      	beq.n	8002b8a <handleOptimalPathPhase+0x8a>
        if (!runAStar(astar.current_x, astar.current_y)) {
 8002b34:	4b45      	ldr	r3, [pc, #276]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b36:	799b      	ldrb	r3, [r3, #6]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b3c:	79db      	ldrb	r3, [r3, #7]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff fcfb 	bl	800253c <runAStar>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <handleOptimalPathPhase+0x5c>
            API_log("No optimal path found - mission failed");
 8002b4c:	4840      	ldr	r0, [pc, #256]	@ (8002c50 <handleOptimalPathPhase+0x150>)
 8002b4e:	f7fe fd54 	bl	80015fa <API_log>
            astar.state = MISSION_COMPLETE;
 8002b52:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b54:	2204      	movs	r2, #4
 8002b56:	705a      	strb	r2, [r3, #1]
            return 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e071      	b.n	8002c40 <handleOptimalPathPhase+0x140>
        }
        if (!storeOptimalPath(astar.current_x, astar.current_y)) {
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b5e:	799b      	ldrb	r3, [r3, #6]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b64:	79db      	ldrb	r3, [r3, #7]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7ff fbf3 	bl	8002354 <storeOptimalPath>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <handleOptimalPathPhase+0x84>
            API_log("Failed to store optimal path");
 8002b74:	4837      	ldr	r0, [pc, #220]	@ (8002c54 <handleOptimalPathPhase+0x154>)
 8002b76:	f7fe fd40 	bl	80015fa <API_log>
            astar.state = MISSION_COMPLETE;
 8002b7a:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	705a      	strb	r2, [r3, #1]
            return 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e05d      	b.n	8002c40 <handleOptimalPathPhase+0x140>
        }
        path_calculated = true;
 8002b84:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <handleOptimalPathPhase+0x148>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
    }

    if (astar.path_step >= astar.optimal_path_length ||
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b8c:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b90:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d20b      	bcs.n	8002bae <handleOptimalPathPhase+0xae>
        (astar.current_x == astar.target_x && astar.current_y == astar.target_y)) {
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b98:	799a      	ldrb	r2, [r3, #6]
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002b9c:	7a5b      	ldrb	r3, [r3, #9]
    if (astar.path_step >= astar.optimal_path_length ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d10d      	bne.n	8002bbe <handleOptimalPathPhase+0xbe>
        (astar.current_x == astar.target_x && astar.current_y == astar.target_y)) {
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002ba4:	79da      	ldrb	r2, [r3, #7]
 8002ba6:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002ba8:	7a9b      	ldrb	r3, [r3, #10]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d107      	bne.n	8002bbe <handleOptimalPathPhase+0xbe>
        astar.state = RETURN_FROM_OPTIMAL;
 8002bae:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	705a      	strb	r2, [r3, #1]
        API_log("Reached center via optimal path! Starting return to origin.");
 8002bb4:	4828      	ldr	r0, [pc, #160]	@ (8002c58 <handleOptimalPathPhase+0x158>)
 8002bb6:	f7fe fd20 	bl	80015fa <API_log>
        return 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e040      	b.n	8002c40 <handleOptimalPathPhase+0x140>
    }

    if (astar.path_step < astar.optimal_path_length &&
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bc0:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bc4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d219      	bcs.n	8002bfe <handleOptimalPathPhase+0xfe>
            astar.optimal_path_x[astar.path_step] == astar.current_x &&
 8002bca:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bd0:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bd8:	799b      	ldrb	r3, [r3, #6]
    if (astar.path_step < astar.optimal_path_length &&
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d10f      	bne.n	8002bfe <handleOptimalPathPhase+0xfe>
            astar.optimal_path_y[astar.path_step] == astar.current_y) {
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002be4:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8002be6:	4413      	add	r3, r2
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bec:	79db      	ldrb	r3, [r3, #7]
            astar.optimal_path_x[astar.path_step] == astar.current_x &&
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d105      	bne.n	8002bfe <handleOptimalPathPhase+0xfe>
        astar.path_step++;
 8002bf2:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }

    if (astar.path_step >= astar.optimal_path_length) {
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c00:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c04:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d307      	bcc.n	8002c1a <handleOptimalPathPhase+0x11a>
        astar.state = RETURN_FROM_OPTIMAL;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	705a      	strb	r2, [r3, #1]
        API_log("Finished optimal path traversal. Starting return to origin.");
 8002c10:	4812      	ldr	r0, [pc, #72]	@ (8002c5c <handleOptimalPathPhase+0x15c>)
 8002c12:	f7fe fcf2 	bl	80015fa <API_log>
        return 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e012      	b.n	8002c40 <handleOptimalPathPhase+0x140>
    }

    *next_x = astar.optimal_path_x[astar.path_step];
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c20:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	601a      	str	r2, [r3, #0]
    *next_y = astar.optimal_path_y[astar.path_step];
 8002c2c:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	4a06      	ldr	r2, [pc, #24]	@ (8002c4c <handleOptimalPathPhase+0x14c>)
 8002c32:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
    return 1;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000074c 	.word	0x2000074c
 8002c4c:	20000708 	.word	0x20000708
 8002c50:	08009fd8 	.word	0x08009fd8
 8002c54:	0800a000 	.word	0x0800a000
 8002c58:	0800a020 	.word	0x0800a020
 8002c5c:	0800a05c 	.word	0x0800a05c

08002c60 <handleReturnFromOptimalPhase>:

static int handleReturnFromOptimalPhase(int* next_x, int* next_y) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
    if (astar.current_x == 0 && astar.current_y == 0) {
 8002c6a:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <handleReturnFromOptimalPhase+0x68>)
 8002c6c:	799b      	ldrb	r3, [r3, #6]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <handleReturnFromOptimalPhase+0x2a>
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <handleReturnFromOptimalPhase+0x68>)
 8002c74:	79db      	ldrb	r3, [r3, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <handleReturnFromOptimalPhase+0x2a>
        astar.state = MISSION_COMPLETE;
 8002c7a:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <handleReturnFromOptimalPhase+0x68>)
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	705a      	strb	r2, [r3, #1]
        API_log("Mission Complete: Returned to origin and stopped.");
 8002c80:	4812      	ldr	r0, [pc, #72]	@ (8002ccc <handleReturnFromOptimalPhase+0x6c>)
 8002c82:	f7fe fcba 	bl	80015fa <API_log>
        return 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e019      	b.n	8002cbe <handleReturnFromOptimalPhase+0x5e>
    }

    setTarget(0, 0);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff facd 	bl	800222c <setTarget>
    if (!runAStar(astar.current_x, astar.current_y)) {
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <handleReturnFromOptimalPhase+0x68>)
 8002c94:	799b      	ldrb	r3, [r3, #6]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <handleReturnFromOptimalPhase+0x68>)
 8002c9a:	79db      	ldrb	r3, [r3, #7]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f7ff fc4c 	bl	800253c <runAStar>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <handleReturnFromOptimalPhase+0x54>
        API_log("No path found to return to origin.");
 8002caa:	4809      	ldr	r0, [pc, #36]	@ (8002cd0 <handleReturnFromOptimalPhase+0x70>)
 8002cac:	f7fe fca5 	bl	80015fa <API_log>
        return 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e004      	b.n	8002cbe <handleReturnFromOptimalPhase+0x5e>
    }
    return findNextExplorationStep(next_x, next_y);
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fde4 	bl	8002884 <findNextExplorationStep>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000708 	.word	0x20000708
 8002ccc:	0800a098 	.word	0x0800a098
 8002cd0:	0800a0cc 	.word	0x0800a0cc

08002cd4 <performAction>:

//=============================================================================
// MAIN SOLVER FUNCTION
//=============================================================================

static void performAction(Action action) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
    switch (action) {
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d86f      	bhi.n	8002dc4 <performAction+0xf0>
 8002ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <performAction+0x18>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002da3 	.word	0x08002da3
 8002cf4:	08002d83 	.word	0x08002d83
 8002cf8:	08002dc3 	.word	0x08002dc3
        case FORW:
            API_moveFORW();
 8002cfc:	f7fe fc68 	bl	80015d0 <API_moveFORW>
            astar.current_x += dx[astar.current_heading];
 8002d00:	4b32      	ldr	r3, [pc, #200]	@ (8002dcc <performAction+0xf8>)
 8002d02:	799a      	ldrb	r2, [r3, #6]
 8002d04:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <performAction+0xf8>)
 8002d06:	7a1b      	ldrb	r3, [r3, #8]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <performAction+0xfc>)
 8002d0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <performAction+0xf8>)
 8002d18:	719a      	strb	r2, [r3, #6]
            astar.current_y += dy[astar.current_heading];
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <performAction+0xf8>)
 8002d1c:	79da      	ldrb	r2, [r3, #7]
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <performAction+0xf8>)
 8002d20:	7a1b      	ldrb	r3, [r3, #8]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <performAction+0x100>)
 8002d26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <performAction+0xf8>)
 8002d32:	71da      	strb	r2, [r3, #7]
            if (astar.path_history_length < MAX_PATH_LENGTH) {
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <performAction+0xf8>)
 8002d36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d21a      	bcs.n	8002d76 <performAction+0xa2>
                astar.path_history_x[astar.path_history_length] = astar.current_x;
 8002d40:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <performAction+0xf8>)
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <performAction+0xf8>)
 8002d46:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dcc <performAction+0xf8>)
 8002d4e:	7992      	ldrb	r2, [r2, #6]
 8002d50:	701a      	strb	r2, [r3, #0]
                astar.path_history_y[astar.path_history_length] = astar.current_y;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <performAction+0xf8>)
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <performAction+0xf8>)
 8002d58:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <performAction+0xf8>)
 8002d60:	79d2      	ldrb	r2, [r2, #7]
 8002d62:	701a      	strb	r2, [r3, #0]
                astar.path_history_length++;
 8002d64:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <performAction+0xf8>)
 8002d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <performAction+0xf8>)
 8002d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8002d74:	e002      	b.n	8002d7c <performAction+0xa8>
            } else {
                API_log("Warning: Path history buffer full");
 8002d76:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <performAction+0x104>)
 8002d78:	f7fe fc3f 	bl	80015fa <API_log>
            }
            updateWalls();
 8002d7c:	f7fe ff06 	bl	8001b8c <updateWalls>
            break;
 8002d80:	e020      	b.n	8002dc4 <performAction+0xf0>
        case LEFT:
            API_turnLeft();
 8002d82:	f7fe fc33 	bl	80015ec <API_turnLeft>
            astar.current_heading = (astar.current_heading + 3) % 4;
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <performAction+0xf8>)
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	3303      	adds	r3, #3
 8002d8c:	425a      	negs	r2, r3
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	bf58      	it	pl
 8002d98:	4253      	negpl	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <performAction+0xf8>)
 8002d9e:	721a      	strb	r2, [r3, #8]
            break;
 8002da0:	e010      	b.n	8002dc4 <performAction+0xf0>
        case RIGHT:
            API_turnRight();
 8002da2:	f7fe fc1c 	bl	80015de <API_turnRight>
            astar.current_heading = (astar.current_heading + 1) % 4;
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <performAction+0xf8>)
 8002da8:	7a1b      	ldrb	r3, [r3, #8]
 8002daa:	3301      	adds	r3, #1
 8002dac:	425a      	negs	r2, r3
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	bf58      	it	pl
 8002db8:	4253      	negpl	r3, r2
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <performAction+0xf8>)
 8002dbe:	721a      	strb	r2, [r3, #8]
            break;
 8002dc0:	e000      	b.n	8002dc4 <performAction+0xf0>
        case IDLE:
            break;
 8002dc2:	bf00      	nop
    }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000708 	.word	0x20000708
 8002dd0:	0800a2e4 	.word	0x0800a2e4
 8002dd4:	0800a2f4 	.word	0x0800a2f4
 8002dd8:	0800a0f0 	.word	0x0800a0f0

08002ddc <astarSolver>:

Action astarSolver(int* next_x, int* next_y) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    if (!astar.initialized) {
 8002de6:	4b71      	ldr	r3, [pc, #452]	@ (8002fac <astarSolver+0x1d0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <astarSolver+0x32>
        if (!initAStar()) {
 8002df4:	f7fe ff5c 	bl	8001cb0 <initAStar>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <astarSolver+0x32>
            API_log("Failed to initialize A* - mission impossible");
 8002dfe:	486c      	ldr	r0, [pc, #432]	@ (8002fb0 <astarSolver+0x1d4>)
 8002e00:	f7fe fbfb 	bl	80015fa <API_log>
            astar.state = MISSION_COMPLETE;
 8002e04:	4b69      	ldr	r3, [pc, #420]	@ (8002fac <astarSolver+0x1d0>)
 8002e06:	2204      	movs	r2, #4
 8002e08:	705a      	strb	r2, [r3, #1]
            return IDLE;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0c9      	b.n	8002fa2 <astarSolver+0x1c6>
        }
    }

    if (astar.state == MISSION_COMPLETE) return IDLE;
 8002e0e:	4b67      	ldr	r3, [pc, #412]	@ (8002fac <astarSolver+0x1d0>)
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d101      	bne.n	8002e1a <astarSolver+0x3e>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0c3      	b.n	8002fa2 <astarSolver+0x1c6>

    bool success = false;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
    switch (astar.state) {
 8002e1e:	4b63      	ldr	r3, [pc, #396]	@ (8002fac <astarSolver+0x1d0>)
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d86b      	bhi.n	8002efe <astarSolver+0x122>
 8002e26:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <astarSolver+0x50>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e41 	.word	0x08002e41
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002ea1 	.word	0x08002ea1
 8002e38:	08002ed1 	.word	0x08002ed1
 8002e3c:	08002efb 	.word	0x08002efb
        case EXPLORATION:
        	SPEED = 200.0f;
 8002e40:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb4 <astarSolver+0x1d8>)
 8002e42:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb8 <astarSolver+0x1dc>)
 8002e44:	601a      	str	r2, [r3, #0]
            gpio_writePin(runLedPort, runLedPin, LOW);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2101      	movs	r1, #1
 8002e4a:	485c      	ldr	r0, [pc, #368]	@ (8002fbc <astarSolver+0x1e0>)
 8002e4c:	f003 f85e 	bl	8005f0c <gpio_writePin>
            gpio_writePin(searchLedPort, searchLedPin, HIGH);
 8002e50:	2201      	movs	r2, #1
 8002e52:	2100      	movs	r1, #0
 8002e54:	4859      	ldr	r0, [pc, #356]	@ (8002fbc <astarSolver+0x1e0>)
 8002e56:	f003 f859 	bl	8005f0c <gpio_writePin>
            success = handleExplorationPhase(next_x, next_y);
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fdcb 	bl	80029f8 <handleExplorationPhase>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	77fb      	strb	r3, [r7, #31]
            break;
 8002e6e:	e046      	b.n	8002efe <astarSolver+0x122>
        case RETURN_TO_START:
        	SPEED = 200.0f;
 8002e70:	4b50      	ldr	r3, [pc, #320]	@ (8002fb4 <astarSolver+0x1d8>)
 8002e72:	4a51      	ldr	r2, [pc, #324]	@ (8002fb8 <astarSolver+0x1dc>)
 8002e74:	601a      	str	r2, [r3, #0]
            gpio_writePin(runLedPort, runLedPin, LOW);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4850      	ldr	r0, [pc, #320]	@ (8002fbc <astarSolver+0x1e0>)
 8002e7c:	f003 f846 	bl	8005f0c <gpio_writePin>
            gpio_writePin(searchLedPort, searchLedPin, HIGH);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2100      	movs	r1, #0
 8002e84:	484d      	ldr	r0, [pc, #308]	@ (8002fbc <astarSolver+0x1e0>)
 8002e86:	f003 f841 	bl	8005f0c <gpio_writePin>
            success = handleReturnToStartPhase(next_x, next_y);
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fdfb 	bl	8002a88 <handleReturnToStartPhase>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
            break;
 8002e9e:	e02e      	b.n	8002efe <astarSolver+0x122>
        case OPTIMAL_PATH:
        	SPEED = 225.0f;
 8002ea0:	4b44      	ldr	r3, [pc, #272]	@ (8002fb4 <astarSolver+0x1d8>)
 8002ea2:	4a47      	ldr	r2, [pc, #284]	@ (8002fc0 <astarSolver+0x1e4>)
 8002ea4:	601a      	str	r2, [r3, #0]
            gpio_writePin(runLedPort, runLedPin, HIGH);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4844      	ldr	r0, [pc, #272]	@ (8002fbc <astarSolver+0x1e0>)
 8002eac:	f003 f82e 	bl	8005f0c <gpio_writePin>
            gpio_writePin(searchLedPort, searchLedPin, LOW);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4841      	ldr	r0, [pc, #260]	@ (8002fbc <astarSolver+0x1e0>)
 8002eb6:	f003 f829 	bl	8005f0c <gpio_writePin>
            success = handleOptimalPathPhase(next_x, next_y);
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fe1f 	bl	8002b00 <handleOptimalPathPhase>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	77fb      	strb	r3, [r7, #31]
            break;
 8002ece:	e016      	b.n	8002efe <astarSolver+0x122>
        case RETURN_FROM_OPTIMAL:
            gpio_writePin(runLedPort, runLedPin, LOW);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4839      	ldr	r0, [pc, #228]	@ (8002fbc <astarSolver+0x1e0>)
 8002ed6:	f003 f819 	bl	8005f0c <gpio_writePin>
            gpio_writePin(searchLedPort, searchLedPin, HIGH);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2100      	movs	r1, #0
 8002ede:	4837      	ldr	r0, [pc, #220]	@ (8002fbc <astarSolver+0x1e0>)
 8002ee0:	f003 f814 	bl	8005f0c <gpio_writePin>
            success = handleReturnFromOptimalPhase(next_x, next_y);
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff feba 	bl	8002c60 <handleReturnFromOptimalPhase>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
            break;
 8002ef8:	e001      	b.n	8002efe <astarSolver+0x122>
        case MISSION_COMPLETE:
            return IDLE;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e051      	b.n	8002fa2 <astarSolver+0x1c6>
    }

    if (!success) {
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <astarSolver+0x138>
        API_log("A* failed to find a path in the current state.");
 8002f0a:	482e      	ldr	r0, [pc, #184]	@ (8002fc4 <astarSolver+0x1e8>)
 8002f0c:	f7fe fb75 	bl	80015fa <API_log>
        return IDLE;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e046      	b.n	8002fa2 <astarSolver+0x1c6>
    }

    int dx_move = *next_x - astar.current_x;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <astarSolver+0x1d0>)
 8002f1a:	7992      	ldrb	r2, [r2, #6]
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
    int dy_move = *next_y - astar.current_y;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <astarSolver+0x1d0>)
 8002f26:	79d2      	ldrb	r2, [r2, #7]
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

    if (abs(dx_move) + abs(dy_move) != 1) {
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002f32:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfb8      	it	lt
 8002f3c:	425b      	neglt	r3, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d004      	beq.n	8002f4e <astarSolver+0x172>
        API_log("Error: Non-adjacent move attempted");
 8002f44:	4820      	ldr	r0, [pc, #128]	@ (8002fc8 <astarSolver+0x1ec>)
 8002f46:	f7fe fb58 	bl	80015fa <API_log>
        return IDLE;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e029      	b.n	8002fa2 <astarSolver+0x1c6>
    }

    Heading required_heading = getHeadingForDirection(dx_move, dy_move);
 8002f4e:	6979      	ldr	r1, [r7, #20]
 8002f50:	69b8      	ldr	r0, [r7, #24]
 8002f52:	f7ff fc6d 	bl	8002830 <getHeadingForDirection>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
    int turns = getRequiredTurns(astar.current_heading, required_heading);
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <astarSolver+0x1d0>)
 8002f5c:	7a1b      	ldrb	r3, [r3, #8]
 8002f5e:	7cfa      	ldrb	r2, [r7, #19]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fc32 	bl	80027cc <getRequiredTurns>
 8002f68:	60f8      	str	r0, [r7, #12]

    if (turns == 0) return FORW;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <astarSolver+0x198>
 8002f70:	2300      	movs	r3, #0
 8002f72:	e016      	b.n	8002fa2 <astarSolver+0x1c6>
    if (turns == 1) return RIGHT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <astarSolver+0x1a2>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e011      	b.n	8002fa2 <astarSolver+0x1c6>
    if (turns == -1) return LEFT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d101      	bne.n	8002f8a <astarSolver+0x1ae>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e00b      	b.n	8002fa2 <astarSolver+0x1c6>
    if (turns == 2) {
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <astarSolver+0x1c4>
        performAction(LEFT);
 8002f90:	2002      	movs	r0, #2
 8002f92:	f7ff fe9f 	bl	8002cd4 <performAction>
        performAction(LEFT);
 8002f96:	2002      	movs	r0, #2
 8002f98:	f7ff fe9c 	bl	8002cd4 <performAction>
        return FORW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <astarSolver+0x1c6>
    }
    return IDLE;
 8002fa0:	2303      	movs	r3, #3
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000708 	.word	0x20000708
 8002fb0:	0800a114 	.word	0x0800a114
 8002fb4:	20000408 	.word	0x20000408
 8002fb8:	43480000 	.word	0x43480000
 8002fbc:	40010c00 	.word	0x40010c00
 8002fc0:	43610000 	.word	0x43610000
 8002fc4:	0800a144 	.word	0x0800a144
 8002fc8:	0800a174 	.word	0x0800a174

08002fcc <aStar>:

int aStar() {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
    API_log("Running...");
 8002fd2:	4813      	ldr	r0, [pc, #76]	@ (8003020 <aStar+0x54>)
 8002fd4:	f7fe fb11 	bl	80015fa <API_log>
    while (astar.state != MISSION_COMPLETE) {
 8002fd8:	e012      	b.n	8003000 <aStar+0x34>
        int next_x = -1, next_y = -1;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	607b      	str	r3, [r7, #4]
        Action nextMove = astarSolver(&next_x, &next_y);
 8002fe6:	1d3a      	adds	r2, r7, #4
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fef4 	bl	8002ddc <astarSolver>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
        performAction(nextMove);
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe6a 	bl	8002cd4 <performAction>
    while (astar.state != MISSION_COMPLETE) {
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <aStar+0x58>)
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d1e8      	bne.n	8002fda <aStar+0xe>
    }

    remi(HALT);
 8003008:	2008      	movs	r0, #8
 800300a:	f001 fa59 	bl	80044c0 <remi>
    core_speak(CELEBRATE1);
 800300e:	2001      	movs	r0, #1
 8003010:	f001 f9fc 	bl	800440c <core_speak>
    return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	0800a198 	.word	0x0800a198
 8003024:	20000708 	.word	0x20000708

08003028 <fillMap>:
    {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0  ,0},
    {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0  ,0}
};

// Initialize flood map
void fillMap(int returnHome) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 16; x++)
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e013      	b.n	800305e <fillMap+0x36>
        for (int y = 0; y < 16; y++)
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	e00a      	b.n	8003052 <fillMap+0x2a>
            FLOOD_MAP[x][y] = 255;
 800303c:	4919      	ldr	r1, [pc, #100]	@ (80030a4 <fillMap+0x7c>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4413      	add	r3, r2
 8003046:	22ff      	movs	r2, #255	@ 0xff
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int y = 0; y < 16; y++)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b0f      	cmp	r3, #15
 8003056:	ddf1      	ble.n	800303c <fillMap+0x14>
    for (int x = 0; x < 16; x++)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b0f      	cmp	r3, #15
 8003062:	dde8      	ble.n	8003036 <fillMap+0xe>

    if (!returnHome) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d114      	bne.n	8003094 <fillMap+0x6c>
        FLOOD_MAP[7][7] = FLOOD_MAP[7][8] = 0;
 800306a:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <fillMap+0x7c>)
 800306c:	2200      	movs	r2, #0
 800306e:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8003072:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <fillMap+0x7c>)
 8003074:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8003078:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <fillMap+0x7c>)
 800307a:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
        FLOOD_MAP[8][7] = FLOOD_MAP[8][8] = 0;
 800307e:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <fillMap+0x7c>)
 8003080:	2200      	movs	r2, #0
 8003082:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <fillMap+0x7c>)
 8003088:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800308c:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <fillMap+0x7c>)
 800308e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    } else {
        FLOOD_MAP[0][0] = 0;
    }
}
 8003092:	e002      	b.n	800309a <fillMap+0x72>
        FLOOD_MAP[0][0] = 0;
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <fillMap+0x7c>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000750 	.word	0x20000750

080030a8 <updateCurr>:
Point queue[MAX_SIZE];
int front = 0;
int rear = 0;
int visited[16][16]; // Assuming a 16x16 grid, adjust size as needed

void updateCurr() {
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    switch (orient) {
 80030ac:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <updateCurr+0x5c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d822      	bhi.n	80030fc <updateCurr+0x54>
 80030b6:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <updateCurr+0x14>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030e5 	.word	0x080030e5
 80030c8:	080030f1 	.word	0x080030f1
    case North: currY++; break;
 80030cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <updateCurr+0x60>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <updateCurr+0x60>)
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e011      	b.n	80030fc <updateCurr+0x54>
    case East:  currX++; break;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <updateCurr+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a0b      	ldr	r2, [pc, #44]	@ (800310c <updateCurr+0x64>)
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e00b      	b.n	80030fc <updateCurr+0x54>
    case South: currY--; break;
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <updateCurr+0x60>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a07      	ldr	r2, [pc, #28]	@ (8003108 <updateCurr+0x60>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e005      	b.n	80030fc <updateCurr+0x54>
    case West:  currX--; break;
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <updateCurr+0x64>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4a05      	ldr	r2, [pc, #20]	@ (800310c <updateCurr+0x64>)
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	bf00      	nop
    }
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	20000400 	.word	0x20000400
 8003108:	20000b54 	.word	0x20000b54
 800310c:	20000b50 	.word	0x20000b50

08003110 <checkNext>:

int checkNext(int dir) {
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    nextX = currX;
 8003118:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <checkNext+0xd0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a31      	ldr	r2, [pc, #196]	@ (80031e4 <checkNext+0xd4>)
 800311e:	6013      	str	r3, [r2, #0]
    nextY = currY;
 8003120:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <checkNext+0xd8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a31      	ldr	r2, [pc, #196]	@ (80031ec <checkNext+0xdc>)
 8003126:	6013      	str	r3, [r2, #0]

    switch(dir) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00f      	beq.n	800314e <checkNext+0x3e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b04      	cmp	r3, #4
 8003132:	dc10      	bgt.n	8003156 <checkNext+0x46>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d003      	beq.n	8003142 <checkNext+0x32>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d003      	beq.n	8003148 <checkNext+0x38>
 8003140:	e009      	b.n	8003156 <checkNext+0x46>
    case North: dir = 0; break;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	e006      	b.n	8003156 <checkNext+0x46>
    case East : dir = 1; break;
 8003148:	2301      	movs	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	e003      	b.n	8003156 <checkNext+0x46>
    case West : dir =-1;break;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	bf00      	nop
    }

    int nextDir = orient + dir;
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <checkNext+0xe0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
 	if (nextDir == 0) nextDir = West;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <checkNext+0x5a>
 8003166:	2304      	movs	r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
 	if (nextDir == 5) nextDir = North;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d101      	bne.n	8003174 <checkNext+0x64>
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]

    switch(nextDir) {
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	2b03      	cmp	r3, #3
 800317a:	d823      	bhi.n	80031c4 <checkNext+0xb4>
 800317c:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <checkNext+0x74>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a1 	.word	0x080031a1
 800318c:	080031ad 	.word	0x080031ad
 8003190:	080031b9 	.word	0x080031b9
    case North: nextY++; break;
 8003194:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <checkNext+0xdc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	4a14      	ldr	r2, [pc, #80]	@ (80031ec <checkNext+0xdc>)
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e011      	b.n	80031c4 <checkNext+0xb4>
    case East:  nextX++; break;
 80031a0:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <checkNext+0xd4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a0f      	ldr	r2, [pc, #60]	@ (80031e4 <checkNext+0xd4>)
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <checkNext+0xb4>
    case South: nextY--; break;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <checkNext+0xdc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	4a0e      	ldr	r2, [pc, #56]	@ (80031ec <checkNext+0xdc>)
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e005      	b.n	80031c4 <checkNext+0xb4>
    case West:  nextX--; break;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <checkNext+0xd4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3b01      	subs	r3, #1
 80031be:	4a09      	ldr	r2, [pc, #36]	@ (80031e4 <checkNext+0xd4>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	bf00      	nop
    }

    return FLOOD_MAP[nextX][nextY];
 80031c4:	4b07      	ldr	r3, [pc, #28]	@ (80031e4 <checkNext+0xd4>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <checkNext+0xdc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4909      	ldr	r1, [pc, #36]	@ (80031f4 <checkNext+0xe4>)
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000b50 	.word	0x20000b50
 80031e4:	20000b58 	.word	0x20000b58
 80031e8:	20000b54 	.word	0x20000b54
 80031ec:	20000b5c 	.word	0x20000b5c
 80031f0:	20000400 	.word	0x20000400
 80031f4:	20000750 	.word	0x20000750

080031f8 <turn>:

void turn(int angle) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    if (angle == 90) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b5a      	cmp	r3, #90	@ 0x5a
 8003204:	d108      	bne.n	8003218 <turn+0x20>
        TURN_RIGHT(); orient++;
 8003206:	2004      	movs	r0, #4
 8003208:	f001 f95a 	bl	80044c0 <remi>
 800320c:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <turn+0x84>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a1a      	ldr	r2, [pc, #104]	@ (800327c <turn+0x84>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01a      	b.n	800324e <turn+0x56>
    } else if (angle == -90) {
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 800321e:	d108      	bne.n	8003232 <turn+0x3a>
        TURN_LEFT(); orient--;
 8003220:	2005      	movs	r0, #5
 8003222:	f001 f94d 	bl	80044c0 <remi>
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <turn+0x84>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	4a13      	ldr	r2, [pc, #76]	@ (800327c <turn+0x84>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e00d      	b.n	800324e <turn+0x56>
    } else if (angle == 180) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2bb4      	cmp	r3, #180	@ 0xb4
 8003236:	d10a      	bne.n	800324e <turn+0x56>
        TURN_RIGHT(); TURN_RIGHT(); orient += 2;
 8003238:	2004      	movs	r0, #4
 800323a:	f001 f941 	bl	80044c0 <remi>
 800323e:	2004      	movs	r0, #4
 8003240:	f001 f93e 	bl	80044c0 <remi>
 8003244:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <turn+0x84>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3302      	adds	r3, #2
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <turn+0x84>)
 800324c:	6013      	str	r3, [r2, #0]
    }

    if (orient > 4) orient -= 4;
 800324e:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <turn+0x84>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b04      	cmp	r3, #4
 8003254:	dd04      	ble.n	8003260 <turn+0x68>
 8003256:	4b09      	ldr	r3, [pc, #36]	@ (800327c <turn+0x84>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3b04      	subs	r3, #4
 800325c:	4a07      	ldr	r2, [pc, #28]	@ (800327c <turn+0x84>)
 800325e:	6013      	str	r3, [r2, #0]
    if (orient < 1) orient += 4;
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <turn+0x84>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	dc04      	bgt.n	8003272 <turn+0x7a>
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <turn+0x84>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3304      	adds	r3, #4
 800326e:	4a03      	ldr	r2, [pc, #12]	@ (800327c <turn+0x84>)
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000400 	.word	0x20000400

08003280 <proceed>:


void proceed() {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    if      ((checkNext(North) <= FLOOD_MAP[currX][currY]) && (!WALL_FRONT())) { MOVE_FORWARD(); updateCurr(); }
 8003284:	2001      	movs	r0, #1
 8003286:	f7ff ff43 	bl	8003110 <checkNext>
 800328a:	4601      	mov	r1, r0
 800328c:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <proceed+0x128>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <proceed+0x12c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4846      	ldr	r0, [pc, #280]	@ (80033b0 <proceed+0x130>)
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4413      	add	r3, r2
 800329a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800329e:	4299      	cmp	r1, r3
 80032a0:	dc11      	bgt.n	80032c6 <proceed+0x46>
 80032a2:	4b44      	ldr	r3, [pc, #272]	@ (80033b4 <proceed+0x134>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <proceed+0x46>
 80032ae:	4b41      	ldr	r3, [pc, #260]	@ (80033b4 <proceed+0x134>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <proceed+0x46>
 80032ba:	2003      	movs	r0, #3
 80032bc:	f001 f900 	bl	80044c0 <remi>
 80032c0:	f7ff fef2 	bl	80030a8 <updateCurr>
 80032c4:	e06d      	b.n	80033a2 <proceed+0x122>
    else if ((checkNext(East)  <= FLOOD_MAP[currX][currY]) && (!WALL_RIGHT())) {
 80032c6:	2002      	movs	r0, #2
 80032c8:	f7ff ff22 	bl	8003110 <checkNext>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <proceed+0x128>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b36      	ldr	r3, [pc, #216]	@ (80033ac <proceed+0x12c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4836      	ldr	r0, [pc, #216]	@ (80033b0 <proceed+0x130>)
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	4413      	add	r3, r2
 80032dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032e0:	4299      	cmp	r1, r3
 80032e2:	dc20      	bgt.n	8003326 <proceed+0xa6>
 80032e4:	4b33      	ldr	r3, [pc, #204]	@ (80033b4 <proceed+0x134>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11a      	bne.n	8003326 <proceed+0xa6>
    	if (WALL_LEFT()) {
 80032f0:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <proceed+0x134>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <proceed+0x94>
    		turn( 90);
 80032fc:	205a      	movs	r0, #90	@ 0x5a
 80032fe:	f7ff ff7b 	bl	80031f8 <turn>
    		backCalibration(0);
 8003302:	2000      	movs	r0, #0
 8003304:	f001 fdc2 	bl	8004e8c <backCalibration>
    		MOVE_FORWARD(); updateCurr();
 8003308:	2003      	movs	r0, #3
 800330a:	f001 f8d9 	bl	80044c0 <remi>
 800330e:	f7ff fecb 	bl	80030a8 <updateCurr>
    	if (WALL_LEFT()) {
 8003312:	e046      	b.n	80033a2 <proceed+0x122>
    	}
    	else {
    		turn( 90);
 8003314:	205a      	movs	r0, #90	@ 0x5a
 8003316:	f7ff ff6f 	bl	80031f8 <turn>
    		MOVE_FORWARD(); updateCurr();
 800331a:	2003      	movs	r0, #3
 800331c:	f001 f8d0 	bl	80044c0 <remi>
 8003320:	f7ff fec2 	bl	80030a8 <updateCurr>
    	if (WALL_LEFT()) {
 8003324:	e03d      	b.n	80033a2 <proceed+0x122>
    	}
    }
    else if ((checkNext(West)  <= FLOOD_MAP[currX][currY]) && (!WALL_LEFT())) {
 8003326:	2004      	movs	r0, #4
 8003328:	f7ff fef2 	bl	8003110 <checkNext>
 800332c:	4601      	mov	r1, r0
 800332e:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <proceed+0x128>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <proceed+0x12c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	481e      	ldr	r0, [pc, #120]	@ (80033b0 <proceed+0x130>)
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	4413      	add	r3, r2
 800333c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003340:	4299      	cmp	r1, r3
 8003342:	dc22      	bgt.n	800338a <proceed+0x10a>
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <proceed+0x134>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d11c      	bne.n	800338a <proceed+0x10a>
    	if (WALL_RIGHT()) {
 8003350:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <proceed+0x134>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <proceed+0xf6>
    		turn(-90);
 800335c:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 8003360:	f7ff ff4a 	bl	80031f8 <turn>
    		backCalibration(0);
 8003364:	2000      	movs	r0, #0
 8003366:	f001 fd91 	bl	8004e8c <backCalibration>
    		MOVE_FORWARD(); updateCurr();
 800336a:	2003      	movs	r0, #3
 800336c:	f001 f8a8 	bl	80044c0 <remi>
 8003370:	f7ff fe9a 	bl	80030a8 <updateCurr>
    	if (WALL_RIGHT()) {
 8003374:	e015      	b.n	80033a2 <proceed+0x122>
    	}
    	else {
    		turn(-90);
 8003376:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 800337a:	f7ff ff3d 	bl	80031f8 <turn>
    		MOVE_FORWARD(); updateCurr();
 800337e:	2003      	movs	r0, #3
 8003380:	f001 f89e 	bl	80044c0 <remi>
 8003384:	f7ff fe90 	bl	80030a8 <updateCurr>
    	if (WALL_RIGHT()) {
 8003388:	e00b      	b.n	80033a2 <proceed+0x122>
    	}
    }
    else {
    	turn(180);
 800338a:	20b4      	movs	r0, #180	@ 0xb4
 800338c:	f7ff ff34 	bl	80031f8 <turn>
    	backCalibration(0);
 8003390:	2000      	movs	r0, #0
 8003392:	f001 fd7b 	bl	8004e8c <backCalibration>
        MOVE_FORWARD(); updateCurr();
 8003396:	2003      	movs	r0, #3
 8003398:	f001 f892 	bl	80044c0 <remi>
 800339c:	f7ff fe84 	bl	80030a8 <updateCurr>
    }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000b50 	.word	0x20000b50
 80033ac:	20000b54 	.word	0x20000b54
 80033b0:	20000750 	.word	0x20000750
 80033b4:	2000190c 	.word	0x2000190c

080033b8 <logEyes>:

// === SENSOR LOGGING ===
void logEyes() {
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
    if (WALL_FRONT()) {
 80033bc:	4b94      	ldr	r3, [pc, #592]	@ (8003610 <logEyes+0x258>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <logEyes+0x1e>
 80033c8:	4b91      	ldr	r3, [pc, #580]	@ (8003610 <logEyes+0x258>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80d5 	beq.w	8003580 <logEyes+0x1c8>
        switch (orient) {
 80033d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003614 <logEyes+0x25c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	2b03      	cmp	r3, #3
 80033de:	f200 80cf 	bhi.w	8003580 <logEyes+0x1c8>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <logEyes+0x30>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003459 	.word	0x08003459
 80033f0:	080034b7 	.word	0x080034b7
 80033f4:	08003515 	.word	0x08003515
        case North: MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 80033f8:	4b87      	ldr	r3, [pc, #540]	@ (8003618 <logEyes+0x260>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b87      	ldr	r3, [pc, #540]	@ (800361c <logEyes+0x264>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4987      	ldr	r1, [pc, #540]	@ (8003620 <logEyes+0x268>)
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	4413      	add	r3, r2
 8003406:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800340a:	4b83      	ldr	r3, [pc, #524]	@ (8003618 <logEyes+0x260>)
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	4b83      	ldr	r3, [pc, #524]	@ (800361c <logEyes+0x264>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	4882      	ldr	r0, [pc, #520]	@ (8003620 <logEyes+0x268>)
 8003418:	0109      	lsls	r1, r1, #4
 800341a:	440b      	add	r3, r1
 800341c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003420:	4b7e      	ldr	r3, [pc, #504]	@ (800361c <logEyes+0x264>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b0e      	cmp	r3, #14
 8003426:	f300 80a4 	bgt.w	8003572 <logEyes+0x1ba>
 800342a:	4b7b      	ldr	r3, [pc, #492]	@ (8003618 <logEyes+0x260>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b7b      	ldr	r3, [pc, #492]	@ (800361c <logEyes+0x264>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	497a      	ldr	r1, [pc, #488]	@ (8003620 <logEyes+0x268>)
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	4413      	add	r3, r2
 800343a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800343e:	4b76      	ldr	r3, [pc, #472]	@ (8003618 <logEyes+0x260>)
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	4b76      	ldr	r3, [pc, #472]	@ (800361c <logEyes+0x264>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	f042 0204 	orr.w	r2, r2, #4
 800344c:	4874      	ldr	r0, [pc, #464]	@ (8003620 <logEyes+0x268>)
 800344e:	0109      	lsls	r1, r1, #4
 8003450:	440b      	add	r3, r1
 8003452:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003456:	e08c      	b.n	8003572 <logEyes+0x1ba>
        case East:  MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 8003458:	4b6f      	ldr	r3, [pc, #444]	@ (8003618 <logEyes+0x260>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <logEyes+0x264>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	496f      	ldr	r1, [pc, #444]	@ (8003620 <logEyes+0x268>)
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	4413      	add	r3, r2
 8003466:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800346a:	4b6b      	ldr	r3, [pc, #428]	@ (8003618 <logEyes+0x260>)
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	4b6b      	ldr	r3, [pc, #428]	@ (800361c <logEyes+0x264>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	486a      	ldr	r0, [pc, #424]	@ (8003620 <logEyes+0x268>)
 8003478:	0109      	lsls	r1, r1, #4
 800347a:	440b      	add	r3, r1
 800347c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003480:	4b65      	ldr	r3, [pc, #404]	@ (8003618 <logEyes+0x260>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b0e      	cmp	r3, #14
 8003486:	dc76      	bgt.n	8003576 <logEyes+0x1be>
 8003488:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <logEyes+0x260>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	4b63      	ldr	r3, [pc, #396]	@ (800361c <logEyes+0x264>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4963      	ldr	r1, [pc, #396]	@ (8003620 <logEyes+0x268>)
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	4413      	add	r3, r2
 8003498:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <logEyes+0x260>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1c59      	adds	r1, r3, #1
 80034a2:	4b5e      	ldr	r3, [pc, #376]	@ (800361c <logEyes+0x264>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	485d      	ldr	r0, [pc, #372]	@ (8003620 <logEyes+0x268>)
 80034ac:	0109      	lsls	r1, r1, #4
 80034ae:	440b      	add	r3, r1
 80034b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80034b4:	e05f      	b.n	8003576 <logEyes+0x1be>
        case South: MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 80034b6:	4b58      	ldr	r3, [pc, #352]	@ (8003618 <logEyes+0x260>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b58      	ldr	r3, [pc, #352]	@ (800361c <logEyes+0x264>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4958      	ldr	r1, [pc, #352]	@ (8003620 <logEyes+0x268>)
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80034c8:	4b53      	ldr	r3, [pc, #332]	@ (8003618 <logEyes+0x260>)
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	4b53      	ldr	r3, [pc, #332]	@ (800361c <logEyes+0x264>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0204 	orr.w	r2, r2, #4
 80034d4:	4852      	ldr	r0, [pc, #328]	@ (8003620 <logEyes+0x268>)
 80034d6:	0109      	lsls	r1, r1, #4
 80034d8:	440b      	add	r3, r1
 80034da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80034de:	4b4f      	ldr	r3, [pc, #316]	@ (800361c <logEyes+0x264>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dd49      	ble.n	800357a <logEyes+0x1c2>
 80034e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003618 <logEyes+0x260>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b4c      	ldr	r3, [pc, #304]	@ (800361c <logEyes+0x264>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	494b      	ldr	r1, [pc, #300]	@ (8003620 <logEyes+0x268>)
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	4413      	add	r3, r2
 80034f6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80034fa:	4b47      	ldr	r3, [pc, #284]	@ (8003618 <logEyes+0x260>)
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	4b47      	ldr	r3, [pc, #284]	@ (800361c <logEyes+0x264>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	4845      	ldr	r0, [pc, #276]	@ (8003620 <logEyes+0x268>)
 800350a:	0109      	lsls	r1, r1, #4
 800350c:	440b      	add	r3, r1
 800350e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003512:	e032      	b.n	800357a <logEyes+0x1c2>
        case West:  MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 8003514:	4b40      	ldr	r3, [pc, #256]	@ (8003618 <logEyes+0x260>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b40      	ldr	r3, [pc, #256]	@ (800361c <logEyes+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4940      	ldr	r1, [pc, #256]	@ (8003620 <logEyes+0x268>)
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4413      	add	r3, r2
 8003522:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003526:	4b3c      	ldr	r3, [pc, #240]	@ (8003618 <logEyes+0x260>)
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <logEyes+0x264>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0208 	orr.w	r2, r2, #8
 8003532:	483b      	ldr	r0, [pc, #236]	@ (8003620 <logEyes+0x268>)
 8003534:	0109      	lsls	r1, r1, #4
 8003536:	440b      	add	r3, r1
 8003538:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <logEyes+0x260>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	dd1c      	ble.n	800357e <logEyes+0x1c6>
 8003544:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <logEyes+0x260>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	4b34      	ldr	r3, [pc, #208]	@ (800361c <logEyes+0x264>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4934      	ldr	r1, [pc, #208]	@ (8003620 <logEyes+0x268>)
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	4413      	add	r3, r2
 8003554:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003558:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <logEyes+0x260>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	1e59      	subs	r1, r3, #1
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <logEyes+0x264>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0202 	orr.w	r2, r2, #2
 8003566:	482e      	ldr	r0, [pc, #184]	@ (8003620 <logEyes+0x268>)
 8003568:	0109      	lsls	r1, r1, #4
 800356a:	440b      	add	r3, r1
 800356c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003570:	e005      	b.n	800357e <logEyes+0x1c6>
        case North: MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <logEyes+0x1c8>
        case East:  MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <logEyes+0x1c8>
        case South: MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <logEyes+0x1c8>
        case West:  MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 800357e:	bf00      	nop
        }
    }
    if (WALL_RIGHT()) {
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <logEyes+0x258>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80df 	beq.w	800374c <logEyes+0x394>
        switch (orient) {
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <logEyes+0x25c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	2b03      	cmp	r3, #3
 8003596:	f200 80d9 	bhi.w	800374c <logEyes+0x394>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <logEyes+0x1e8>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	08003625 	.word	0x08003625
 80035a8:	08003683 	.word	0x08003683
 80035ac:	080036e1 	.word	0x080036e1
        case North: MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <logEyes+0x260>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <logEyes+0x264>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4919      	ldr	r1, [pc, #100]	@ (8003620 <logEyes+0x268>)
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <logEyes+0x260>)
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <logEyes+0x264>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0202 	orr.w	r2, r2, #2
 80035ce:	4814      	ldr	r0, [pc, #80]	@ (8003620 <logEyes+0x268>)
 80035d0:	0109      	lsls	r1, r1, #4
 80035d2:	440b      	add	r3, r1
 80035d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <logEyes+0x260>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b0e      	cmp	r3, #14
 80035de:	f300 80ae 	bgt.w	800373e <logEyes+0x386>
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <logEyes+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <logEyes+0x264>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	490c      	ldr	r1, [pc, #48]	@ (8003620 <logEyes+0x268>)
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80035f6:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <logEyes+0x260>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	4b07      	ldr	r3, [pc, #28]	@ (800361c <logEyes+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	4806      	ldr	r0, [pc, #24]	@ (8003620 <logEyes+0x268>)
 8003606:	0109      	lsls	r1, r1, #4
 8003608:	440b      	add	r3, r1
 800360a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800360e:	e096      	b.n	800373e <logEyes+0x386>
 8003610:	2000190c 	.word	0x2000190c
 8003614:	20000400 	.word	0x20000400
 8003618:	20000b50 	.word	0x20000b50
 800361c:	20000b54 	.word	0x20000b54
 8003620:	20000000 	.word	0x20000000
        case East:  MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 8003624:	4b9d      	ldr	r3, [pc, #628]	@ (800389c <logEyes+0x4e4>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b9d      	ldr	r3, [pc, #628]	@ (80038a0 <logEyes+0x4e8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	499d      	ldr	r1, [pc, #628]	@ (80038a4 <logEyes+0x4ec>)
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	4413      	add	r3, r2
 8003632:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003636:	4b99      	ldr	r3, [pc, #612]	@ (800389c <logEyes+0x4e4>)
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	4b99      	ldr	r3, [pc, #612]	@ (80038a0 <logEyes+0x4e8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0204 	orr.w	r2, r2, #4
 8003642:	4898      	ldr	r0, [pc, #608]	@ (80038a4 <logEyes+0x4ec>)
 8003644:	0109      	lsls	r1, r1, #4
 8003646:	440b      	add	r3, r1
 8003648:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800364c:	4b94      	ldr	r3, [pc, #592]	@ (80038a0 <logEyes+0x4e8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	dd76      	ble.n	8003742 <logEyes+0x38a>
 8003654:	4b91      	ldr	r3, [pc, #580]	@ (800389c <logEyes+0x4e4>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b91      	ldr	r3, [pc, #580]	@ (80038a0 <logEyes+0x4e8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3b01      	subs	r3, #1
 800365e:	4991      	ldr	r1, [pc, #580]	@ (80038a4 <logEyes+0x4ec>)
 8003660:	0112      	lsls	r2, r2, #4
 8003662:	4413      	add	r3, r2
 8003664:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003668:	4b8c      	ldr	r3, [pc, #560]	@ (800389c <logEyes+0x4e4>)
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	4b8c      	ldr	r3, [pc, #560]	@ (80038a0 <logEyes+0x4e8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	488b      	ldr	r0, [pc, #556]	@ (80038a4 <logEyes+0x4ec>)
 8003678:	0109      	lsls	r1, r1, #4
 800367a:	440b      	add	r3, r1
 800367c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003680:	e05f      	b.n	8003742 <logEyes+0x38a>
        case South: MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 8003682:	4b86      	ldr	r3, [pc, #536]	@ (800389c <logEyes+0x4e4>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b86      	ldr	r3, [pc, #536]	@ (80038a0 <logEyes+0x4e8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4986      	ldr	r1, [pc, #536]	@ (80038a4 <logEyes+0x4ec>)
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	4413      	add	r3, r2
 8003690:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003694:	4b81      	ldr	r3, [pc, #516]	@ (800389c <logEyes+0x4e4>)
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <logEyes+0x4e8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0208 	orr.w	r2, r2, #8
 80036a0:	4880      	ldr	r0, [pc, #512]	@ (80038a4 <logEyes+0x4ec>)
 80036a2:	0109      	lsls	r1, r1, #4
 80036a4:	440b      	add	r3, r1
 80036a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80036aa:	4b7c      	ldr	r3, [pc, #496]	@ (800389c <logEyes+0x4e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dd49      	ble.n	8003746 <logEyes+0x38e>
 80036b2:	4b7a      	ldr	r3, [pc, #488]	@ (800389c <logEyes+0x4e4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1e5a      	subs	r2, r3, #1
 80036b8:	4b79      	ldr	r3, [pc, #484]	@ (80038a0 <logEyes+0x4e8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4979      	ldr	r1, [pc, #484]	@ (80038a4 <logEyes+0x4ec>)
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80036c6:	4b75      	ldr	r3, [pc, #468]	@ (800389c <logEyes+0x4e4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1e59      	subs	r1, r3, #1
 80036cc:	4b74      	ldr	r3, [pc, #464]	@ (80038a0 <logEyes+0x4e8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0202 	orr.w	r2, r2, #2
 80036d4:	4873      	ldr	r0, [pc, #460]	@ (80038a4 <logEyes+0x4ec>)
 80036d6:	0109      	lsls	r1, r1, #4
 80036d8:	440b      	add	r3, r1
 80036da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80036de:	e032      	b.n	8003746 <logEyes+0x38e>
        case West:  MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 80036e0:	4b6e      	ldr	r3, [pc, #440]	@ (800389c <logEyes+0x4e4>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b6e      	ldr	r3, [pc, #440]	@ (80038a0 <logEyes+0x4e8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	496e      	ldr	r1, [pc, #440]	@ (80038a4 <logEyes+0x4ec>)
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	4413      	add	r3, r2
 80036ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80036f2:	4b6a      	ldr	r3, [pc, #424]	@ (800389c <logEyes+0x4e4>)
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	4b6a      	ldr	r3, [pc, #424]	@ (80038a0 <logEyes+0x4e8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	4869      	ldr	r0, [pc, #420]	@ (80038a4 <logEyes+0x4ec>)
 8003700:	0109      	lsls	r1, r1, #4
 8003702:	440b      	add	r3, r1
 8003704:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003708:	4b65      	ldr	r3, [pc, #404]	@ (80038a0 <logEyes+0x4e8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b0e      	cmp	r3, #14
 800370e:	dc1c      	bgt.n	800374a <logEyes+0x392>
 8003710:	4b62      	ldr	r3, [pc, #392]	@ (800389c <logEyes+0x4e4>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b62      	ldr	r3, [pc, #392]	@ (80038a0 <logEyes+0x4e8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	4962      	ldr	r1, [pc, #392]	@ (80038a4 <logEyes+0x4ec>)
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	4413      	add	r3, r2
 8003720:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003724:	4b5d      	ldr	r3, [pc, #372]	@ (800389c <logEyes+0x4e4>)
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <logEyes+0x4e8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	f042 0204 	orr.w	r2, r2, #4
 8003732:	485c      	ldr	r0, [pc, #368]	@ (80038a4 <logEyes+0x4ec>)
 8003734:	0109      	lsls	r1, r1, #4
 8003736:	440b      	add	r3, r1
 8003738:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800373c:	e005      	b.n	800374a <logEyes+0x392>
        case North: MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 800373e:	bf00      	nop
 8003740:	e004      	b.n	800374c <logEyes+0x394>
        case East:  MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <logEyes+0x394>
        case South: MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <logEyes+0x394>
        case West:  MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 800374a:	bf00      	nop
        }
    }
    if (WALL_LEFT()) {
 800374c:	4b56      	ldr	r3, [pc, #344]	@ (80038a8 <logEyes+0x4f0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80e1 	beq.w	800391c <logEyes+0x564>
        switch (orient) {
 800375a:	4b54      	ldr	r3, [pc, #336]	@ (80038ac <logEyes+0x4f4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	2b03      	cmp	r3, #3
 8003762:	f200 80db 	bhi.w	800391c <logEyes+0x564>
 8003766:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <logEyes+0x3b4>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	0800377d 	.word	0x0800377d
 8003770:	080037dd 	.word	0x080037dd
 8003774:	0800383d 	.word	0x0800383d
 8003778:	080038b1 	.word	0x080038b1
        case North: MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 800377c:	4b47      	ldr	r3, [pc, #284]	@ (800389c <logEyes+0x4e4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <logEyes+0x4e8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4947      	ldr	r1, [pc, #284]	@ (80038a4 <logEyes+0x4ec>)
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	4413      	add	r3, r2
 800378a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800378e:	4b43      	ldr	r3, [pc, #268]	@ (800389c <logEyes+0x4e4>)
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <logEyes+0x4e8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	4842      	ldr	r0, [pc, #264]	@ (80038a4 <logEyes+0x4ec>)
 800379c:	0109      	lsls	r1, r1, #4
 800379e:	440b      	add	r3, r1
 80037a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80037a4:	4b3d      	ldr	r3, [pc, #244]	@ (800389c <logEyes+0x4e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f340 80b0 	ble.w	800390e <logEyes+0x556>
 80037ae:	4b3b      	ldr	r3, [pc, #236]	@ (800389c <logEyes+0x4e4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	4b3a      	ldr	r3, [pc, #232]	@ (80038a0 <logEyes+0x4e8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	493a      	ldr	r1, [pc, #232]	@ (80038a4 <logEyes+0x4ec>)
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	4413      	add	r3, r2
 80037be:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80037c2:	4b36      	ldr	r3, [pc, #216]	@ (800389c <logEyes+0x4e4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1e59      	subs	r1, r3, #1
 80037c8:	4b35      	ldr	r3, [pc, #212]	@ (80038a0 <logEyes+0x4e8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0202 	orr.w	r2, r2, #2
 80037d0:	4834      	ldr	r0, [pc, #208]	@ (80038a4 <logEyes+0x4ec>)
 80037d2:	0109      	lsls	r1, r1, #4
 80037d4:	440b      	add	r3, r1
 80037d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80037da:	e098      	b.n	800390e <logEyes+0x556>
        case East:  MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 80037dc:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <logEyes+0x4e4>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <logEyes+0x4e8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	492f      	ldr	r1, [pc, #188]	@ (80038a4 <logEyes+0x4ec>)
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	4413      	add	r3, r2
 80037ea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80037ee:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <logEyes+0x4e4>)
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <logEyes+0x4e8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	482a      	ldr	r0, [pc, #168]	@ (80038a4 <logEyes+0x4ec>)
 80037fc:	0109      	lsls	r1, r1, #4
 80037fe:	440b      	add	r3, r1
 8003800:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003804:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <logEyes+0x4e8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b0e      	cmp	r3, #14
 800380a:	f300 8082 	bgt.w	8003912 <logEyes+0x55a>
 800380e:	4b23      	ldr	r3, [pc, #140]	@ (800389c <logEyes+0x4e4>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b23      	ldr	r3, [pc, #140]	@ (80038a0 <logEyes+0x4e8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4922      	ldr	r1, [pc, #136]	@ (80038a4 <logEyes+0x4ec>)
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	4413      	add	r3, r2
 800381e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <logEyes+0x4e4>)
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <logEyes+0x4e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	f042 0204 	orr.w	r2, r2, #4
 8003830:	481c      	ldr	r0, [pc, #112]	@ (80038a4 <logEyes+0x4ec>)
 8003832:	0109      	lsls	r1, r1, #4
 8003834:	440b      	add	r3, r1
 8003836:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800383a:	e06a      	b.n	8003912 <logEyes+0x55a>
        case South: MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 800383c:	4b17      	ldr	r3, [pc, #92]	@ (800389c <logEyes+0x4e4>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b17      	ldr	r3, [pc, #92]	@ (80038a0 <logEyes+0x4e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4917      	ldr	r1, [pc, #92]	@ (80038a4 <logEyes+0x4ec>)
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	4413      	add	r3, r2
 800384a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <logEyes+0x4e4>)
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <logEyes+0x4e8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0202 	orr.w	r2, r2, #2
 800385a:	4812      	ldr	r0, [pc, #72]	@ (80038a4 <logEyes+0x4ec>)
 800385c:	0109      	lsls	r1, r1, #4
 800385e:	440b      	add	r3, r1
 8003860:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003864:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <logEyes+0x4e4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b0e      	cmp	r3, #14
 800386a:	dc54      	bgt.n	8003916 <logEyes+0x55e>
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <logEyes+0x4e4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <logEyes+0x4e8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	490b      	ldr	r1, [pc, #44]	@ (80038a4 <logEyes+0x4ec>)
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	4413      	add	r3, r2
 800387c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <logEyes+0x4e4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1c59      	adds	r1, r3, #1
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <logEyes+0x4e8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0208 	orr.w	r2, r2, #8
 800388e:	4805      	ldr	r0, [pc, #20]	@ (80038a4 <logEyes+0x4ec>)
 8003890:	0109      	lsls	r1, r1, #4
 8003892:	440b      	add	r3, r1
 8003894:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003898:	e03d      	b.n	8003916 <logEyes+0x55e>
 800389a:	bf00      	nop
 800389c:	20000b50 	.word	0x20000b50
 80038a0:	20000b54 	.word	0x20000b54
 80038a4:	20000000 	.word	0x20000000
 80038a8:	2000190c 	.word	0x2000190c
 80038ac:	20000400 	.word	0x20000400
        case West:  MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 80038b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003924 <logEyes+0x56c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <logEyes+0x570>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	491c      	ldr	r1, [pc, #112]	@ (800392c <logEyes+0x574>)
 80038ba:	0112      	lsls	r2, r2, #4
 80038bc:	4413      	add	r3, r2
 80038be:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <logEyes+0x56c>)
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	4b18      	ldr	r3, [pc, #96]	@ (8003928 <logEyes+0x570>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0204 	orr.w	r2, r2, #4
 80038ce:	4817      	ldr	r0, [pc, #92]	@ (800392c <logEyes+0x574>)
 80038d0:	0109      	lsls	r1, r1, #4
 80038d2:	440b      	add	r3, r1
 80038d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80038d8:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <logEyes+0x570>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	dd1c      	ble.n	800391a <logEyes+0x562>
 80038e0:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <logEyes+0x56c>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <logEyes+0x570>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	4910      	ldr	r1, [pc, #64]	@ (800392c <logEyes+0x574>)
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <logEyes+0x56c>)
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <logEyes+0x570>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	480a      	ldr	r0, [pc, #40]	@ (800392c <logEyes+0x574>)
 8003904:	0109      	lsls	r1, r1, #4
 8003906:	440b      	add	r3, r1
 8003908:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800390c:	e005      	b.n	800391a <logEyes+0x562>
        case North: MAZE_MAP[currX][currY] |= (1<<3); if (currX>0)  MAZE_MAP[currX-1][currY] |= (1<<1); break;
 800390e:	bf00      	nop
 8003910:	e004      	b.n	800391c <logEyes+0x564>
        case East:  MAZE_MAP[currX][currY] |= (1<<0); if (currY<15) MAZE_MAP[currX][currY+1] |= (1<<2); break;
 8003912:	bf00      	nop
 8003914:	e002      	b.n	800391c <logEyes+0x564>
        case South: MAZE_MAP[currX][currY] |= (1<<1); if (currX<15) MAZE_MAP[currX+1][currY] |= (1<<3); break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <logEyes+0x564>
        case West:  MAZE_MAP[currX][currY] |= (1<<2); if (currY>0)  MAZE_MAP[currX][currY-1] |= (1<<0); break;
 800391a:	bf00      	nop
        }
    }
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	20000b50 	.word	0x20000b50
 8003928:	20000b54 	.word	0x20000b54
 800392c:	20000000 	.word	0x20000000

08003930 <queueInit>:
    }
    uart_send("MAP_END\n");
}


void queueInit() {
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
    front = rear = 0;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <queueInit+0x24>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <queueInit+0x24>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a06      	ldr	r2, [pc, #24]	@ (8003958 <queueInit+0x28>)
 8003940:	6013      	str	r3, [r2, #0]
    memset(visited, 0, sizeof(visited));
 8003942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003946:	2100      	movs	r1, #0
 8003948:	4804      	ldr	r0, [pc, #16]	@ (800395c <queueInit+0x2c>)
 800394a:	f004 f8e3 	bl	8007b14 <memset>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20001364 	.word	0x20001364
 8003958:	20001360 	.word	0x20001360
 800395c:	20001368 	.word	0x20001368

08003960 <enqueue>:

void enqueue(int x, int y) {
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
    queue[rear].x = x;
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <enqueue+0x44>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <enqueue+0x48>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    queue[rear].y = y;
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <enqueue+0x44>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0b      	ldr	r2, [pc, #44]	@ (80039a8 <enqueue+0x48>)
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	605a      	str	r2, [r3, #4]
    rear = (rear + 1) % MAX_SIZE;
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <enqueue+0x44>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	425a      	negs	r2, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	bf58      	it	pl
 8003992:	4253      	negpl	r3, r2
 8003994:	4a03      	ldr	r2, [pc, #12]	@ (80039a4 <enqueue+0x44>)
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20001364 	.word	0x20001364
 80039a8:	20000b60 	.word	0x20000b60

080039ac <dequeue>:
Point dequeue() {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
    Point p = queue[front];
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <dequeue+0x4c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4910      	ldr	r1, [pc, #64]	@ (80039fc <dequeue+0x50>)
 80039ba:	f107 0208 	add.w	r2, r7, #8
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039c6:	e882 0003 	stmia.w	r2, {r0, r1}
    front = (front + 1) % MAX_SIZE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <dequeue+0x4c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	425a      	negs	r2, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	bf58      	it	pl
 80039d8:	4253      	negpl	r3, r2
 80039da:	4a07      	ldr	r2, [pc, #28]	@ (80039f8 <dequeue+0x4c>)
 80039dc:	6013      	str	r3, [r2, #0]
    return p;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	461a      	mov	r2, r3
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20001360 	.word	0x20001360
 80039fc:	20000b60 	.word	0x20000b60

08003a00 <isEmpty>:
int isEmpty() { return (front == rear); }
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <isEmpty+0x20>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <isEmpty+0x24>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20001360 	.word	0x20001360
 8003a24:	20001364 	.word	0x20001364

08003a28 <floodfill>:

void floodfill(int returnHome) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    logEyes();
 8003a30:	f7ff fcc2 	bl	80033b8 <logEyes>
    //sendMazeMap();

    fillMap(returnHome);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff faf7 	bl	8003028 <fillMap>
    queueInit();
 8003a3a:	f7ff ff79 	bl	8003930 <queueInit>

    if (!returnHome) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d126      	bne.n	8003a92 <floodfill+0x6a>
        enqueue(7,8); enqueue(8,7); enqueue(7,7); enqueue(8,8);
 8003a44:	2108      	movs	r1, #8
 8003a46:	2007      	movs	r0, #7
 8003a48:	f7ff ff8a 	bl	8003960 <enqueue>
 8003a4c:	2107      	movs	r1, #7
 8003a4e:	2008      	movs	r0, #8
 8003a50:	f7ff ff86 	bl	8003960 <enqueue>
 8003a54:	2107      	movs	r1, #7
 8003a56:	2007      	movs	r0, #7
 8003a58:	f7ff ff82 	bl	8003960 <enqueue>
 8003a5c:	2108      	movs	r1, #8
 8003a5e:	2008      	movs	r0, #8
 8003a60:	f7ff ff7e 	bl	8003960 <enqueue>
        visited[7][8] = visited[8][7] = visited[7][7] = visited[8][8] = 1;
 8003a64:	4b97      	ldr	r3, [pc, #604]	@ (8003cc4 <floodfill+0x29c>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
 8003a6c:	4b95      	ldr	r3, [pc, #596]	@ (8003cc4 <floodfill+0x29c>)
 8003a6e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003a72:	4a94      	ldr	r2, [pc, #592]	@ (8003cc4 <floodfill+0x29c>)
 8003a74:	f8c2 31dc 	str.w	r3, [r2, #476]	@ 0x1dc
 8003a78:	4b92      	ldr	r3, [pc, #584]	@ (8003cc4 <floodfill+0x29c>)
 8003a7a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8003a7e:	4a91      	ldr	r2, [pc, #580]	@ (8003cc4 <floodfill+0x29c>)
 8003a80:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 8003a84:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc4 <floodfill+0x29c>)
 8003a86:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003a8a:	4a8e      	ldr	r2, [pc, #568]	@ (8003cc4 <floodfill+0x29c>)
 8003a8c:	f8c2 31e0 	str.w	r3, [r2, #480]	@ 0x1e0
 8003a90:	e10c      	b.n	8003cac <floodfill+0x284>
    } else {
        enqueue(0,0);
 8003a92:	2100      	movs	r1, #0
 8003a94:	2000      	movs	r0, #0
 8003a96:	f7ff ff63 	bl	8003960 <enqueue>
        visited[0][0] = 1;
 8003a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc4 <floodfill+0x29c>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    }

    while (!isEmpty()) {
 8003aa0:	e104      	b.n	8003cac <floodfill+0x284>
        Point cur = dequeue();
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff80 	bl	80039ac <dequeue>
        int x = cur.x, y = cur.y, val = FLOOD_MAP[x][y];
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	4984      	ldr	r1, [pc, #528]	@ (8003cc8 <floodfill+0x2a0>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	011a      	lsls	r2, r3, #4
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	4413      	add	r3, r2
 8003abe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ac2:	617b      	str	r3, [r7, #20]

        if (y<15 && !(MAZE_MAP[x][y] & (1<<0)) && FLOOD_MAP[x][y+1] > val+1) { FLOOD_MAP[x][y+1]=val+1; if(!visited[x][y+1]){enqueue(x,y+1); visited[x][y+1]=1;} }
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0e      	cmp	r3, #14
 8003ac8:	dc39      	bgt.n	8003b3e <floodfill+0x116>
 8003aca:	4980      	ldr	r1, [pc, #512]	@ (8003ccc <floodfill+0x2a4>)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	011a      	lsls	r2, r3, #4
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d12e      	bne.n	8003b3e <floodfill+0x116>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4978      	ldr	r1, [pc, #480]	@ (8003cc8 <floodfill+0x2a0>)
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3301      	adds	r3, #1
 8003af4:	429a      	cmp	r2, r3
 8003af6:	dd22      	ble.n	8003b3e <floodfill+0x116>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	3301      	adds	r3, #1
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	3201      	adds	r2, #1
 8003b00:	4871      	ldr	r0, [pc, #452]	@ (8003cc8 <floodfill+0x2a0>)
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	0109      	lsls	r1, r1, #4
 8003b06:	440b      	add	r3, r1
 8003b08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	496c      	ldr	r1, [pc, #432]	@ (8003cc4 <floodfill+0x29c>)
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	4413      	add	r3, r2
 8003b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10e      	bne.n	8003b3e <floodfill+0x116>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4619      	mov	r1, r3
 8003b26:	69f8      	ldr	r0, [r7, #28]
 8003b28:	f7ff ff1a 	bl	8003960 <enqueue>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	4964      	ldr	r1, [pc, #400]	@ (8003cc4 <floodfill+0x29c>)
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	4413      	add	r3, r2
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (x<15 && !(MAZE_MAP[x][y] & (1<<1)) && FLOOD_MAP[x+1][y] > val+1) { FLOOD_MAP[x+1][y]=val+1; if(!visited[x+1][y]){enqueue(x+1,y); visited[x+1][y]=1;} }
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b0e      	cmp	r3, #14
 8003b42:	dc39      	bgt.n	8003bb8 <floodfill+0x190>
 8003b44:	4961      	ldr	r1, [pc, #388]	@ (8003ccc <floodfill+0x2a4>)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12e      	bne.n	8003bb8 <floodfill+0x190>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	495a      	ldr	r1, [pc, #360]	@ (8003cc8 <floodfill+0x2a0>)
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dd22      	ble.n	8003bb8 <floodfill+0x190>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3301      	adds	r3, #1
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	3201      	adds	r2, #1
 8003b7a:	4853      	ldr	r0, [pc, #332]	@ (8003cc8 <floodfill+0x2a0>)
 8003b7c:	0119      	lsls	r1, r3, #4
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	440b      	add	r3, r1
 8003b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	494e      	ldr	r1, [pc, #312]	@ (8003cc4 <floodfill+0x29c>)
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <floodfill+0x190>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fedd 	bl	8003960 <enqueue>
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4946      	ldr	r1, [pc, #280]	@ (8003cc4 <floodfill+0x29c>)
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (y>0  && !(MAZE_MAP[x][y] & (1<<2)) && FLOOD_MAP[x][y-1] > val+1) { FLOOD_MAP[x][y-1]=val+1; if(!visited[x][y-1]){enqueue(x,y-1); visited[x][y-1]=1;} }
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	dd39      	ble.n	8003c32 <floodfill+0x20a>
 8003bbe:	4943      	ldr	r1, [pc, #268]	@ (8003ccc <floodfill+0x2a4>)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	011a      	lsls	r2, r3, #4
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d12e      	bne.n	8003c32 <floodfill+0x20a>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	493b      	ldr	r1, [pc, #236]	@ (8003cc8 <floodfill+0x2a0>)
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	4413      	add	r3, r2
 8003be0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dd22      	ble.n	8003c32 <floodfill+0x20a>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	4834      	ldr	r0, [pc, #208]	@ (8003cc8 <floodfill+0x2a0>)
 8003bf6:	69f9      	ldr	r1, [r7, #28]
 8003bf8:	0109      	lsls	r1, r1, #4
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	492f      	ldr	r1, [pc, #188]	@ (8003cc4 <floodfill+0x29c>)
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10e      	bne.n	8003c32 <floodfill+0x20a>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	69f8      	ldr	r0, [r7, #28]
 8003c1c:	f7ff fea0 	bl	8003960 <enqueue>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	4927      	ldr	r1, [pc, #156]	@ (8003cc4 <floodfill+0x29c>)
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (x>0  && !(MAZE_MAP[x][y] & (1<<3)) && FLOOD_MAP[x-1][y] > val+1) { FLOOD_MAP[x-1][y]=val+1; if(!visited[x-1][y]){enqueue(x-1,y); visited[x-1][y]=1;} }
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	dd39      	ble.n	8003cac <floodfill+0x284>
 8003c38:	4924      	ldr	r1, [pc, #144]	@ (8003ccc <floodfill+0x2a4>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	011a      	lsls	r2, r3, #4
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	4413      	add	r3, r2
 8003c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d12e      	bne.n	8003cac <floodfill+0x284>
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	491d      	ldr	r1, [pc, #116]	@ (8003cc8 <floodfill+0x2a0>)
 8003c54:	011a      	lsls	r2, r3, #4
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	429a      	cmp	r2, r3
 8003c64:	dd22      	ble.n	8003cac <floodfill+0x284>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	3201      	adds	r2, #1
 8003c6e:	4816      	ldr	r0, [pc, #88]	@ (8003cc8 <floodfill+0x2a0>)
 8003c70:	0119      	lsls	r1, r3, #4
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	440b      	add	r3, r1
 8003c76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	4911      	ldr	r1, [pc, #68]	@ (8003cc4 <floodfill+0x29c>)
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4413      	add	r3, r2
 8003c86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <floodfill+0x284>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fe63 	bl	8003960 <enqueue>
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	4909      	ldr	r1, [pc, #36]	@ (8003cc4 <floodfill+0x29c>)
 8003ca0:	011a      	lsls	r2, r3, #4
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    while (!isEmpty()) {
 8003cac:	f7ff fea8 	bl	8003a00 <isEmpty>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f43f aef5 	beq.w	8003aa2 <floodfill+0x7a>
    }

    proceed();
 8003cb8:	f7ff fae2 	bl	8003280 <proceed>
}
 8003cbc:	bf00      	nop
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20001368 	.word	0x20001368
 8003cc8:	20000750 	.word	0x20000750
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <core_setup>:
/* ========================================================================================================================
 * === SETUP HARDWARE FUNCTIONS ===
 * - Fills Motor, Encoder, and MPU6050 structs
 * - Calls respective hardware setup functions
 * ======================================================================================================================== */
void core_setup() {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	core_setupMotors();
 8003cd4:	f000 f810 	bl	8003cf8 <core_setupMotors>
	core_setupEncoders(CHANGE);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f000 f859 	bl	8003d90 <core_setupEncoders>
	core_setupMPU6050();
 8003cde:	f000 f8f5 	bl	8003ecc <core_setupMPU6050>
	core_setupInfraredSensors();
 8003ce2:	f000 f911 	bl	8003f08 <core_setupInfraredSensors>
	core_setupExtras(2000);
 8003ce6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003cea:	f000 f94d 	bl	8003f88 <core_setupExtras>

	resetCore();
 8003cee:	f001 f94b 	bl	8004f88 <resetCore>
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <core_setupMotors>:
void core_setupMotors() {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	// Right Motor Pins
	MR.IN1port = rightMotorIN1Port; MR.IN1pin   = rightMotorIN1Pin;
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <core_setupMotors+0x80>)
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d7c <core_setupMotors+0x84>)
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <core_setupMotors+0x80>)
 8003d04:	220b      	movs	r2, #11
 8003d06:	711a      	strb	r2, [r3, #4]
	MR.IN2port = rightMotorIN2Port; MR.IN2pin   = rightMotorIN2Pin;
 8003d08:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <core_setupMotors+0x80>)
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d7c <core_setupMotors+0x84>)
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d78 <core_setupMotors+0x80>)
 8003d10:	220c      	movs	r2, #12
 8003d12:	731a      	strb	r2, [r3, #12]
	MR.ENport  = rightMotorENPort ; MR.ENpin    = rightMotorENPin ;
 8003d14:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <core_setupMotors+0x80>)
 8003d16:	4a1a      	ldr	r2, [pc, #104]	@ (8003d80 <core_setupMotors+0x88>)
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	4b17      	ldr	r3, [pc, #92]	@ (8003d78 <core_setupMotors+0x80>)
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	751a      	strb	r2, [r3, #20]
    MR.CURR_RPM = 0;
 8003d20:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <core_setupMotors+0x80>)
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]

	// Left Motor Pins
	ML.IN1port = leftMotorIN1Port;  ML.IN1pin   = leftMotorIN1Pin;
 8003d28:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d2a:	4a15      	ldr	r2, [pc, #84]	@ (8003d80 <core_setupMotors+0x88>)
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d30:	220f      	movs	r2, #15
 8003d32:	711a      	strb	r2, [r3, #4]
	ML.IN2port = leftMotorIN2Port;  ML.IN2pin   = leftMotorIN2Pin;
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <core_setupMotors+0x88>)
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d3c:	220e      	movs	r2, #14
 8003d3e:	731a      	strb	r2, [r3, #12]
	ML.ENport  = leftMotorENPort ;  ML.ENpin    = leftMotorENPin ;
 8003d40:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d42:	4a0e      	ldr	r2, [pc, #56]	@ (8003d7c <core_setupMotors+0x84>)
 8003d44:	611a      	str	r2, [r3, #16]
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d48:	2208      	movs	r2, #8
 8003d4a:	751a      	strb	r2, [r3, #20]
	ML.CURR_RPM = 0;
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]

	// Initialize Motors
	motors_setup(&MR, motorFreq);
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <core_setupMotors+0x90>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4807      	ldr	r0, [pc, #28]	@ (8003d78 <core_setupMotors+0x80>)
 8003d5c:	f001 f991 	bl	8005082 <motors_setup>
	motors_setup(&ML, motorFreq);
 8003d60:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <core_setupMotors+0x90>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	4807      	ldr	r0, [pc, #28]	@ (8003d84 <core_setupMotors+0x8c>)
 8003d68:	f001 f98b 	bl	8005082 <motors_setup>

	#ifdef DEBUG_MODE
	uart_send("SETUP MOTORS COMPLETE !!! \n");
 8003d6c:	4807      	ldr	r0, [pc, #28]	@ (8003d8c <core_setupMotors+0x94>)
 8003d6e:	f002 fff3 	bl	8006d58 <uart_send>
	#endif
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20001768 	.word	0x20001768
 8003d7c:	40010800 	.word	0x40010800
 8003d80:	40010c00 	.word	0x40010c00
 8003d84:	20001788 	.word	0x20001788
 8003d88:	20000404 	.word	0x20000404
 8003d8c:	0800a1a4 	.word	0x0800a1a4

08003d90 <core_setupEncoders>:
void core_setupEncoders(EDGESTATE ES) {
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
	// Right Encoder Pins
	ENR.channels[0].port = rightEncoderCH1Port; ENR.channels[0].pin = rightEncoderCH1Pin;
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <core_setupEncoders+0x108>)
 8003d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e9c <core_setupEncoders+0x10c>)
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <core_setupEncoders+0x108>)
 8003da2:	2204      	movs	r2, #4
 8003da4:	711a      	strb	r2, [r3, #4]
	ENR.channels[1].port = rightEncoderCH2Port; ENR.channels[1].pin = rightEncoderCH2Pin;
 8003da6:	4b3c      	ldr	r3, [pc, #240]	@ (8003e98 <core_setupEncoders+0x108>)
 8003da8:	4a3c      	ldr	r2, [pc, #240]	@ (8003e9c <core_setupEncoders+0x10c>)
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	4b3a      	ldr	r3, [pc, #232]	@ (8003e98 <core_setupEncoders+0x108>)
 8003dae:	2205      	movs	r2, #5
 8003db0:	731a      	strb	r2, [r3, #12]
	ENR.numChannels = 2;
 8003db2:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <core_setupEncoders+0x108>)
 8003db4:	2202      	movs	r2, #2
 8003db6:	741a      	strb	r2, [r3, #16]
	ENR.PPR = rightEncoderPPR;
 8003db8:	4b37      	ldr	r3, [pc, #220]	@ (8003e98 <core_setupEncoders+0x108>)
 8003dba:	2207      	movs	r2, #7
 8003dbc:	745a      	strb	r2, [r3, #17]

	// Left Encoder Pins
	ENL.channels[0].port = leftEncoderCH1Port; ENL.channels[0].pin = leftEncoderCH1Pin;
 8003dbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dc0:	4a36      	ldr	r2, [pc, #216]	@ (8003e9c <core_setupEncoders+0x10c>)
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	711a      	strb	r2, [r3, #4]
	ENL.channels[1].port = leftEncoderCH2Port; ENL.channels[1].pin = leftEncoderCH2Pin;
 8003dca:	4b35      	ldr	r3, [pc, #212]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dcc:	4a33      	ldr	r2, [pc, #204]	@ (8003e9c <core_setupEncoders+0x10c>)
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	4b33      	ldr	r3, [pc, #204]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dd2:	220d      	movs	r2, #13
 8003dd4:	731a      	strb	r2, [r3, #12]
	ENL.numChannels = 2;
 8003dd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dd8:	2202      	movs	r2, #2
 8003dda:	741a      	strb	r2, [r3, #16]
	ENL.PPR = leftEncoderPPR;
 8003ddc:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003dde:	2207      	movs	r2, #7
 8003de0:	745a      	strb	r2, [r3, #17]

	// Count Pulses Per 1 Wheel Rotation
	PRRwheel = ALL_GEARS * ENR.PPR * ENR.numChannels; if (ES == CHANGE) PRRwheel *= 2;
 8003de2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <core_setupEncoders+0x108>)
 8003de4:	7c5b      	ldrb	r3, [r3, #17]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc ff78 	bl	8000cdc <__aeabi_i2f>
 8003dec:	4603      	mov	r3, r0
 8003dee:	492d      	ldr	r1, [pc, #180]	@ (8003ea4 <core_setupEncoders+0x114>)
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc ffc7 	bl	8000d84 <__aeabi_fmul>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461c      	mov	r4, r3
 8003dfa:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <core_setupEncoders+0x108>)
 8003dfc:	7c1b      	ldrb	r3, [r3, #16]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc ff6c 	bl	8000cdc <__aeabi_i2f>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4619      	mov	r1, r3
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7fc ffbb 	bl	8000d84 <__aeabi_fmul>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <core_setupEncoders+0x118>)
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d109      	bne.n	8003e30 <core_setupEncoders+0xa0>
 8003e1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <core_setupEncoders+0x118>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fea6 	bl	8000b74 <__addsf3>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <core_setupEncoders+0x118>)
 8003e2e:	601a      	str	r2, [r3, #0]
	DISPERCOUNT = (CIRCUMFERENCE / PRRwheel);
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <core_setupEncoders+0x118>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	481d      	ldr	r0, [pc, #116]	@ (8003eac <core_setupEncoders+0x11c>)
 8003e38:	f7fd f858 	bl	8000eec <__aeabi_fdiv>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <core_setupEncoders+0x120>)
 8003e42:	601a      	str	r2, [r3, #0]
	// Setup Encoder Interrupts
	encoder_setupPin(&ENR, 1, ES, rightCountRisesCH1);
 8003e44:	79fa      	ldrb	r2, [r7, #7]
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <core_setupEncoders+0x124>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4813      	ldr	r0, [pc, #76]	@ (8003e98 <core_setupEncoders+0x108>)
 8003e4c:	f001 f8ca 	bl	8004fe4 <encoder_setupPin>
	encoder_setupPin(&ENR, 2, ES, rightCountRisesCH2);
 8003e50:	79fa      	ldrb	r2, [r7, #7]
 8003e52:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <core_setupEncoders+0x128>)
 8003e54:	2102      	movs	r1, #2
 8003e56:	4810      	ldr	r0, [pc, #64]	@ (8003e98 <core_setupEncoders+0x108>)
 8003e58:	f001 f8c4 	bl	8004fe4 <encoder_setupPin>
	encoder_setupPin(&ENL, 1, ES, leftCountRisesCH1 );
 8003e5c:	79fa      	ldrb	r2, [r7, #7]
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <core_setupEncoders+0x12c>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	480f      	ldr	r0, [pc, #60]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003e64:	f001 f8be 	bl	8004fe4 <encoder_setupPin>
	encoder_setupPin(&ENL, 2, ES, leftCountRisesCH2 );
 8003e68:	79fa      	ldrb	r2, [r7, #7]
 8003e6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <core_setupEncoders+0x130>)
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	480c      	ldr	r0, [pc, #48]	@ (8003ea0 <core_setupEncoders+0x110>)
 8003e70:	f001 f8b8 	bl	8004fe4 <encoder_setupPin>

	#ifdef DEBUG_MODE
	uart_send("SETUP ENCODERS COMPLETE !!! \n");
 8003e74:	4813      	ldr	r0, [pc, #76]	@ (8003ec4 <core_setupEncoders+0x134>)
 8003e76:	f002 ff6f 	bl	8006d58 <uart_send>
	uart_send("Wheel PPR = %f\n",PRRwheel);
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <core_setupEncoders+0x118>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fad2 	bl	8000428 <__aeabi_f2d>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	480f      	ldr	r0, [pc, #60]	@ (8003ec8 <core_setupEncoders+0x138>)
 8003e8a:	f002 ff65 	bl	8006d58 <uart_send>
	#endif
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200017a8 	.word	0x200017a8
 8003e9c:	40010c00 	.word	0x40010c00
 8003ea0:	200017bc 	.word	0x200017bc
 8003ea4:	42c80000 	.word	0x42c80000
 8003ea8:	200018cc 	.word	0x200018cc
 8003eac:	429d145a 	.word	0x429d145a
 8003eb0:	200018d0 	.word	0x200018d0
 8003eb4:	0800409d 	.word	0x0800409d
 8003eb8:	080040b9 	.word	0x080040b9
 8003ebc:	080040d5 	.word	0x080040d5
 8003ec0:	080040f1 	.word	0x080040f1
 8003ec4:	0800a1c0 	.word	0x0800a1c0
 8003ec8:	0800a1e0 	.word	0x0800a1e0

08003ecc <core_setupMPU6050>:
void core_setupMPU6050() {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af02      	add	r7, sp, #8
	MPU.I2Cx    = mpuI2CPeripheral;
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <core_setupMPU6050+0x30>)
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <core_setupMPU6050+0x34>)
 8003ed6:	601a      	str	r2, [r3, #0]
	MPU.address = mpuAddress;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <core_setupMPU6050+0x30>)
 8003eda:	2268      	movs	r2, #104	@ 0x68
 8003edc:	711a      	strb	r2, [r3, #4]

	mpu6050_setup(&MPU, mpuSpeedMode, mpuDlpfConfig, mpuGyroConfig, mpuI2CAlternatePins);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	21b4      	movs	r1, #180	@ 0xb4
 8003ee8:	4804      	ldr	r0, [pc, #16]	@ (8003efc <core_setupMPU6050+0x30>)
 8003eea:	f001 f95d 	bl	80051a8 <mpu6050_setup>

	#ifdef DEBUG_MODE
	uart_send("SETUP MPU6050 COMPLETE !!! \n");
 8003eee:	4805      	ldr	r0, [pc, #20]	@ (8003f04 <core_setupMPU6050+0x38>)
 8003ef0:	f002 ff32 	bl	8006d58 <uart_send>
	#endif
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200017d0 	.word	0x200017d0
 8003f00:	40005400 	.word	0x40005400
 8003f04:	0800a1f0 	.word	0x0800a1f0

08003f08 <core_setupInfraredSensors>:
void core_setupInfraredSensors() {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i<NUM_OF_SENSORS; i++) {
 8003f0e:	2300      	movs	r3, #0
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	e01f      	b.n	8003f54 <core_setupInfraredSensors+0x4c>
		IRX[i].ADCx = irADCPeripheral;
 8003f14:	79fa      	ldrb	r2, [r7, #7]
 8003f16:	4917      	ldr	r1, [pc, #92]	@ (8003f74 <core_setupInfraredSensors+0x6c>)
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <core_setupInfraredSensors+0x70>)
 8003f24:	601a      	str	r2, [r3, #0]
		IRX[i].port = irADCPort;
 8003f26:	79fa      	ldrb	r2, [r7, #7]
 8003f28:	4912      	ldr	r1, [pc, #72]	@ (8003f74 <core_setupInfraredSensors+0x6c>)
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3304      	adds	r3, #4
 8003f36:	4a11      	ldr	r2, [pc, #68]	@ (8003f7c <core_setupInfraredSensors+0x74>)
 8003f38:	601a      	str	r2, [r3, #0]
		IRX[i].pin  = irADCPin + i;
 8003f3a:	79fa      	ldrb	r2, [r7, #7]
 8003f3c:	490d      	ldr	r1, [pc, #52]	@ (8003f74 <core_setupInfraredSensors+0x6c>)
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	3308      	adds	r3, #8
 8003f4a:	79fa      	ldrb	r2, [r7, #7]
 8003f4c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<NUM_OF_SENSORS; i++) {
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	3301      	adds	r3, #1
 8003f52:	71fb      	strb	r3, [r7, #7]
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d9dc      	bls.n	8003f14 <core_setupInfraredSensors+0xc>
	}

	infraredSensors_setup(ADC1, IRX, NUM_OF_SENSORS, IR_READINGS);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <core_setupInfraredSensors+0x78>)
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	4905      	ldr	r1, [pc, #20]	@ (8003f74 <core_setupInfraredSensors+0x6c>)
 8003f60:	4805      	ldr	r0, [pc, #20]	@ (8003f78 <core_setupInfraredSensors+0x70>)
 8003f62:	f001 f85b 	bl	800501c <infraredSensors_setup>

	#ifdef DEBUG_MODE
	uart_send("SETUP INFRARED COMPLETE !!! \n");
 8003f66:	4807      	ldr	r0, [pc, #28]	@ (8003f84 <core_setupInfraredSensors+0x7c>)
 8003f68:	f002 fef6 	bl	8006d58 <uart_send>
	#endif
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200017dc 	.word	0x200017dc
 8003f78:	40012400 	.word	0x40012400
 8003f7c:	40010800 	.word	0x40010800
 8003f80:	20001904 	.word	0x20001904
 8003f84:	0800a210 	.word	0x0800a210

08003f88 <core_setupExtras>:
void core_setupExtras(uint32_t buzzFreq) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	// DIP_SWITCHES
	gpio_setupPin(dip0Port,dip0Pin,IN,PULLUP);
 8003f90:	2302      	movs	r3, #2
 8003f92:	2200      	movs	r2, #0
 8003f94:	210a      	movs	r1, #10
 8003f96:	4819      	ldr	r0, [pc, #100]	@ (8003ffc <core_setupExtras+0x74>)
 8003f98:	f001 ff4e 	bl	8005e38 <gpio_setupPin>
	gpio_setupPin(dip1Port,dip1Pin,IN,PULLUP);
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	210b      	movs	r1, #11
 8003fa2:	4816      	ldr	r0, [pc, #88]	@ (8003ffc <core_setupExtras+0x74>)
 8003fa4:	f001 ff48 	bl	8005e38 <gpio_setupPin>
	// LEDs
	gpio_setupPin(rightLedPort,rightLedPin,OUT_50,GP_PP);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2203      	movs	r2, #3
 8003fac:	2104      	movs	r1, #4
 8003fae:	4814      	ldr	r0, [pc, #80]	@ (8004000 <core_setupExtras+0x78>)
 8003fb0:	f001 ff42 	bl	8005e38 <gpio_setupPin>
	gpio_setupPin(frontLedPort,frontLedPin,OUT_50,GP_PP);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	2105      	movs	r1, #5
 8003fba:	4811      	ldr	r0, [pc, #68]	@ (8004000 <core_setupExtras+0x78>)
 8003fbc:	f001 ff3c 	bl	8005e38 <gpio_setupPin>
	gpio_setupPin(leftLedPort ,leftLedPin ,OUT_50,GP_PP);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	2106      	movs	r1, #6
 8003fc6:	480e      	ldr	r0, [pc, #56]	@ (8004000 <core_setupExtras+0x78>)
 8003fc8:	f001 ff36 	bl	8005e38 <gpio_setupPin>

	gpio_setupPin(searchLedPort,searchLedPin,OUT_50,GP_PP);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2203      	movs	r2, #3
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	480a      	ldr	r0, [pc, #40]	@ (8003ffc <core_setupExtras+0x74>)
 8003fd4:	f001 ff30 	bl	8005e38 <gpio_setupPin>
	gpio_setupPin(runLedPort   ,runLedPin   ,OUT_50,GP_PP);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2203      	movs	r2, #3
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4807      	ldr	r0, [pc, #28]	@ (8003ffc <core_setupExtras+0x74>)
 8003fe0:	f001 ff2a 	bl	8005e38 <gpio_setupPin>
	// BUZZER
	timers_pwmSetup(buzzerPort, buzzerPin, buzzFreq);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	2107      	movs	r1, #7
 8003fe8:	4805      	ldr	r0, [pc, #20]	@ (8004000 <core_setupExtras+0x78>)
 8003fea:	f002 fd01 	bl	80069f0 <timers_pwmSetup>

	#ifdef DEBUG_MODE
	uart_send("SETUP EXTRAS COMPLETE !!! \n");
 8003fee:	4805      	ldr	r0, [pc, #20]	@ (8004004 <core_setupExtras+0x7c>)
 8003ff0:	f002 feb2 	bl	8006d58 <uart_send>
	#endif
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40010c00 	.word	0x40010c00
 8004000:	40010800 	.word	0x40010800
 8004004:	0800a230 	.word	0x0800a230

08004008 <core_MotorPidControl>:

/* ========================================================================================================================
 * === MOTORS LOGIC FUNCTIONS ===
 * - PID controlled Movement Functions
 * ======================================================================================================================== */
void core_MotorPidControl(Motor* myMotor, MOTORDIR dir, float targetRPM) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	460b      	mov	r3, r1
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	72fb      	strb	r3, [r7, #11]
    core_calcRPM();
 8004016:	f000 f8d5 	bl	80041c4 <core_calcRPM>
    float pidout = 0;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

    if (myMotor == &MR) {
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <core_MotorPidControl+0x7c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10d      	bne.n	8004044 <core_MotorPidControl+0x3c>
    	pidout = pidController_compute(&RIGHT_SPEED_PID, targetRPM-20, myMotor->CURR_RPM);
 8004028:	4917      	ldr	r1, [pc, #92]	@ (8004088 <core_MotorPidControl+0x80>)
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fc fda0 	bl	8000b70 <__aeabi_fsub>
 8004030:	4603      	mov	r3, r0
 8004032:	4619      	mov	r1, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	461a      	mov	r2, r3
 800403a:	4814      	ldr	r0, [pc, #80]	@ (800408c <core_MotorPidControl+0x84>)
 800403c:	f7fd f97c 	bl	8001338 <pidController_compute>
 8004040:	6178      	str	r0, [r7, #20]
 8004042:	e010      	b.n	8004066 <core_MotorPidControl+0x5e>
    }
    else if (myMotor == &ML) {
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <core_MotorPidControl+0x88>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10c      	bne.n	8004066 <core_MotorPidControl+0x5e>
    	pidout = pidController_compute(&LEFT_SPEED_PID, targetRPM-21, myMotor->CURR_RPM);
 800404c:	4911      	ldr	r1, [pc, #68]	@ (8004094 <core_MotorPidControl+0x8c>)
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fd8e 	bl	8000b70 <__aeabi_fsub>
 8004054:	4603      	mov	r3, r0
 8004056:	4619      	mov	r1, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	461a      	mov	r2, r3
 800405e:	480e      	ldr	r0, [pc, #56]	@ (8004098 <core_MotorPidControl+0x90>)
 8004060:	f7fd f96a 	bl	8001338 <pidController_compute>
 8004064:	6178      	str	r0, [r7, #20]
    }
    motors_control(myMotor, dir, (uint16_t)(pidout));
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7fd f852 	bl	8001110 <__aeabi_f2uiz>
 800406c:	4603      	mov	r3, r0
 800406e:	b29a      	uxth	r2, r3
 8004070:	7afb      	ldrb	r3, [r7, #11]
 8004072:	4619      	mov	r1, r3
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f001 f827 	bl	80050c8 <motors_control>
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20001768 	.word	0x20001768
 8004088:	41a00000 	.word	0x41a00000
 800408c:	2000182c 	.word	0x2000182c
 8004090:	20001788 	.word	0x20001788
 8004094:	41a80000 	.word	0x41a80000
 8004098:	2000180c 	.word	0x2000180c

0800409c <rightCountRisesCH1>:

/* ========================================================================================================================
 * === ENCODER LOGIC FUNCTIONS ===
 * - Interrupt callbacks increment counts and calculate walked distance
 * ======================================================================================================================== */
void rightCountRisesCH1() {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	rightEncoderCount++;
 80040a0:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <rightCountRisesCH1+0x18>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <rightCountRisesCH1+0x18>)
 80040a8:	6013      	str	r3, [r2, #0]
	core_calcDistance();
 80040aa:	f000 f83f 	bl	800412c <core_calcDistance>
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200018d4 	.word	0x200018d4

080040b8 <rightCountRisesCH2>:
void rightCountRisesCH2() {
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	rightEncoderCount++;
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <rightCountRisesCH2+0x18>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a03      	ldr	r2, [pc, #12]	@ (80040d0 <rightCountRisesCH2+0x18>)
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	200018d4 	.word	0x200018d4

080040d4 <leftCountRisesCH1>:
void leftCountRisesCH1() {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	leftEncoderCount++;
 80040d8:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <leftCountRisesCH1+0x18>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a03      	ldr	r2, [pc, #12]	@ (80040ec <leftCountRisesCH1+0x18>)
 80040e0:	6013      	str	r3, [r2, #0]
	core_calcDistance();
 80040e2:	f000 f823 	bl	800412c <core_calcDistance>
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200018d8 	.word	0x200018d8

080040f0 <leftCountRisesCH2>:
void leftCountRisesCH2() {
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
	leftEncoderCount++;
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <leftCountRisesCH2+0x18>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a03      	ldr	r2, [pc, #12]	@ (8004108 <leftCountRisesCH2+0x18>)
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	200018d8 	.word	0x200018d8

0800410c <resetEncoders>:
void resetEncoders() {
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
	rightEncoderCount = 0;
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <resetEncoders+0x18>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
	leftEncoderCount  = 0;
 8004116:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <resetEncoders+0x1c>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	200018d4 	.word	0x200018d4
 8004128:	200018d8 	.word	0x200018d8

0800412c <core_calcDistance>:

/* ======================================================================================================================== */

void core_calcDistance() {
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004132:	b672      	cpsid	i
}
 8004134:	bf00      	nop
    uint32_t rc, lc;
    __disable_irq();
    rc = rightEncoderCount;
 8004136:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <core_calcDistance+0x80>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]
    lc = leftEncoderCount;
 800413c:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <core_calcDistance+0x84>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004142:	b662      	cpsie	i
}
 8004144:	bf00      	nop
    __enable_irq();

    walkedDistanceRight = DISPERCOUNT * (float)rc;
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fdc4 	bl	8000cd4 <__aeabi_ui2f>
 800414c:	4602      	mov	r2, r0
 800414e:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <core_calcDistance+0x88>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fc fe15 	bl	8000d84 <__aeabi_fmul>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4b16      	ldr	r3, [pc, #88]	@ (80041b8 <core_calcDistance+0x8c>)
 8004160:	601a      	str	r2, [r3, #0]
    walkedDistanceLeft  = DISPERCOUNT * (float)lc;
 8004162:	6838      	ldr	r0, [r7, #0]
 8004164:	f7fc fdb6 	bl	8000cd4 <__aeabi_ui2f>
 8004168:	4602      	mov	r2, r0
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <core_calcDistance+0x88>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f7fc fe07 	bl	8000d84 <__aeabi_fmul>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <core_calcDistance+0x90>)
 800417c:	601a      	str	r2, [r3, #0]
    walkedDistanceAvg = (walkedDistanceRight + walkedDistanceLeft) * 0.5f;
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <core_calcDistance+0x8c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a0e      	ldr	r2, [pc, #56]	@ (80041bc <core_calcDistance+0x90>)
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc fcf3 	bl	8000b74 <__addsf3>
 800418e:	4603      	mov	r3, r0
 8004190:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fdf5 	bl	8000d84 <__aeabi_fmul>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <core_calcDistance+0x94>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200018d4 	.word	0x200018d4
 80041b0:	200018d8 	.word	0x200018d8
 80041b4:	200018d0 	.word	0x200018d0
 80041b8:	200018dc 	.word	0x200018dc
 80041bc:	200018e0 	.word	0x200018e0
 80041c0:	200018e4 	.word	0x200018e4

080041c4 <core_calcRPM>:

void core_calcRPM() {
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b089      	sub	sp, #36	@ 0x24
 80041c8:	af00      	add	r7, sp, #0
    currTime = timers_stopwatch();
 80041ca:	f002 fd6d 	bl	8006ca8 <timers_stopwatch>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a54      	ldr	r2, [pc, #336]	@ (8004324 <core_calcRPM+0x160>)
 80041d2:	6013      	str	r3, [r2, #0]

    // Right motor
    if ((currTime - lastSampleTime[0]) >= RPM_SAMPLE_INTERVAL) {
 80041d4:	4b53      	ldr	r3, [pc, #332]	@ (8004324 <core_calcRPM+0x160>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <core_calcRPM+0x164>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d948      	bls.n	8004278 <core_calcRPM+0xb4>
        uint32_t deltaCount = rightEncoderCount - lastCount[0];
 80041e6:	4b51      	ldr	r3, [pc, #324]	@ (800432c <core_calcRPM+0x168>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b51      	ldr	r3, [pc, #324]	@ (8004330 <core_calcRPM+0x16c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	61fb      	str	r3, [r7, #28]
        float dt = (currTime - lastSampleTime[0]) / 1000000.0f; // µs → s
 80041f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004324 <core_calcRPM+0x160>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <core_calcRPM+0x164>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc fd69 	bl	8000cd4 <__aeabi_ui2f>
 8004202:	4603      	mov	r3, r0
 8004204:	494b      	ldr	r1, [pc, #300]	@ (8004334 <core_calcRPM+0x170>)
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fe70 	bl	8000eec <__aeabi_fdiv>
 800420c:	4603      	mov	r3, r0
 800420e:	61bb      	str	r3, [r7, #24]
        //uart_send("deltaCountr:%d",deltaCount); uart_send(",dtr:%f\n",dt);

        float revs = deltaCount / PRRwheel;
 8004210:	69f8      	ldr	r0, [r7, #28]
 8004212:	f7fc fd5f 	bl	8000cd4 <__aeabi_ui2f>
 8004216:	4602      	mov	r2, r0
 8004218:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <core_calcRPM+0x174>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f7fc fe64 	bl	8000eec <__aeabi_fdiv>
 8004224:	4603      	mov	r3, r0
 8004226:	617b      	str	r3, [r7, #20]
        float rpm  = (revs / dt) * 60.0f;
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7fc fe5e 	bl	8000eec <__aeabi_fdiv>
 8004230:	4603      	mov	r3, r0
 8004232:	4942      	ldr	r1, [pc, #264]	@ (800433c <core_calcRPM+0x178>)
 8004234:	4618      	mov	r0, r3
 8004236:	f7fc fda5 	bl	8000d84 <__aeabi_fmul>
 800423a:	4603      	mov	r3, r0
 800423c:	613b      	str	r3, [r7, #16]

        // Smooth update
        MR.CURR_RPM = RPM_SMOOTH_ALPHA * rpm + (1.0f - RPM_SMOOTH_ALPHA) * MR.CURR_RPM;
 800423e:	4940      	ldr	r1, [pc, #256]	@ (8004340 <core_calcRPM+0x17c>)
 8004240:	6938      	ldr	r0, [r7, #16]
 8004242:	f7fc fd9f 	bl	8000d84 <__aeabi_fmul>
 8004246:	4603      	mov	r3, r0
 8004248:	461c      	mov	r4, r3
 800424a:	4b3e      	ldr	r3, [pc, #248]	@ (8004344 <core_calcRPM+0x180>)
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	493e      	ldr	r1, [pc, #248]	@ (8004348 <core_calcRPM+0x184>)
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fd97 	bl	8000d84 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	4619      	mov	r1, r3
 800425a:	4620      	mov	r0, r4
 800425c:	f7fc fc8a 	bl	8000b74 <__addsf3>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	4b37      	ldr	r3, [pc, #220]	@ (8004344 <core_calcRPM+0x180>)
 8004266:	619a      	str	r2, [r3, #24]

        lastCount[0] = rightEncoderCount;
 8004268:	4b30      	ldr	r3, [pc, #192]	@ (800432c <core_calcRPM+0x168>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a30      	ldr	r2, [pc, #192]	@ (8004330 <core_calcRPM+0x16c>)
 800426e:	6013      	str	r3, [r2, #0]
        lastSampleTime[0] = currTime;
 8004270:	4b2c      	ldr	r3, [pc, #176]	@ (8004324 <core_calcRPM+0x160>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2c      	ldr	r2, [pc, #176]	@ (8004328 <core_calcRPM+0x164>)
 8004276:	6013      	str	r3, [r2, #0]
    }

    // Left motor
    if ((currTime - lastSampleTime[1]) >= RPM_SAMPLE_INTERVAL) {
 8004278:	4b2a      	ldr	r3, [pc, #168]	@ (8004324 <core_calcRPM+0x160>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b2a      	ldr	r3, [pc, #168]	@ (8004328 <core_calcRPM+0x164>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004286:	4293      	cmp	r3, r2
 8004288:	d948      	bls.n	800431c <core_calcRPM+0x158>
        uint32_t deltaCount = leftEncoderCount - lastCount[1];
 800428a:	4b30      	ldr	r3, [pc, #192]	@ (800434c <core_calcRPM+0x188>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b28      	ldr	r3, [pc, #160]	@ (8004330 <core_calcRPM+0x16c>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	60fb      	str	r3, [r7, #12]
        float dt = (currTime - lastSampleTime[1]) / 1000000.0f; // µs → s
 8004296:	4b23      	ldr	r3, [pc, #140]	@ (8004324 <core_calcRPM+0x160>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b23      	ldr	r3, [pc, #140]	@ (8004328 <core_calcRPM+0x164>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc fd17 	bl	8000cd4 <__aeabi_ui2f>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4922      	ldr	r1, [pc, #136]	@ (8004334 <core_calcRPM+0x170>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc fe1e 	bl	8000eec <__aeabi_fdiv>
 80042b0:	4603      	mov	r3, r0
 80042b2:	60bb      	str	r3, [r7, #8]
        //uart_send("deltaCountl:%d",deltaCount); uart_send(",dtl:%f\n",dt);

        float revs = deltaCount / PRRwheel;
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7fc fd0d 	bl	8000cd4 <__aeabi_ui2f>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <core_calcRPM+0x174>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fc fe12 	bl	8000eec <__aeabi_fdiv>
 80042c8:	4603      	mov	r3, r0
 80042ca:	607b      	str	r3, [r7, #4]
        float rpm  = (revs / dt) * 60.0f;
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc fe0c 	bl	8000eec <__aeabi_fdiv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4919      	ldr	r1, [pc, #100]	@ (800433c <core_calcRPM+0x178>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc fd53 	bl	8000d84 <__aeabi_fmul>
 80042de:	4603      	mov	r3, r0
 80042e0:	603b      	str	r3, [r7, #0]

        // Smooth update
        ML.CURR_RPM = RPM_SMOOTH_ALPHA * rpm + (1.0f - RPM_SMOOTH_ALPHA) * ML.CURR_RPM;
 80042e2:	4917      	ldr	r1, [pc, #92]	@ (8004340 <core_calcRPM+0x17c>)
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f7fc fd4d 	bl	8000d84 <__aeabi_fmul>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461c      	mov	r4, r3
 80042ee:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <core_calcRPM+0x18c>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	4915      	ldr	r1, [pc, #84]	@ (8004348 <core_calcRPM+0x184>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fd45 	bl	8000d84 <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4619      	mov	r1, r3
 80042fe:	4620      	mov	r0, r4
 8004300:	f7fc fc38 	bl	8000b74 <__addsf3>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <core_calcRPM+0x18c>)
 800430a:	619a      	str	r2, [r3, #24]

        lastCount[1] = leftEncoderCount;
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <core_calcRPM+0x188>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a07      	ldr	r2, [pc, #28]	@ (8004330 <core_calcRPM+0x16c>)
 8004312:	6053      	str	r3, [r2, #4]
        lastSampleTime[1] = currTime;
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <core_calcRPM+0x160>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a03      	ldr	r2, [pc, #12]	@ (8004328 <core_calcRPM+0x164>)
 800431a:	6053      	str	r3, [r2, #4]
    }
}
 800431c:	bf00      	nop
 800431e:	3724      	adds	r7, #36	@ 0x24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	200018f8 	.word	0x200018f8
 8004328:	200018e8 	.word	0x200018e8
 800432c:	200018d4 	.word	0x200018d4
 8004330:	200018f0 	.word	0x200018f0
 8004334:	49742400 	.word	0x49742400
 8004338:	200018cc 	.word	0x200018cc
 800433c:	42700000 	.word	0x42700000
 8004340:	3e19999a 	.word	0x3e19999a
 8004344:	20001768 	.word	0x20001768
 8004348:	3f59999a 	.word	0x3f59999a
 800434c:	200018d8 	.word	0x200018d8
 8004350:	20001788 	.word	0x20001788

08004354 <core_calcAngles>:
/* ========================================================================================================================
 * === GYROSCOPE LOGIC FUNCTIONS ===
 * - Integrates gyro Z-axis to achieve desired rotation
 * - @param targetAngle Angle in degrees (positive = CW, negative = CCW)
 * ======================================================================================================================== */
float core_calcAngles() {
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
    float gyroX_dps, gyroY_dps, gyroZ_dps;
    uint32_t currTime;

    mpu6050_readGyro(&MPU, &gyroX_dps, &gyroY_dps, &gyroZ_dps);
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	f107 0208 	add.w	r2, r7, #8
 8004360:	f107 010c 	add.w	r1, r7, #12
 8004364:	4816      	ldr	r0, [pc, #88]	@ (80043c0 <core_calcAngles+0x6c>)
 8004366:	f001 f857 	bl	8005418 <mpu6050_readGyro>
    currTime = timers_stopwatch();
 800436a:	f002 fc9d 	bl	8006ca8 <timers_stopwatch>
 800436e:	6178      	str	r0, [r7, #20]

    float dt = (currTime - lastGyroTime) / 1000000.0f; // Convert µs to seconds
 8004370:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <core_calcAngles+0x70>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc fcab 	bl	8000cd4 <__aeabi_ui2f>
 800437e:	4603      	mov	r3, r0
 8004380:	4911      	ldr	r1, [pc, #68]	@ (80043c8 <core_calcAngles+0x74>)
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc fdb2 	bl	8000eec <__aeabi_fdiv>
 8004388:	4603      	mov	r3, r0
 800438a:	613b      	str	r3, [r7, #16]
    spunAngles += gyroZ_dps * dt;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6939      	ldr	r1, [r7, #16]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fcf7 	bl	8000d84 <__aeabi_fmul>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <core_calcAngles+0x78>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fc fbe7 	bl	8000b74 <__addsf3>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <core_calcAngles+0x78>)
 80043ac:	601a      	str	r2, [r3, #0]

    lastGyroTime = currTime;
 80043ae:	4a05      	ldr	r2, [pc, #20]	@ (80043c4 <core_calcAngles+0x70>)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6013      	str	r3, [r2, #0]

	#ifdef DEBUG_MODE
	//uart_send("ANGLE : %f\n",spunAngles);
	#endif

    return spunAngles;
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <core_calcAngles+0x78>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200017d0 	.word	0x200017d0
 80043c4:	200018fc 	.word	0x200018fc
 80043c8:	49742400 	.word	0x49742400
 80043cc:	20001900 	.word	0x20001900

080043d0 <core_buzz>:
 * ======================================================================================================================== */

/* ========================================================================================================================
 * === BUZZER CONTROL FUNCTIONS ===
 * ======================================================================================================================== */
void core_buzz(uint16_t freq, uint16_t duration) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	460a      	mov	r2, r1
 80043da:	80fb      	strh	r3, [r7, #6]
 80043dc:	4613      	mov	r3, r2
 80043de:	80bb      	strh	r3, [r7, #4]
	timers_pwm(buzzerPort, buzzerPin, freq);
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	461a      	mov	r2, r3
 80043e4:	2107      	movs	r1, #7
 80043e6:	4808      	ldr	r0, [pc, #32]	@ (8004408 <core_buzz+0x38>)
 80043e8:	f002 fbee 	bl	8006bc8 <timers_pwm>
	systick_delayMillis(duration);
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 f8f2 	bl	80065d8 <systick_delayMillis>
	timers_pwm(buzzerPort, buzzerPin, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2107      	movs	r1, #7
 80043f8:	4803      	ldr	r0, [pc, #12]	@ (8004408 <core_buzz+0x38>)
 80043fa:	f002 fbe5 	bl	8006bc8 <timers_pwm>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40010800 	.word	0x40010800

0800440c <core_speak>:
void core_speak(TONE melody) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
	switch (melody) {
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d831      	bhi.n	8004480 <core_speak+0x74>
 800441c:	a201      	add	r2, pc, #4	@ (adr r2, 8004424 <core_speak+0x18>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004435 	.word	0x08004435
 8004428:	0800444b 	.word	0x0800444b
 800442c:	0800447f 	.word	0x0800447f
 8004430:	0800447f 	.word	0x0800447f
	case BEEP:
		core_buzz(1800, 150);
 8004434:	2196      	movs	r1, #150	@ 0x96
 8004436:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800443a:	f7ff ffc9 	bl	80043d0 <core_buzz>
		core_buzz(2000, 50);
 800443e:	2132      	movs	r1, #50	@ 0x32
 8004440:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004444:	f7ff ffc4 	bl	80043d0 <core_buzz>
		break;
 8004448:	e01a      	b.n	8004480 <core_speak+0x74>
	case CELEBRATE1:
		core_buzz(2000, 200);
 800444a:	21c8      	movs	r1, #200	@ 0xc8
 800444c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004450:	f7ff ffbe 	bl	80043d0 <core_buzz>
		core_buzz(1600, 200);
 8004454:	21c8      	movs	r1, #200	@ 0xc8
 8004456:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800445a:	f7ff ffb9 	bl	80043d0 <core_buzz>
		core_buzz(0   , 200);
 800445e:	21c8      	movs	r1, #200	@ 0xc8
 8004460:	2000      	movs	r0, #0
 8004462:	f7ff ffb5 	bl	80043d0 <core_buzz>
		core_buzz(1800, 600);
 8004466:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800446a:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800446e:	f7ff ffaf 	bl	80043d0 <core_buzz>
		core_buzz(1500, 200);
 8004472:	21c8      	movs	r1, #200	@ 0xc8
 8004474:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8004478:	f7ff ffaa 	bl	80043d0 <core_buzz>
		break;
 800447c:	e000      	b.n	8004480 <core_speak+0x74>
	case CELEBRATE2: break;
 800447e:	bf00      	nop
	case FAULT:      break;
	default:
	}
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <core_modeSelect>:

/* ========================================================================================================================
 * === DIP SWITCH FUNCTIONS ===
 * ======================================================================================================================== */
void core_modeSelect() {
 8004488:	b598      	push	{r3, r4, r7, lr}
 800448a:	af00      	add	r7, sp, #0
	CORE_MODE = ((gpio_readPin(dip0Port,dip0Pin) << 0) | (gpio_readPin(dip1Port,dip1Pin) << 1));
 800448c:	210a      	movs	r1, #10
 800448e:	480a      	ldr	r0, [pc, #40]	@ (80044b8 <core_modeSelect+0x30>)
 8004490:	f001 fd6d 	bl	8005f6e <gpio_readPin>
 8004494:	4603      	mov	r3, r0
 8004496:	b25c      	sxtb	r4, r3
 8004498:	210b      	movs	r1, #11
 800449a:	4807      	ldr	r0, [pc, #28]	@ (80044b8 <core_modeSelect+0x30>)
 800449c:	f001 fd67 	bl	8005f6e <gpio_readPin>
 80044a0:	4603      	mov	r3, r0
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	4323      	orrs	r3, r4
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	4b03      	ldr	r3, [pc, #12]	@ (80044bc <core_modeSelect+0x34>)
 80044b0:	701a      	strb	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	bd98      	pop	{r3, r4, r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40010c00 	.word	0x40010c00
 80044bc:	2000190d 	.word	0x2000190d

080044c0 <remi>:
/* ========================================================================================================================
 * === MAIN CONTROL FUNCTION ===
 * - Central control switch for micromouse actions
 * - @param remiActions Enum input defining the desired action
 * ======================================================================================================================== */
uint8_t remi(ACTIONS remiActions) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
	switch (remiActions) {
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d852      	bhi.n	8004576 <remi+0xb6>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <remi+0x18>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	0800452f 	.word	0x0800452f
 80044e8:	08004543 	.word	0x08004543
 80044ec:	0800454d 	.word	0x0800454d
 80044f0:	08004557 	.word	0x08004557
 80044f4:	08004567 	.word	0x08004567
 80044f8:	0800456f 	.word	0x0800456f
	case ONCE    :  walk(CIRCUMFERENCE, 200.0f, STOP); return 0;
 80044fc:	2202      	movs	r2, #2
 80044fe:	4920      	ldr	r1, [pc, #128]	@ (8004580 <remi+0xc0>)
 8004500:	4820      	ldr	r0, [pc, #128]	@ (8004584 <remi+0xc4>)
 8004502:	f000 f84b 	bl	800459c <walk>
 8004506:	2300      	movs	r3, #0
 8004508:	e036      	b.n	8004578 <remi+0xb8>
	case WALLSTEP:  walk( 45.0f, SPEED, 0); return 0;
 800450a:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <remi+0xc8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	4619      	mov	r1, r3
 8004512:	481e      	ldr	r0, [pc, #120]	@ (800458c <remi+0xcc>)
 8004514:	f000 f842 	bl	800459c <walk>
 8004518:	2300      	movs	r3, #0
 800451a:	e02d      	b.n	8004578 <remi+0xb8>
	case HALFSTEP:  walk( 90.0f, SPEED, 0); return 0;
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <remi+0xc8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	4619      	mov	r1, r3
 8004524:	481a      	ldr	r0, [pc, #104]	@ (8004590 <remi+0xd0>)
 8004526:	f000 f839 	bl	800459c <walk>
 800452a:	2300      	movs	r3, #0
 800452c:	e024      	b.n	8004578 <remi+0xb8>
	case FULLSTEP:  walk(distance, SPEED, 0); return 0;
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <remi+0xd4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a15      	ldr	r2, [pc, #84]	@ (8004588 <remi+0xc8>)
 8004534:	6811      	ldr	r1, [r2, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f82f 	bl	800459c <walk>
 800453e:	2300      	movs	r3, #0
 8004540:	e01a      	b.n	8004578 <remi+0xb8>
	case SPINRIGHT: spin(-90.0f); return 0;
 8004542:	4815      	ldr	r0, [pc, #84]	@ (8004598 <remi+0xd8>)
 8004544:	f000 fa0e 	bl	8004964 <spin>
 8004548:	2300      	movs	r3, #0
 800454a:	e015      	b.n	8004578 <remi+0xb8>
	case SPINLEFT:  spin( 90.0f); return 0;
 800454c:	4810      	ldr	r0, [pc, #64]	@ (8004590 <remi+0xd0>)
 800454e:	f000 fa09 	bl	8004964 <spin>
 8004552:	2300      	movs	r3, #0
 8004554:	e010      	b.n	8004578 <remi+0xb8>
	case DEADEND:   remi(SPINRIGHT); remi(SPINRIGHT); return 0;
 8004556:	2004      	movs	r0, #4
 8004558:	f7ff ffb2 	bl	80044c0 <remi>
 800455c:	2004      	movs	r0, #4
 800455e:	f7ff ffaf 	bl	80044c0 <remi>
 8004562:	2300      	movs	r3, #0
 8004564:	e008      	b.n	8004578 <remi+0xb8>
	case READWALLS: return readWalls();
 8004566:	f000 fb01 	bl	8004b6c <readWalls>
 800456a:	4603      	mov	r3, r0
 800456c:	e004      	b.n	8004578 <remi+0xb8>
	case HALT:      stop(); return 0;
 800456e:	f000 fad5 	bl	8004b1c <stop>
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <remi+0xb8>
	default: return 1;
 8004576:	2301      	movs	r3, #1
	}
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	43480000 	.word	0x43480000
 8004584:	429d145a 	.word	0x429d145a
 8004588:	20000408 	.word	0x20000408
 800458c:	42340000 	.word	0x42340000
 8004590:	42b40000 	.word	0x42b40000
 8004594:	2000040c 	.word	0x2000040c
 8004598:	c2b40000 	.word	0xc2b40000

0800459c <walk>:

/* ========================================================================================================================
 * === SUB CONTROL FUNCTIONS ===
 * - Predefined movement routines for the micromouse
 * ======================================================================================================================== */
void walk(float targetDistance, float baseRPM, MOTORDIR State) {
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b099      	sub	sp, #100	@ 0x64
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]
    // Encoder setup
    float targetCount = targetDistance / DISPERCOUNT;
 80045aa:	4b74      	ldr	r3, [pc, #464]	@ (800477c <walk+0x1e0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7fc fc9b 	bl	8000eec <__aeabi_fdiv>
 80045b6:	4603      	mov	r3, r0
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t avgEncoderCount = (rightEncoderCount + leftEncoderCount) * 0.5;
 80045ba:	4b71      	ldr	r3, [pc, #452]	@ (8004780 <walk+0x1e4>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b71      	ldr	r3, [pc, #452]	@ (8004784 <walk+0x1e8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb ff0d 	bl	80003e4 <__aeabi_ui2d>
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004788 <walk+0x1ec>)
 80045d0:	f7fb ff82 	bl	80004d8 <__aeabi_dmul>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	f7fc fa54 	bl	8000a88 <__aeabi_d2uiz>
 80045e0:	4603      	mov	r3, r0
 80045e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t startCount = avgEncoderCount;
 80045e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Gyro setup
    lastGyroTime = timers_stopwatch();
 80045e8:	f002 fb5e 	bl	8006ca8 <timers_stopwatch>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4a67      	ldr	r2, [pc, #412]	@ (800478c <walk+0x1f0>)
 80045f0:	6013      	str	r3, [r2, #0]
    spunAngles = 0.0f;
 80045f2:	4b67      	ldr	r3, [pc, #412]	@ (8004790 <walk+0x1f4>)
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    float offsetAngles = core_calcAngles();
 80045fa:	f7ff feab 	bl	8004354 <core_calcAngles>
 80045fe:	65b8      	str	r0, [r7, #88]	@ 0x58
    float currAngle = 0, TEMP = 0;
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34

    // Filters
    float filteredAngle = 0.0f;
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	657b      	str	r3, [r7, #84]	@ 0x54
    float filteredPidOut = 0.0f;
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	653b      	str	r3, [r7, #80]	@ 0x50
    float alphaAngle = 0.9f;   // gyro smoothing
 8004618:	4b5e      	ldr	r3, [pc, #376]	@ (8004794 <walk+0x1f8>)
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
    float alphaPID   = 0.9f;   // correction smoothing
 800461c:	4b5d      	ldr	r3, [pc, #372]	@ (8004794 <walk+0x1f8>)
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Gyro Deadband
    float DEADBAND_G   = 0.003f;
 8004620:	4b5d      	ldr	r3, [pc, #372]	@ (8004798 <walk+0x1fc>)
 8004622:	62bb      	str	r3, [r7, #40]	@ 0x28
    float correction_G = 0.0f;
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // IR Deadband
    //float DEADBAND_IR   = 110.0f;
    float correction_IR_RIGHT = 0.0f;
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	64bb      	str	r3, [r7, #72]	@ 0x48
    float correction_IR_LEFT  = 0.0f;
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44

    uart_send("MOVE STRAIGHT\n");
 8004636:	4859      	ldr	r0, [pc, #356]	@ (800479c <walk+0x200>)
 8004638:	f002 fb8e 	bl	8006d58 <uart_send>
//    STABLE_IR_PID.last_error = 0;
//    STABLE_IR_PID.integral  = 0;
//    STABLE_IR_PID.last_time = timers_stopwatch();

    // ---------------- MAIN TRAVEL LOOP ----------------
    while ((avgEncoderCount - startCount) < targetCount) {
 800463c:	e0dd      	b.n	80047fa <walk+0x25e>
        remi(READWALLS);
 800463e:	2007      	movs	r0, #7
 8004640:	f7ff ff3e 	bl	80044c0 <remi>
        if ((walls & 0b0100) && (walls & 0b0010)) {
 8004644:	4b56      	ldr	r3, [pc, #344]	@ (80047a0 <walk+0x204>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <walk+0xcc>
 8004650:	4b53      	ldr	r3, [pc, #332]	@ (80047a0 <walk+0x204>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <walk+0xcc>
            frontCalibration();
 800465c:	f000 fb0c 	bl	8004c78 <frontCalibration>
            remi(HALT);
 8004660:	2008      	movs	r0, #8
 8004662:	f7ff ff2d 	bl	80044c0 <remi>
            return;   // stop immediately
 8004666:	e16d      	b.n	8004944 <walk+0x3a8>
        }

        avgEncoderCount = (rightEncoderCount + leftEncoderCount) * 0.5;
 8004668:	4b45      	ldr	r3, [pc, #276]	@ (8004780 <walk+0x1e4>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b45      	ldr	r3, [pc, #276]	@ (8004784 <walk+0x1e8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4413      	add	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb feb6 	bl	80003e4 <__aeabi_ui2d>
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	4b42      	ldr	r3, [pc, #264]	@ (8004788 <walk+0x1ec>)
 800467e:	f7fb ff2b 	bl	80004d8 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f7fc f9fd 	bl	8000a88 <__aeabi_d2uiz>
 800468e:	4603      	mov	r3, r0
 8004690:	65fb      	str	r3, [r7, #92]	@ 0x5c

        // Gyro Feedback
        TEMP = core_calcAngles();
 8004692:	f7ff fe5f 	bl	8004354 <core_calcAngles>
 8004696:	6378      	str	r0, [r7, #52]	@ 0x34
        currAngle = TEMP - (offsetAngles*0.5f);
 8004698:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800469c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800469e:	f7fc fb71 	bl	8000d84 <__aeabi_fmul>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80046a8:	f7fc fa62 	bl	8000b70 <__aeabi_fsub>
 80046ac:	4603      	mov	r3, r0
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        filteredAngle = (1.0f - alphaAngle) * filteredAngle + alphaAngle * currAngle;
 80046b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80046b6:	f7fc fa5b 	bl	8000b70 <__aeabi_fsub>
 80046ba:	4603      	mov	r3, r0
 80046bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fc fb60 	bl	8000d84 <__aeabi_fmul>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461c      	mov	r4, r3
 80046c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046cc:	f7fc fb5a 	bl	8000d84 <__aeabi_fmul>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4619      	mov	r1, r3
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7fc fa4d 	bl	8000b74 <__addsf3>
 80046da:	4603      	mov	r3, r0
 80046dc:	657b      	str	r3, [r7, #84]	@ 0x54
        if (fabs(filteredAngle) > DEADBAND_G) {
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046e4:	4619      	mov	r1, r3
 80046e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e8:	f7fc fcea 	bl	80010c0 <__aeabi_fcmplt>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <walk+0x196>
            float rawGyroPidOut = pidController_compute(&STABLE_GYRO_PID, 0, filteredAngle);
 80046f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	482a      	ldr	r0, [pc, #168]	@ (80047a4 <walk+0x208>)
 80046fa:	f7fc fe1d 	bl	8001338 <pidController_compute>
 80046fe:	61f8      	str	r0, [r7, #28]
            filteredPidOut = (1.0f - alphaPID) * filteredPidOut + alphaPID * rawGyroPidOut;
 8004700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004702:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004706:	f7fc fa33 	bl	8000b70 <__aeabi_fsub>
 800470a:	4603      	mov	r3, r0
 800470c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fb38 	bl	8000d84 <__aeabi_fmul>
 8004714:	4603      	mov	r3, r0
 8004716:	461c      	mov	r4, r3
 8004718:	69f9      	ldr	r1, [r7, #28]
 800471a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800471c:	f7fc fb32 	bl	8000d84 <__aeabi_fmul>
 8004720:	4603      	mov	r3, r0
 8004722:	4619      	mov	r1, r3
 8004724:	4620      	mov	r0, r4
 8004726:	f7fc fa25 	bl	8000b74 <__addsf3>
 800472a:	4603      	mov	r3, r0
 800472c:	653b      	str	r3, [r7, #80]	@ 0x50
            correction_G = filteredPidOut;
 800472e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (fabs(filteredAngle) < 0.0015f) {
 8004732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004738:	491b      	ldr	r1, [pc, #108]	@ (80047a8 <walk+0x20c>)
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc fcc0 	bl	80010c0 <__aeabi_fcmplt>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <walk+0x1b4>
            offsetAngles = TEMP;
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004748:	65bb      	str	r3, [r7, #88]	@ 0x58
            filteredAngle = 0;
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	657b      	str	r3, [r7, #84]	@ 0x54
        }

        // IR Feedback With Both Walls
        if (IR_READINGS[0] < 3870) { correction_IR_RIGHT = 70.0f; }
 8004750:	4b16      	ldr	r3, [pc, #88]	@ (80047ac <walk+0x210>)
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	f640 721d 	movw	r2, #3869	@ 0xf1d
 8004758:	4293      	cmp	r3, r2
 800475a:	d802      	bhi.n	8004762 <walk+0x1c6>
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <walk+0x214>)
 800475e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004760:	e002      	b.n	8004768 <walk+0x1cc>
        else { correction_IR_RIGHT = 0.0f; }
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	64bb      	str	r3, [r7, #72]	@ 0x48

        if (IR_READINGS[3] < 3870) { correction_IR_LEFT = 70.0f; }
 8004768:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <walk+0x210>)
 800476a:	88db      	ldrh	r3, [r3, #6]
 800476c:	f640 721d 	movw	r2, #3869	@ 0xf1d
 8004770:	4293      	cmp	r3, r2
 8004772:	d81f      	bhi.n	80047b4 <walk+0x218>
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <walk+0x214>)
 8004776:	647b      	str	r3, [r7, #68]	@ 0x44
 8004778:	e01f      	b.n	80047ba <walk+0x21e>
 800477a:	bf00      	nop
 800477c:	200018d0 	.word	0x200018d0
 8004780:	200018d4 	.word	0x200018d4
 8004784:	200018d8 	.word	0x200018d8
 8004788:	3fe00000 	.word	0x3fe00000
 800478c:	200018fc 	.word	0x200018fc
 8004790:	20001900 	.word	0x20001900
 8004794:	3f666666 	.word	0x3f666666
 8004798:	3b449ba6 	.word	0x3b449ba6
 800479c:	0800a25c 	.word	0x0800a25c
 80047a0:	2000190c 	.word	0x2000190c
 80047a4:	2000184c 	.word	0x2000184c
 80047a8:	3ac49ba6 	.word	0x3ac49ba6
 80047ac:	20001904 	.word	0x20001904
 80047b0:	428c0000 	.word	0x428c0000
        else { correction_IR_LEFT = 0.0f; }
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44

        float rightRPM = baseRPM + correction_G + correction_IR_RIGHT;
 80047ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80047bc:	68b8      	ldr	r0, [r7, #8]
 80047be:	f7fc f9d9 	bl	8000b74 <__addsf3>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4619      	mov	r1, r3
 80047c6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80047c8:	f7fc f9d4 	bl	8000b74 <__addsf3>
 80047cc:	4603      	mov	r3, r0
 80047ce:	61bb      	str	r3, [r7, #24]
        float leftRPM  = baseRPM - correction_G + correction_IR_LEFT;
 80047d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f7fc f9cc 	bl	8000b70 <__aeabi_fsub>
 80047d8:	4603      	mov	r3, r0
 80047da:	4619      	mov	r1, r3
 80047dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80047de:	f7fc f9c9 	bl	8000b74 <__addsf3>
 80047e2:	4603      	mov	r3, r0
 80047e4:	617b      	str	r3, [r7, #20]

        core_MotorPidControl(&MR, FORWARD, rightRPM);
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	2100      	movs	r1, #0
 80047ea:	4858      	ldr	r0, [pc, #352]	@ (800494c <walk+0x3b0>)
 80047ec:	f7ff fc0c 	bl	8004008 <core_MotorPidControl>
        core_MotorPidControl(&ML, FORWARD, leftRPM);
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	2100      	movs	r1, #0
 80047f4:	4856      	ldr	r0, [pc, #344]	@ (8004950 <walk+0x3b4>)
 80047f6:	f7ff fc07 	bl	8004008 <core_MotorPidControl>
    while ((avgEncoderCount - startCount) < targetCount) {
 80047fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fa67 	bl	8000cd4 <__aeabi_ui2f>
 8004806:	4603      	mov	r3, r0
 8004808:	4619      	mov	r1, r3
 800480a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800480c:	f7fc fc76 	bl	80010fc <__aeabi_fcmpgt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f47f af13 	bne.w	800463e <walk+0xa2>
    }

    if (State == STOP) {
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	2b02      	cmp	r3, #2
 800481c:	f040 808f 	bne.w	800493e <walk+0x3a2>
		// ---------------- POST-STABILIZATION LOOP ----------------
		alphaAngle = 1.0f;    // smoothing factor for angle
 8004820:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
		alphaPID   = 0.001f;   // smoothing factor for PID output
 8004826:	4b4b      	ldr	r3, [pc, #300]	@ (8004954 <walk+0x3b8>)
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
		DEADBAND_G   = 0.9f;   // ignore small drift
 800482a:	4b4b      	ldr	r3, [pc, #300]	@ (8004958 <walk+0x3bc>)
 800482c:	62bb      	str	r3, [r7, #40]	@ 0x28

		while (1) {
		TEMP = core_calcAngles();
 800482e:	f7ff fd91 	bl	8004354 <core_calcAngles>
 8004832:	6378      	str	r0, [r7, #52]	@ 0x34

		// Apply offset
		currAngle = TEMP - offsetAngles;
 8004834:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004836:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004838:	f7fc f99a 	bl	8000b70 <__aeabi_fsub>
 800483c:	4603      	mov	r3, r0
 800483e:	63bb      	str	r3, [r7, #56]	@ 0x38

		// Low-pass filter (smooth drift + noise)
		filteredAngle = (1.0f - alphaAngle) * filteredAngle + alphaAngle * currAngle;
 8004840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004842:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004846:	f7fc f993 	bl	8000b70 <__aeabi_fsub>
 800484a:	4603      	mov	r3, r0
 800484c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fa98 	bl	8000d84 <__aeabi_fmul>
 8004854:	4603      	mov	r3, r0
 8004856:	461c      	mov	r4, r3
 8004858:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800485a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800485c:	f7fc fa92 	bl	8000d84 <__aeabi_fmul>
 8004860:	4603      	mov	r3, r0
 8004862:	4619      	mov	r1, r3
 8004864:	4620      	mov	r0, r4
 8004866:	f7fc f985 	bl	8000b74 <__addsf3>
 800486a:	4603      	mov	r3, r0
 800486c:	657b      	str	r3, [r7, #84]	@ 0x54

		if (filteredAngle > DEADBAND_G) {
 800486e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004870:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004872:	f7fc fc43 	bl	80010fc <__aeabi_fcmpgt>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d028      	beq.n	80048ce <walk+0x332>
			float rawPidOut = pidController_compute(&STABLE_GYRO_PID, 0, filteredAngle);
 800487c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	4836      	ldr	r0, [pc, #216]	@ (800495c <walk+0x3c0>)
 8004884:	f7fc fd58 	bl	8001338 <pidController_compute>
 8004888:	6238      	str	r0, [r7, #32]

			// Low-pass filter PID output
			filteredPidOut = (1.0f - alphaPID) * filteredPidOut + alphaPID * rawPidOut;
 800488a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800488c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004890:	f7fc f96e 	bl	8000b70 <__aeabi_fsub>
 8004894:	4603      	mov	r3, r0
 8004896:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc fa73 	bl	8000d84 <__aeabi_fmul>
 800489e:	4603      	mov	r3, r0
 80048a0:	461c      	mov	r4, r3
 80048a2:	6a39      	ldr	r1, [r7, #32]
 80048a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048a6:	f7fc fa6d 	bl	8000d84 <__aeabi_fmul>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4619      	mov	r1, r3
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7fc f960 	bl	8000b74 <__addsf3>
 80048b4:	4603      	mov	r3, r0
 80048b6:	653b      	str	r3, [r7, #80]	@ 0x50

			core_MotorPidControl(&MR, BACKWARD, filteredPidOut);
 80048b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048ba:	2101      	movs	r1, #1
 80048bc:	4823      	ldr	r0, [pc, #140]	@ (800494c <walk+0x3b0>)
 80048be:	f7ff fba3 	bl	8004008 <core_MotorPidControl>
			core_MotorPidControl(&ML, FORWARD , filteredPidOut);
 80048c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048c4:	2100      	movs	r1, #0
 80048c6:	4822      	ldr	r0, [pc, #136]	@ (8004950 <walk+0x3b4>)
 80048c8:	f7ff fb9e 	bl	8004008 <core_MotorPidControl>
 80048cc:	e7af      	b.n	800482e <walk+0x292>
		} else if (filteredAngle < -DEADBAND_G) {
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80048d4:	4619      	mov	r1, r3
 80048d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80048d8:	f7fc fbf2 	bl	80010c0 <__aeabi_fcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <walk+0x350>
			// Low-pass filter PID output
			filteredPidOut = (1.0f - alphaPID) * filteredPidOut + alphaPID * rawPidOut;

			core_MotorPidControl(&MR, FORWARD , filteredPidOut);
			core_MotorPidControl(&ML, BACKWARD, filteredPidOut);
		} else break;
 80048e2:	bf00      	nop

		}
		// Stop motors once aligned
		remi(HALT);
 80048e4:	2008      	movs	r0, #8
 80048e6:	f7ff fdeb 	bl	80044c0 <remi>
 80048ea:	e028      	b.n	800493e <walk+0x3a2>
			float rawPidOut = pidController_compute(&STABLE_GYRO_PID, 0, filteredAngle);
 80048ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	481a      	ldr	r0, [pc, #104]	@ (800495c <walk+0x3c0>)
 80048f4:	f7fc fd20 	bl	8001338 <pidController_compute>
 80048f8:	6278      	str	r0, [r7, #36]	@ 0x24
			filteredPidOut = (1.0f - alphaPID) * filteredPidOut + alphaPID * rawPidOut;
 80048fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004900:	f7fc f936 	bl	8000b70 <__aeabi_fsub>
 8004904:	4603      	mov	r3, r0
 8004906:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004908:	4618      	mov	r0, r3
 800490a:	f7fc fa3b 	bl	8000d84 <__aeabi_fmul>
 800490e:	4603      	mov	r3, r0
 8004910:	461c      	mov	r4, r3
 8004912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004916:	f7fc fa35 	bl	8000d84 <__aeabi_fmul>
 800491a:	4603      	mov	r3, r0
 800491c:	4619      	mov	r1, r3
 800491e:	4620      	mov	r0, r4
 8004920:	f7fc f928 	bl	8000b74 <__addsf3>
 8004924:	4603      	mov	r3, r0
 8004926:	653b      	str	r3, [r7, #80]	@ 0x50
			core_MotorPidControl(&MR, FORWARD , filteredPidOut);
 8004928:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800492a:	2100      	movs	r1, #0
 800492c:	4807      	ldr	r0, [pc, #28]	@ (800494c <walk+0x3b0>)
 800492e:	f7ff fb6b 	bl	8004008 <core_MotorPidControl>
			core_MotorPidControl(&ML, BACKWARD, filteredPidOut);
 8004932:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004934:	2101      	movs	r1, #1
 8004936:	4806      	ldr	r0, [pc, #24]	@ (8004950 <walk+0x3b4>)
 8004938:	f7ff fb66 	bl	8004008 <core_MotorPidControl>
		TEMP = core_calcAngles();
 800493c:	e777      	b.n	800482e <walk+0x292>
    }
    uart_send("STRAIGHT DONE\n");
 800493e:	4808      	ldr	r0, [pc, #32]	@ (8004960 <walk+0x3c4>)
 8004940:	f002 fa0a 	bl	8006d58 <uart_send>
}
 8004944:	3764      	adds	r7, #100	@ 0x64
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	20001768 	.word	0x20001768
 8004950:	20001788 	.word	0x20001788
 8004954:	3a83126f 	.word	0x3a83126f
 8004958:	3f666666 	.word	0x3f666666
 800495c:	2000184c 	.word	0x2000184c
 8004960:	0800a26c 	.word	0x0800a26c

08004964 <spin>:

void spin(float targetAngle) {
 8004964:	b5b0      	push	{r4, r5, r7, lr}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    remi(READWALLS);
 800496c:	2007      	movs	r0, #7
 800496e:	f7ff fda7 	bl	80044c0 <remi>
    if ((walls & 0b0100) || (walls & 0b0010)) {
 8004972:	4b60      	ldr	r3, [pc, #384]	@ (8004af4 <spin+0x190>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <spin+0x26>
 800497e:	4b5d      	ldr	r3, [pc, #372]	@ (8004af4 <spin+0x190>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <spin+0x30>
    	walk(5.0f,200.0f,0);
 800498a:	2200      	movs	r2, #0
 800498c:	495a      	ldr	r1, [pc, #360]	@ (8004af8 <spin+0x194>)
 800498e:	485b      	ldr	r0, [pc, #364]	@ (8004afc <spin+0x198>)
 8004990:	f7ff fe04 	bl	800459c <walk>
    }

	resetPID();
 8004994:	f000 faa8 	bl	8004ee8 <resetPID>

	lastGyroTime = timers_stopwatch();
 8004998:	f002 f986 	bl	8006ca8 <timers_stopwatch>
 800499c:	4603      	mov	r3, r0
 800499e:	4a58      	ldr	r2, [pc, #352]	@ (8004b00 <spin+0x19c>)
 80049a0:	6013      	str	r3, [r2, #0]
	spunAngles = 0.0f;
 80049a2:	4b58      	ldr	r3, [pc, #352]	@ (8004b04 <spin+0x1a0>)
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

	float offsetAngles = fabs(core_calcAngles());
 80049aa:	f7ff fcd3 	bl	8004354 <core_calcAngles>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049b4:	61fb      	str	r3, [r7, #28]
	float currAngle = 0;
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]

	// Filters
	float filteredAngle  = 0.0f;
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
	float filteredPidOut = 0.0f;
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	623b      	str	r3, [r7, #32]
	float alphaAngle = 0.5f;   // gyro smoothing
 80049c8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80049cc:	617b      	str	r3, [r7, #20]
	float alphaPID   = 0.3f;   // correction smoothing
 80049ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004b08 <spin+0x1a4>)
 80049d0:	613b      	str	r3, [r7, #16]

	MOTORDIR dir = (targetAngle > 0.0f) ? FORWARD : BACKWARD;
 80049d2:	2301      	movs	r3, #1
 80049d4:	461c      	mov	r4, r3
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fb8e 	bl	80010fc <__aeabi_fcmpgt>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <spin+0x86>
 80049e6:	2300      	movs	r3, #0
 80049e8:	461c      	mov	r4, r3
 80049ea:	b2e3      	uxtb	r3, r4
 80049ec:	f083 0301 	eor.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	73fb      	strb	r3, [r7, #15]
	targetAngle = fabs(targetAngle);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049fa:	607b      	str	r3, [r7, #4]

	do {
		currAngle = (fabs(core_calcAngles()) - offsetAngles);
 80049fc:	f7ff fcaa 	bl	8004354 <core_calcAngles>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fd0e 	bl	8000428 <__aeabi_f2d>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	69f8      	ldr	r0, [r7, #28]
 8004a12:	f7fb fd09 	bl	8000428 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f7fb fba3 	bl	8000168 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f7fc f84d 	bl	8000ac8 <__aeabi_d2f>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]
		filteredAngle = (1.0f - alphaAngle) * filteredAngle + alphaAngle * currAngle;
 8004a32:	6979      	ldr	r1, [r7, #20]
 8004a34:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a38:	f7fc f89a 	bl	8000b70 <__aeabi_fsub>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc f99f 	bl	8000d84 <__aeabi_fmul>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461c      	mov	r4, r3
 8004a4a:	69b9      	ldr	r1, [r7, #24]
 8004a4c:	6978      	ldr	r0, [r7, #20]
 8004a4e:	f7fc f999 	bl	8000d84 <__aeabi_fmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4619      	mov	r1, r3
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7fc f88c 	bl	8000b74 <__addsf3>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24

		float rawPidOut = pidController_compute(&SPIN_PID, targetAngle, filteredAngle);
 8004a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4829      	ldr	r0, [pc, #164]	@ (8004b0c <spin+0x1a8>)
 8004a66:	f7fc fc67 	bl	8001338 <pidController_compute>
 8004a6a:	60b8      	str	r0, [r7, #8]
		filteredPidOut = (1.0f - alphaPID) * filteredPidOut + alphaPID * rawPidOut;
 8004a6c:	6939      	ldr	r1, [r7, #16]
 8004a6e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004a72:	f7fc f87d 	bl	8000b70 <__aeabi_fsub>
 8004a76:	4603      	mov	r3, r0
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc f982 	bl	8000d84 <__aeabi_fmul>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461c      	mov	r4, r3
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f7fc f97c 	bl	8000d84 <__aeabi_fmul>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7fc f86f 	bl	8000b74 <__addsf3>
 8004a96:	4603      	mov	r3, r0
 8004a98:	623b      	str	r3, [r7, #32]

		core_MotorPidControl(&MR, dir , filteredPidOut); //uart_send("Right:%f\n",MR.CURR_RPM);
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	481b      	ldr	r0, [pc, #108]	@ (8004b10 <spin+0x1ac>)
 8004aa2:	f7ff fab1 	bl	8004008 <core_MotorPidControl>
		core_MotorPidControl(&ML, !dir, filteredPidOut); //uart_send("Left:%f\n" ,ML.CURR_RPM);
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	6a3a      	ldr	r2, [r7, #32]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4817      	ldr	r0, [pc, #92]	@ (8004b14 <spin+0x1b0>)
 8004ab8:	f7ff faa6 	bl	8004008 <core_MotorPidControl>

		//uart_send("pidOut:%f\n", filteredPidOut);
		//uart_send("Angle:%f\n", filteredAngle);
	} while (currAngle < (targetAngle-3.5));
 8004abc:	69b8      	ldr	r0, [r7, #24]
 8004abe:	f7fb fcb3 	bl	8000428 <__aeabi_f2d>
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	460d      	mov	r5, r1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fb fcae 	bl	8000428 <__aeabi_f2d>
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <spin+0x1b4>)
 8004ad2:	f7fb fb49 	bl	8000168 <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fb ff6d 	bl	80009bc <__aeabi_dcmplt>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d189      	bne.n	80049fc <spin+0x98>
	stop();
 8004ae8:	f000 f818 	bl	8004b1c <stop>
	//backCalibration();
}
 8004aec:	bf00      	nop
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}
 8004af4:	2000190c 	.word	0x2000190c
 8004af8:	43480000 	.word	0x43480000
 8004afc:	40a00000 	.word	0x40a00000
 8004b00:	200018fc 	.word	0x200018fc
 8004b04:	20001900 	.word	0x20001900
 8004b08:	3e99999a 	.word	0x3e99999a
 8004b0c:	2000188c 	.word	0x2000188c
 8004b10:	20001768 	.word	0x20001768
 8004b14:	20001788 	.word	0x20001788
 8004b18:	400c0000 	.word	0x400c0000

08004b1c <stop>:
void stop() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	motors_control(&MR, BACKWARD, 10000);
 8004b20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b24:	2101      	movs	r1, #1
 8004b26:	480f      	ldr	r0, [pc, #60]	@ (8004b64 <stop+0x48>)
 8004b28:	f000 face 	bl	80050c8 <motors_control>
	motors_control(&ML, BACKWARD, 10000);
 8004b2c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b30:	2101      	movs	r1, #1
 8004b32:	480d      	ldr	r0, [pc, #52]	@ (8004b68 <stop+0x4c>)
 8004b34:	f000 fac8 	bl	80050c8 <motors_control>
	systick_delayMillis(5);
 8004b38:	2005      	movs	r0, #5
 8004b3a:	f001 fd4d 	bl	80065d8 <systick_delayMillis>
	motors_control(&MR, STOP, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2102      	movs	r1, #2
 8004b42:	4808      	ldr	r0, [pc, #32]	@ (8004b64 <stop+0x48>)
 8004b44:	f000 fac0 	bl	80050c8 <motors_control>
	motors_control(&ML, STOP, 0);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4806      	ldr	r0, [pc, #24]	@ (8004b68 <stop+0x4c>)
 8004b4e:	f000 fabb 	bl	80050c8 <motors_control>
	systick_delayMillis(500);
 8004b52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b56:	f001 fd3f 	bl	80065d8 <systick_delayMillis>
	resetCore();
 8004b5a:	f000 fa15 	bl	8004f88 <resetCore>
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20001768 	.word	0x20001768
 8004b68:	20001788 	.word	0x20001788

08004b6c <readWalls>:
uint8_t readWalls() {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0

	walls = 0;
 8004b70:	4b3e      	ldr	r3, [pc, #248]	@ (8004c6c <readWalls+0x100>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
	walls = (IR_READINGS[0] <= 4050) ? (walls | (1 << 0)) : (walls & ~(1 << 0));
 8004b76:	4b3e      	ldr	r3, [pc, #248]	@ (8004c70 <readWalls+0x104>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d805      	bhi.n	8004b8e <readWalls+0x22>
 8004b82:	4b3a      	ldr	r3, [pc, #232]	@ (8004c6c <readWalls+0x100>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e004      	b.n	8004b98 <readWalls+0x2c>
 8004b8e:	4b37      	ldr	r3, [pc, #220]	@ (8004c6c <readWalls+0x100>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	4a34      	ldr	r2, [pc, #208]	@ (8004c6c <readWalls+0x100>)
 8004b9a:	7013      	strb	r3, [r2, #0]
	walls = (IR_READINGS[1] <= 4050) ? (walls | (1 << 1)) : (walls & ~(1 << 1));
 8004b9c:	4b34      	ldr	r3, [pc, #208]	@ (8004c70 <readWalls+0x104>)
 8004b9e:	885b      	ldrh	r3, [r3, #2]
 8004ba0:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d805      	bhi.n	8004bb4 <readWalls+0x48>
 8004ba8:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <readWalls+0x100>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e004      	b.n	8004bbe <readWalls+0x52>
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <readWalls+0x100>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f023 0302 	bic.w	r3, r3, #2
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8004c6c <readWalls+0x100>)
 8004bc0:	7013      	strb	r3, [r2, #0]
	walls = (IR_READINGS[2] <= 4050) ? (walls | (1 << 2)) : (walls & ~(1 << 2));
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c70 <readWalls+0x104>)
 8004bc4:	889b      	ldrh	r3, [r3, #4]
 8004bc6:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d805      	bhi.n	8004bda <readWalls+0x6e>
 8004bce:	4b27      	ldr	r3, [pc, #156]	@ (8004c6c <readWalls+0x100>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e004      	b.n	8004be4 <readWalls+0x78>
 8004bda:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <readWalls+0x100>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f023 0304 	bic.w	r3, r3, #4
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <readWalls+0x100>)
 8004be6:	7013      	strb	r3, [r2, #0]
	walls = (IR_READINGS[3] <= 4050) ? (walls | (1 << 3)) : (walls & ~(1 << 3));
 8004be8:	4b21      	ldr	r3, [pc, #132]	@ (8004c70 <readWalls+0x104>)
 8004bea:	88db      	ldrh	r3, [r3, #6]
 8004bec:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d805      	bhi.n	8004c00 <readWalls+0x94>
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <readWalls+0x100>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e004      	b.n	8004c0a <readWalls+0x9e>
 8004c00:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <readWalls+0x100>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	f023 0308 	bic.w	r3, r3, #8
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <readWalls+0x100>)
 8004c0c:	7013      	strb	r3, [r2, #0]

	//uart_send("Sensor 1 = %d, Sensor 2 = %d, Sensor 3 = %d, Sensor 4 = %d\n",IR_READINGS[0],IR_READINGS[1],IR_READINGS[2],IR_READINGS[3]);

	gpio_writePin(rightLedPort, rightLedPin, (walls & 0b0001) ? 1 : 0);
 8004c0e:	4b17      	ldr	r3, [pc, #92]	@ (8004c6c <readWalls+0x100>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	4815      	ldr	r0, [pc, #84]	@ (8004c74 <readWalls+0x108>)
 8004c1e:	f001 f975 	bl	8005f0c <gpio_writePin>
	gpio_writePin(frontLedPort, frontLedPin, ((walls & 0b0100) && (walls & 0b0010)) ? 1 : 0);
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <readWalls+0x100>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <readWalls+0xd2>
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <readWalls+0x100>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <readWalls+0xd2>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <readWalls+0xd4>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	2105      	movs	r1, #5
 8004c46:	480b      	ldr	r0, [pc, #44]	@ (8004c74 <readWalls+0x108>)
 8004c48:	f001 f960 	bl	8005f0c <gpio_writePin>
	gpio_writePin(leftLedPort , leftLedPin , (walls & 0b1000) ? 1 : 0);
 8004c4c:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <readWalls+0x100>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	10db      	asrs	r3, r3, #3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2106      	movs	r1, #6
 8004c5e:	4805      	ldr	r0, [pc, #20]	@ (8004c74 <readWalls+0x108>)
 8004c60:	f001 f954 	bl	8005f0c <gpio_writePin>

	return walls;
 8004c64:	4b01      	ldr	r3, [pc, #4]	@ (8004c6c <readWalls+0x100>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	2000190c 	.word	0x2000190c
 8004c70:	20001904 	.word	0x20001904
 8004c74:	40010800 	.word	0x40010800

08004c78 <frontCalibration>:
        else {
            break;
        }
    }
}
void frontCalibration() {
 8004c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c7c:	b089      	sub	sp, #36	@ 0x24
 8004c7e:	af00      	add	r7, sp, #0
    // Target ADC values (tune closer/further here)
    const uint16_t DEADBAND     = 40;     // acceptable error
 8004c80:	2328      	movs	r3, #40	@ 0x28
 8004c82:	82bb      	strh	r3, [r7, #20]

    // Low-pass filter states
    float pidOutL_filt = 0;
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
    float pidOutR_filt = 0;
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    const float alpha = 0.6f; // smoothing factor (0..1)
 8004c90:	4b75      	ldr	r3, [pc, #468]	@ (8004e68 <frontCalibration+0x1f0>)
 8004c92:	613b      	str	r3, [r7, #16]

    uart_send("FRONT CALIBRATION START\n");
 8004c94:	4875      	ldr	r0, [pc, #468]	@ (8004e6c <frontCalibration+0x1f4>)
 8004c96:	f002 f85f 	bl	8006d58 <uart_send>

    uint8_t rightDone = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    uint8_t leftDone  = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75bb      	strb	r3, [r7, #22]

    while(1) {
        readWalls(); // DMA updated
 8004ca2:	f7ff ff63 	bl	8004b6c <readWalls>

        // --- Left front sensor (IR_READINGS[2]) ---
        if (walls & 0b0100) {
 8004ca6:	4b72      	ldr	r3, [pc, #456]	@ (8004e70 <frontCalibration+0x1f8>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d05c      	beq.n	8004d6c <frontCalibration+0xf4>
            int errorL = IR_READINGS[2] - LEFT_GOAL;  // far = positive
 8004cb2:	4b70      	ldr	r3, [pc, #448]	@ (8004e74 <frontCalibration+0x1fc>)
 8004cb4:	889b      	ldrh	r3, [r3, #4]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <frontCalibration+0x200>)
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	60fb      	str	r3, [r7, #12]
            if (fabs(errorL) <= DEADBAND) {
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7fb fb9f 	bl	8000404 <__aeabi_i2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4614      	mov	r4, r2
 8004ccc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004cd0:	8abb      	ldrh	r3, [r7, #20]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fb fb96 	bl	8000404 <__aeabi_i2d>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb fe76 	bl	80009d0 <__aeabi_dcmple>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <frontCalibration+0x84>
                core_MotorPidControl(&ML, STOP, 0);
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4862      	ldr	r0, [pc, #392]	@ (8004e7c <frontCalibration+0x204>)
 8004cf2:	f7ff f989 	bl	8004008 <core_MotorPidControl>
                leftDone = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75bb      	strb	r3, [r7, #22]
 8004cfa:	e03d      	b.n	8004d78 <frontCalibration+0x100>
            } else {
                float pidOutRaw = pidController_compute(&IR_PID, LEFT_GOAL, IR_READINGS[2]);
 8004cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <frontCalibration+0x200>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb ffe7 	bl	8000cd4 <__aeabi_ui2f>
 8004d06:	4606      	mov	r6, r0
 8004d08:	4b5a      	ldr	r3, [pc, #360]	@ (8004e74 <frontCalibration+0x1fc>)
 8004d0a:	889b      	ldrh	r3, [r3, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb ffe1 	bl	8000cd4 <__aeabi_ui2f>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	4631      	mov	r1, r6
 8004d18:	4859      	ldr	r0, [pc, #356]	@ (8004e80 <frontCalibration+0x208>)
 8004d1a:	f7fc fb0d 	bl	8001338 <pidController_compute>
 8004d1e:	60b8      	str	r0, [r7, #8]
                pidOutL_filt = alpha * pidOutRaw + (1 - alpha) * pidOutL_filt;
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	6938      	ldr	r0, [r7, #16]
 8004d24:	f7fc f82e 	bl	8000d84 <__aeabi_fmul>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461e      	mov	r6, r3
 8004d2c:	6939      	ldr	r1, [r7, #16]
 8004d2e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004d32:	f7fb ff1d 	bl	8000b70 <__aeabi_fsub>
 8004d36:	4603      	mov	r3, r0
 8004d38:	69f9      	ldr	r1, [r7, #28]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc f822 	bl	8000d84 <__aeabi_fmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4619      	mov	r1, r3
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7fb ff15 	bl	8000b74 <__addsf3>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	61fb      	str	r3, [r7, #28]

                if (errorL > 0) core_MotorPidControl(&ML, FORWARD , pidOutL_filt);  // too far → forward
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	dd05      	ble.n	8004d60 <frontCalibration+0xe8>
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	2100      	movs	r1, #0
 8004d58:	4848      	ldr	r0, [pc, #288]	@ (8004e7c <frontCalibration+0x204>)
 8004d5a:	f7ff f955 	bl	8004008 <core_MotorPidControl>
 8004d5e:	e00b      	b.n	8004d78 <frontCalibration+0x100>
                else            core_MotorPidControl(&ML, BACKWARD, pidOutL_filt); // too close → back off
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	2101      	movs	r1, #1
 8004d64:	4845      	ldr	r0, [pc, #276]	@ (8004e7c <frontCalibration+0x204>)
 8004d66:	f7ff f94f 	bl	8004008 <core_MotorPidControl>
 8004d6a:	e005      	b.n	8004d78 <frontCalibration+0x100>
            }
        } else {
            core_MotorPidControl(&ML, STOP, 0);
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	2102      	movs	r1, #2
 8004d72:	4842      	ldr	r0, [pc, #264]	@ (8004e7c <frontCalibration+0x204>)
 8004d74:	f7ff f948 	bl	8004008 <core_MotorPidControl>
        }

        // --- Right front sensor (IR_READINGS[1]) ---
        if (walls & 0b0010) {
 8004d78:	4b3d      	ldr	r3, [pc, #244]	@ (8004e70 <frontCalibration+0x1f8>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d05c      	beq.n	8004e3e <frontCalibration+0x1c6>
            int errorR = IR_READINGS[1] - RIGHT_GOAL;
 8004d84:	4b3b      	ldr	r3, [pc, #236]	@ (8004e74 <frontCalibration+0x1fc>)
 8004d86:	885b      	ldrh	r3, [r3, #2]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <frontCalibration+0x20c>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	607b      	str	r3, [r7, #4]
            if (fabs(errorR) <= DEADBAND) {
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fb fb36 	bl	8000404 <__aeabi_i2d>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4690      	mov	r8, r2
 8004d9e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8004da2:	8abb      	ldrh	r3, [r7, #20]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fb2d 	bl	8000404 <__aeabi_i2d>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4640      	mov	r0, r8
 8004db0:	4649      	mov	r1, r9
 8004db2:	f7fb fe0d 	bl	80009d0 <__aeabi_dcmple>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <frontCalibration+0x156>
                core_MotorPidControl(&MR, STOP, 0);
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4831      	ldr	r0, [pc, #196]	@ (8004e88 <frontCalibration+0x210>)
 8004dc4:	f7ff f920 	bl	8004008 <core_MotorPidControl>
                rightDone = 1;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
 8004dcc:	e03d      	b.n	8004e4a <frontCalibration+0x1d2>
            } else {
                float pidOutRaw = pidController_compute(&IR_PID, RIGHT_GOAL, IR_READINGS[1]);
 8004dce:	4b2d      	ldr	r3, [pc, #180]	@ (8004e84 <frontCalibration+0x20c>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb ff7e 	bl	8000cd4 <__aeabi_ui2f>
 8004dd8:	4606      	mov	r6, r0
 8004dda:	4b26      	ldr	r3, [pc, #152]	@ (8004e74 <frontCalibration+0x1fc>)
 8004ddc:	885b      	ldrh	r3, [r3, #2]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb ff78 	bl	8000cd4 <__aeabi_ui2f>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	4631      	mov	r1, r6
 8004dea:	4825      	ldr	r0, [pc, #148]	@ (8004e80 <frontCalibration+0x208>)
 8004dec:	f7fc faa4 	bl	8001338 <pidController_compute>
 8004df0:	6038      	str	r0, [r7, #0]
                pidOutR_filt = alpha * pidOutRaw + (1 - alpha) * pidOutR_filt;
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6938      	ldr	r0, [r7, #16]
 8004df6:	f7fb ffc5 	bl	8000d84 <__aeabi_fmul>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461e      	mov	r6, r3
 8004dfe:	6939      	ldr	r1, [r7, #16]
 8004e00:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004e04:	f7fb feb4 	bl	8000b70 <__aeabi_fsub>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb ffb9 	bl	8000d84 <__aeabi_fmul>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4619      	mov	r1, r3
 8004e16:	4630      	mov	r0, r6
 8004e18:	f7fb feac 	bl	8000b74 <__addsf3>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	61bb      	str	r3, [r7, #24]

                if (errorR > 0) core_MotorPidControl(&MR, FORWARD, pidOutR_filt);  // too far → forward
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dd05      	ble.n	8004e32 <frontCalibration+0x1ba>
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4817      	ldr	r0, [pc, #92]	@ (8004e88 <frontCalibration+0x210>)
 8004e2c:	f7ff f8ec 	bl	8004008 <core_MotorPidControl>
 8004e30:	e00b      	b.n	8004e4a <frontCalibration+0x1d2>
                else            core_MotorPidControl(&MR, BACKWARD, pidOutR_filt); // too close → back off
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	2101      	movs	r1, #1
 8004e36:	4814      	ldr	r0, [pc, #80]	@ (8004e88 <frontCalibration+0x210>)
 8004e38:	f7ff f8e6 	bl	8004008 <core_MotorPidControl>
 8004e3c:	e005      	b.n	8004e4a <frontCalibration+0x1d2>
            }
        } else {
            core_MotorPidControl(&MR, STOP, 0);
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	2102      	movs	r1, #2
 8004e44:	4810      	ldr	r0, [pc, #64]	@ (8004e88 <frontCalibration+0x210>)
 8004e46:	f7ff f8df 	bl	8004008 <core_MotorPidControl>
        }


        if (rightDone && leftDone) { break; }
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f43f af28 	beq.w	8004ca2 <frontCalibration+0x2a>
 8004e52:	7dbb      	ldrb	r3, [r7, #22]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d100      	bne.n	8004e5a <frontCalibration+0x1e2>
        readWalls(); // DMA updated
 8004e58:	e723      	b.n	8004ca2 <frontCalibration+0x2a>
        if (rightDone && leftDone) { break; }
 8004e5a:	bf00      	nop
    }
}
 8004e5c:	bf00      	nop
 8004e5e:	3724      	adds	r7, #36	@ 0x24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e66:	bf00      	nop
 8004e68:	3f19999a 	.word	0x3f19999a
 8004e6c:	0800a29c 	.word	0x0800a29c
 8004e70:	2000190c 	.word	0x2000190c
 8004e74:	20001904 	.word	0x20001904
 8004e78:	20000410 	.word	0x20000410
 8004e7c:	20001788 	.word	0x20001788
 8004e80:	200018ac 	.word	0x200018ac
 8004e84:	20000412 	.word	0x20000412
 8004e88:	20001768 	.word	0x20001768

08004e8c <backCalibration>:

void backCalibration(ACTIONS x) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
	motors_control(&MR, BACKWARD, 4000);
 8004e96:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	480e      	ldr	r0, [pc, #56]	@ (8004ed8 <backCalibration+0x4c>)
 8004e9e:	f000 f913 	bl	80050c8 <motors_control>
	motors_control(&ML, BACKWARD, 4000);
 8004ea2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	480c      	ldr	r0, [pc, #48]	@ (8004edc <backCalibration+0x50>)
 8004eaa:	f000 f90d 	bl	80050c8 <motors_control>
	systick_delayMillis(1000);
 8004eae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004eb2:	f001 fb91 	bl	80065d8 <systick_delayMillis>
	stop();
 8004eb6:	f7ff fe31 	bl	8004b1c <stop>
	systick_delayMillis(500);
 8004eba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ebe:	f001 fb8b 	bl	80065d8 <systick_delayMillis>
	walk( 45.0f, 200.0f, x);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4906      	ldr	r1, [pc, #24]	@ (8004ee0 <backCalibration+0x54>)
 8004ec8:	4806      	ldr	r0, [pc, #24]	@ (8004ee4 <backCalibration+0x58>)
 8004eca:	f7ff fb67 	bl	800459c <walk>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20001768 	.word	0x20001768
 8004edc:	20001788 	.word	0x20001788
 8004ee0:	43480000 	.word	0x43480000
 8004ee4:	42340000 	.word	0x42340000

08004ee8 <resetPID>:
void resetPID() {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
	// PID integrals + histories
	RIGHT_SPEED_PID.integral = 0;
 8004eec:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <resetPID+0x90>)
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
	RIGHT_SPEED_PID.last_error = 0;
 8004ef4:	4b20      	ldr	r3, [pc, #128]	@ (8004f78 <resetPID+0x90>)
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	60da      	str	r2, [r3, #12]
	RIGHT_SPEED_PID.last_time = timers_stopwatch();
 8004efc:	f001 fed4 	bl	8006ca8 <timers_stopwatch>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fee6 	bl	8000cd4 <__aeabi_ui2f>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <resetPID+0x90>)
 8004f0c:	6113      	str	r3, [r2, #16]

	LEFT_SPEED_PID.integral = 0;
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <resetPID+0x94>)
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	615a      	str	r2, [r3, #20]
	LEFT_SPEED_PID.last_error = 0;
 8004f16:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <resetPID+0x94>)
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	60da      	str	r2, [r3, #12]
	LEFT_SPEED_PID.last_time = timers_stopwatch();
 8004f1e:	f001 fec3 	bl	8006ca8 <timers_stopwatch>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fed5 	bl	8000cd4 <__aeabi_ui2f>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4a13      	ldr	r2, [pc, #76]	@ (8004f7c <resetPID+0x94>)
 8004f2e:	6113      	str	r3, [r2, #16]

	SPIN_PID.integral  = 0;
 8004f30:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <resetPID+0x98>)
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
	SPIN_PID.last_error = 0;
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <resetPID+0x98>)
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	60da      	str	r2, [r3, #12]
	SPIN_PID.last_time = timers_stopwatch();
 8004f40:	f001 feb2 	bl	8006ca8 <timers_stopwatch>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fec4 	bl	8000cd4 <__aeabi_ui2f>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <resetPID+0x98>)
 8004f50:	6113      	str	r3, [r2, #16]

	IR_PID.integral  = 0;
 8004f52:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <resetPID+0x9c>)
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	615a      	str	r2, [r3, #20]
	IR_PID.last_error = 0;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <resetPID+0x9c>)
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]
	IR_PID.last_time = timers_stopwatch();
 8004f62:	f001 fea1 	bl	8006ca8 <timers_stopwatch>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fb feb3 	bl	8000cd4 <__aeabi_ui2f>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <resetPID+0x9c>)
 8004f72:	6113      	str	r3, [r2, #16]

}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000182c 	.word	0x2000182c
 8004f7c:	2000180c 	.word	0x2000180c
 8004f80:	2000188c 	.word	0x2000188c
 8004f84:	200018ac 	.word	0x200018ac

08004f88 <resetCore>:
void resetCore() {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
    // Encoders
    resetEncoders();
 8004f8c:	f7ff f8be 	bl	800410c <resetEncoders>
    lastSampleTime[0] = timers_stopwatch();
 8004f90:	f001 fe8a 	bl	8006ca8 <timers_stopwatch>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd0 <resetCore+0x48>)
 8004f98:	6013      	str	r3, [r2, #0]
    lastSampleTime[1] = timers_stopwatch();
 8004f9a:	f001 fe85 	bl	8006ca8 <timers_stopwatch>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <resetCore+0x48>)
 8004fa2:	6053      	str	r3, [r2, #4]
    lastCount[0] = 0;
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <resetCore+0x4c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
    lastCount[1] = 0;
 8004faa:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <resetCore+0x4c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]

    // RPM
    MR.CURR_RPM  = 0;
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <resetCore+0x50>)
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
    ML.CURR_RPM  = 0;
 8004fb8:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <resetCore+0x54>)
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]

    // Gyro
    spunAngles   = 0.0f;
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <resetCore+0x58>)
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

    //PID
    resetPID();
 8004fc8:	f7ff ff8e 	bl	8004ee8 <resetPID>
}
 8004fcc:	bf00      	nop
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200018e8 	.word	0x200018e8
 8004fd4:	200018f0 	.word	0x200018f0
 8004fd8:	20001768 	.word	0x20001768
 8004fdc:	20001788 	.word	0x20001788
 8004fe0:	20001900 	.word	0x20001900

08004fe4 <encoder_setupPin>:
#include "hardware/hardwareHeaderFiles/encoders.h"

// ---------- Setup ----------
void encoder_setupPin(Encoder* myEncoder,uint8_t channel, EDGESTATE ES, void (*callback)(void)) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	72fb      	strb	r3, [r7, #11]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	72bb      	strb	r3, [r7, #10]
	interrupts_attach(
		myEncoder->channels[channel-1].port,
 8004ff6:	7afb      	ldrb	r3, [r7, #11]
 8004ff8:	1e5a      	subs	r2, r3, #1
	interrupts_attach(
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
		myEncoder->channels[channel-1].pin,
 8005000:	7afb      	ldrb	r3, [r7, #11]
 8005002:	3b01      	subs	r3, #1
	interrupts_attach(
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	7919      	ldrb	r1, [r3, #4]
 800500c:	7aba      	ldrb	r2, [r7, #10]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f001 f91e 	bl	8006250 <interrupts_attach>
		ES,
		callback
	);
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <infraredSensors_setup>:
#include "hardware/hardwareHeaderFiles/infraredSensors.h"

void infraredSensors_setup(ADC_TypeDef* ADCx, INFRARED* IRx, uint8_t count, uint16_t* dmaBuffer) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0;i<count;i++) { adc_setupPin(ADCx, IRx[i].port, IRx[i].pin); }
 800502c:	2300      	movs	r3, #0
 800502e:	75fb      	strb	r3, [r7, #23]
 8005030:	e018      	b.n	8005064 <infraredSensors_setup+0x48>
 8005032:	7dfa      	ldrb	r2, [r7, #23]
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4413      	add	r3, r2
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	7dfa      	ldrb	r2, [r7, #23]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	461a      	mov	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4413      	add	r3, r2
 8005054:	7a1b      	ldrb	r3, [r3, #8]
 8005056:	461a      	mov	r2, r3
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fc75 	bl	8005948 <adc_setupPin>
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	3301      	adds	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
 8005064:	7dfa      	ldrb	r2, [r7, #23]
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d3e2      	bcc.n	8005032 <infraredSensors_setup+0x16>
	adc_start(ADCx, dmaBuffer, count);
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fdb9 	bl	8005bec <adc_start>
}
 800507a:	bf00      	nop
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <motors_setup>:
#include "hardware/hardwareHeaderFiles/motors.h"

// ---------- Setup ----------
void motors_setup(Motor* myMotor, uint16_t FREQ) {
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	807b      	strh	r3, [r7, #2]
    gpio_setupPin(myMotor->IN1port, myMotor->IN1pin, OUT_50, GP_PP);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	7919      	ldrb	r1, [r3, #4]
 8005096:	2300      	movs	r3, #0
 8005098:	2203      	movs	r2, #3
 800509a:	f000 fecd 	bl	8005e38 <gpio_setupPin>
    gpio_setupPin(myMotor->IN2port, myMotor->IN2pin, OUT_50, GP_PP);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6898      	ldr	r0, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7b19      	ldrb	r1, [r3, #12]
 80050a6:	2300      	movs	r3, #0
 80050a8:	2203      	movs	r2, #3
 80050aa:	f000 fec5 	bl	8005e38 <gpio_setupPin>

    timers_pwmSetup(myMotor->ENport, myMotor->ENpin, FREQ);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6918      	ldr	r0, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7d1b      	ldrb	r3, [r3, #20]
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	4619      	mov	r1, r3
 80050ba:	f001 fc99 	bl	80069f0 <timers_pwmSetup>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <motors_control>:

// ---------- Control ----------
void motors_control(Motor* myMotor, MOTORDIR dir, uint16_t speed) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
 80050d4:	4613      	mov	r3, r2
 80050d6:	803b      	strh	r3, [r7, #0]
	if (dir == STOP) { motors_stop(myMotor); return; }
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <motors_control+0x1e>
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f842 	bl	8005168 <motors_stop>
 80050e4:	e039      	b.n	800515a <motors_control+0x92>

	gpio_writePin(myMotor->IN1port, myMotor->IN1pin, dir);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	791b      	ldrb	r3, [r3, #4]
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f000 ff0b 	bl	8005f0c <gpio_writePin>
	gpio_writePin(myMotor->IN2port, myMotor->IN2pin, !dir);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6898      	ldr	r0, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7b19      	ldrb	r1, [r3, #12]
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	f000 fefe 	bl	8005f0c <gpio_writePin>

	uint16_t compare = (((timers_getTimer(myMotor->ENport, myMotor->ENpin))->ARR) * speed) / 10000.0;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	7d1b      	ldrb	r3, [r3, #20]
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f001 fc04 	bl	8006928 <timers_getTimer>
 8005120:	4603      	mov	r3, r0
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	883a      	ldrh	r2, [r7, #0]
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb f95a 	bl	80003e4 <__aeabi_ui2d>
 8005130:	a30b      	add	r3, pc, #44	@ (adr r3, 8005160 <motors_control+0x98>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb faf9 	bl	800072c <__aeabi_ddiv>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	f7fb fca1 	bl	8000a88 <__aeabi_d2uiz>
 8005146:	4603      	mov	r3, r0
 8005148:	81fb      	strh	r3, [r7, #14]
	timers_pwm(myMotor->ENport, myMotor->ENpin, compare);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6918      	ldr	r0, [r3, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7d1b      	ldrb	r3, [r3, #20]
 8005152:	89fa      	ldrh	r2, [r7, #14]
 8005154:	4619      	mov	r1, r3
 8005156:	f001 fd37 	bl	8006bc8 <timers_pwm>
}
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	00000000 	.word	0x00000000
 8005164:	40c38800 	.word	0x40c38800

08005168 <motors_stop>:
void motors_stop(Motor* myMotor) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	timers_pwm(myMotor->ENport, myMotor->ENpin, 0);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6918      	ldr	r0, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7d1b      	ldrb	r3, [r3, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	4619      	mov	r1, r3
 800517c:	f001 fd24 	bl	8006bc8 <timers_pwm>
	gpio_writePin(myMotor->IN1port, myMotor->IN1pin, LOW);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	791b      	ldrb	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	4619      	mov	r1, r3
 800518c:	f000 febe 	bl	8005f0c <gpio_writePin>
	gpio_writePin(myMotor->IN2port, myMotor->IN2pin, LOW);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6898      	ldr	r0, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7b1b      	ldrb	r3, [r3, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	4619      	mov	r1, r3
 800519c:	f000 feb6 	bl	8005f0c <gpio_writePin>
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <mpu6050_setup>:

/* ========================================================================================================================
 *                                                    MPU SETUP FUNCTION
 * ======================================================================================================================== */

void mpu6050_setup(MPU6050* myMPU, uint8_t mode, uint8_t dlpf, uint8_t config, uint8_t altPins) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	70fb      	strb	r3, [r7, #3]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70bb      	strb	r3, [r7, #2]
 80051be:	4613      	mov	r3, r2
 80051c0:	707b      	strb	r3, [r7, #1]
	i2c_setup(myMPU->I2Cx, mode, altPins);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	7c3a      	ldrb	r2, [r7, #16]
 80051c8:	78f9      	ldrb	r1, [r7, #3]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fee6 	bl	8005f9c <i2c_setup>
	// Apply MPU6050 configuration from struct
	mpu6050_tx(myMPU, 0x6B, 0x80);   // Reset
 80051d0:	2280      	movs	r2, #128	@ 0x80
 80051d2:	216b      	movs	r1, #107	@ 0x6b
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f88c 	bl	80052f2 <mpu6050_tx>
	systick_delayMillis(100);
 80051da:	2064      	movs	r0, #100	@ 0x64
 80051dc:	f001 f9fc 	bl	80065d8 <systick_delayMillis>
	mpu6050_tx(myMPU, 0x6B, 0x00);   // Wake up
 80051e0:	2200      	movs	r2, #0
 80051e2:	216b      	movs	r1, #107	@ 0x6b
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f884 	bl	80052f2 <mpu6050_tx>
	mpu6050_tx(myMPU, 0x1A, dlpf);   // Set DLPF
 80051ea:	78bb      	ldrb	r3, [r7, #2]
 80051ec:	461a      	mov	r2, r3
 80051ee:	211a      	movs	r1, #26
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f87e 	bl	80052f2 <mpu6050_tx>
	mpu6050_tx(myMPU, 0x1B, config); // Set gyro config
 80051f6:	787b      	ldrb	r3, [r7, #1]
 80051f8:	461a      	mov	r2, r3
 80051fa:	211b      	movs	r1, #27
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f878 	bl	80052f2 <mpu6050_tx>

	switch(config) {
 8005202:	787b      	ldrb	r3, [r7, #1]
 8005204:	2b18      	cmp	r3, #24
 8005206:	d845      	bhi.n	8005294 <mpu6050_setup+0xec>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <mpu6050_setup+0x68>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005275 	.word	0x08005275
 8005214:	08005295 	.word	0x08005295
 8005218:	08005295 	.word	0x08005295
 800521c:	08005295 	.word	0x08005295
 8005220:	08005295 	.word	0x08005295
 8005224:	08005295 	.word	0x08005295
 8005228:	08005295 	.word	0x08005295
 800522c:	08005295 	.word	0x08005295
 8005230:	0800527d 	.word	0x0800527d
 8005234:	08005295 	.word	0x08005295
 8005238:	08005295 	.word	0x08005295
 800523c:	08005295 	.word	0x08005295
 8005240:	08005295 	.word	0x08005295
 8005244:	08005295 	.word	0x08005295
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	08005285 	.word	0x08005285
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
 8005260:	08005295 	.word	0x08005295
 8005264:	08005295 	.word	0x08005295
 8005268:	08005295 	.word	0x08005295
 800526c:	08005295 	.word	0x08005295
 8005270:	0800528d 	.word	0x0800528d
	case 0x00: myMPU->sensitivity = 131.0f; break; // ±250 °/s
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0b      	ldr	r2, [pc, #44]	@ (80052a4 <mpu6050_setup+0xfc>)
 8005278:	609a      	str	r2, [r3, #8]
 800527a:	e00f      	b.n	800529c <mpu6050_setup+0xf4>
	case 0x08: myMPU->sensitivity = 65.5f;  break; // ±500 °/s
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <mpu6050_setup+0x100>)
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	e00b      	b.n	800529c <mpu6050_setup+0xf4>
	case 0x10: myMPU->sensitivity = 32.8f;  break; // ±1000 °/s
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a09      	ldr	r2, [pc, #36]	@ (80052ac <mpu6050_setup+0x104>)
 8005288:	609a      	str	r2, [r3, #8]
 800528a:	e007      	b.n	800529c <mpu6050_setup+0xf4>
	case 0x18: myMPU->sensitivity = 16.4f;  break; // ±2000 °/s
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a08      	ldr	r2, [pc, #32]	@ (80052b0 <mpu6050_setup+0x108>)
 8005290:	609a      	str	r2, [r3, #8]
 8005292:	e003      	b.n	800529c <mpu6050_setup+0xf4>
	default:   myMPU->sensitivity = 131.0f; break;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a03      	ldr	r2, [pc, #12]	@ (80052a4 <mpu6050_setup+0xfc>)
 8005298:	609a      	str	r2, [r3, #8]
 800529a:	bf00      	nop
	}
	#ifdef DEBUG_MODE
	uart_send("SUCCESS : MPU SETUP \n");
	#endif
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	43030000 	.word	0x43030000
 80052a8:	42830000 	.word	0x42830000
 80052ac:	42033333 	.word	0x42033333
 80052b0:	41833333 	.word	0x41833333

080052b4 <mpu6050_start>:

/* ========================================================================================================================
 *                                                MPU BLOCK FUNCTIONS
 * ======================================================================================================================== */

void mpu6050_start(MPU6050* myMPU) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	if (!(i2c_start(myMPU->I2Cx))) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff0d 	bl	80060e0 <i2c_start>
	} else {
		#ifdef DEBUG_MODE
		uart_send("FAILURE : MPU START \n");
	    #endif
	}
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <mpu6050_address>:
void mpu6050_address(MPU6050* myMPU, uint8_t RW) {
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
	if (!(i2c_address(myMPU->I2Cx, myMPU->address, RW))) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	791b      	ldrb	r3, [r3, #4]
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f000 ff23 	bl	8006130 <i2c_address>
	} else {
		#ifdef DEBUG_MODE
		uart_send("FAILURE : MPU SETUP \n");
		#endif
	}
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <mpu6050_tx>:

/* ========================================================================================================================
 *                                                 MPU COMMS FUNCTIONS
 * ======================================================================================================================== */

void mpu6050_tx(MPU6050* myMPU, uint8_t reg, uint8_t data) {
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
 80052fe:	4613      	mov	r3, r2
 8005300:	70bb      	strb	r3, [r7, #2]
	mpu6050_start(myMPU);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff ffd6 	bl	80052b4 <mpu6050_start>
    mpu6050_address(myMPU, WRITE);
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ffdf 	bl	80052ce <mpu6050_address>
    i2c_sendData(myMPU->I2Cx, reg);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f000 ff43 	bl	80061a4 <i2c_sendData>
    i2c_sendData(myMPU->I2Cx, data);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	78ba      	ldrb	r2, [r7, #2]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ff3c 	bl	80061a4 <i2c_sendData>
    i2c_stop(myMPU->I2Cx);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 ff54 	bl	80061de <i2c_stop>
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <mpu6050_rx>:
void mpu6050_rx(MPU6050* myMPU, uint8_t reg, uint8_t* data, uint8_t dataLen) {
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	461a      	mov	r2, r3
 800534a:	460b      	mov	r3, r1
 800534c:	72fb      	strb	r3, [r7, #11]
 800534e:	4613      	mov	r3, r2
 8005350:	72bb      	strb	r3, [r7, #10]
    uint16_t timeout;

    // 1. START + WRITE to select register
    mpu6050_start(myMPU);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ffae 	bl	80052b4 <mpu6050_start>
    mpu6050_address(myMPU, WRITE);
 8005358:	2100      	movs	r1, #0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ffb7 	bl	80052ce <mpu6050_address>
    i2c_sendData(myMPU->I2Cx, reg);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	7afa      	ldrb	r2, [r7, #11]
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 ff1b 	bl	80061a4 <i2c_sendData>

    // 2. RESTART + READ
    mpu6050_start(myMPU);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ffa0 	bl	80052b4 <mpu6050_start>
    mpu6050_address(myMPU, READ);
 8005374:	2101      	movs	r1, #1
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff ffa9 	bl	80052ce <mpu6050_address>

    for (uint8_t i = 0; i < dataLen; i++) {
 800537c:	2300      	movs	r3, #0
 800537e:	757b      	strb	r3, [r7, #21]
 8005380:	e03b      	b.n	80053fa <mpu6050_rx+0xbc>
        // Set ACK/NACK before reading the byte
        if (i == dataLen - 1) { myMPU->I2Cx->CR1 &= ~(1 << 10); // NACK on last byte
 8005382:	7d7a      	ldrb	r2, [r7, #21]
 8005384:	7abb      	ldrb	r3, [r7, #10]
 8005386:	3b01      	subs	r3, #1
 8005388:	429a      	cmp	r2, r3
 800538a:	d108      	bne.n	800539e <mpu6050_rx+0x60>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e007      	b.n	80053ae <mpu6050_rx+0x70>
        } else                { myMPU->I2Cx->CR1 |= (1 << 10);  // ACK for previous bytes
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053ac:	601a      	str	r2, [r3, #0]
        }

        // Wait for RXNE with timeout
        timeout = i2c_timeout;
 80053ae:	2332      	movs	r3, #50	@ 0x32
 80053b0:	82fb      	strh	r3, [r7, #22]
        while (!(myMPU->I2Cx->SR1 & (1 << 6)) && timeout--) systick_delayMillis(1);
 80053b2:	e002      	b.n	80053ba <mpu6050_rx+0x7c>
 80053b4:	2001      	movs	r0, #1
 80053b6:	f001 f90f 	bl	80065d8 <systick_delayMillis>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <mpu6050_rx+0x94>
 80053c8:	8afb      	ldrh	r3, [r7, #22]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	82fa      	strh	r2, [r7, #22]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <mpu6050_rx+0x76>
        if (timeout == 0) { i2c_stop(myMPU->I2Cx); return; }
 80053d2:	8afb      	ldrh	r3, [r7, #22]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <mpu6050_rx+0xa6>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fefe 	bl	80061de <i2c_stop>
 80053e2:	e016      	b.n	8005412 <mpu6050_rx+0xd4>

        // Read data
        data[i] = myMPU->I2Cx->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6919      	ldr	r1, [r3, #16]
 80053ea:	7d7b      	ldrb	r3, [r7, #21]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	b2ca      	uxtb	r2, r1
 80053f2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < dataLen; i++) {
 80053f4:	7d7b      	ldrb	r3, [r7, #21]
 80053f6:	3301      	adds	r3, #1
 80053f8:	757b      	strb	r3, [r7, #21]
 80053fa:	7d7a      	ldrb	r2, [r7, #21]
 80053fc:	7abb      	ldrb	r3, [r7, #10]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3bf      	bcc.n	8005382 <mpu6050_rx+0x44>
        uart_send("READING...\n");
        #endif
    }

    // Generate STOP after last byte is read
    myMPU->I2Cx->CR1 |= (1 << 9); // STOP
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <mpu6050_readGyro>:

/* ========================================================================================================================
 *                                                 MPU READINGS FUNCTION
 * ======================================================================================================================== */

void mpu6050_readGyro(MPU6050* myMPU, float* gx, float* gy, float* gz) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
	static uint8_t rawData[6];

	#ifdef DEBUG_MODE
	uart_send("GETTING GYROSCOPE DATA !!! \n");
	#endif
	mpu6050_rx(myMPU, 0x43, rawData, 6);
 8005426:	2306      	movs	r3, #6
 8005428:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 800542a:	2143      	movs	r1, #67	@ 0x43
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ff86 	bl	800533e <mpu6050_rx>
	#ifdef DEBUG_MODE
	uart_send("GYROSCOPE DATA AQUIRED !!! \n");
	for (uint8_t i = 0; i < 6; i++) uart_send("%d : ",*(rawData+i));
	#endif

	int16_t gyroX = (int16_t)((int16_t)rawData[0] << 8 | (int16_t)rawData[1]);
 8005432:	4b29      	ldr	r3, [pc, #164]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b21b      	sxth	r3, r3
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	b21a      	sxth	r2, r3
 800543c:	4b26      	ldr	r3, [pc, #152]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	b21b      	sxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	82fb      	strh	r3, [r7, #22]
	int16_t gyroY = (int16_t)((int16_t)rawData[2] << 8 | (int16_t)rawData[3]);
 8005446:	4b24      	ldr	r3, [pc, #144]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 8005448:	789b      	ldrb	r3, [r3, #2]
 800544a:	b21b      	sxth	r3, r3
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	b21a      	sxth	r2, r3
 8005450:	4b21      	ldr	r3, [pc, #132]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	b21b      	sxth	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	82bb      	strh	r3, [r7, #20]
	int16_t gyroZ = (int16_t)((int16_t)rawData[4] << 8 | (int16_t)rawData[5]);
 800545a:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 800545c:	791b      	ldrb	r3, [r3, #4]
 800545e:	b21b      	sxth	r3, r3
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	b21a      	sxth	r2, r3
 8005464:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <mpu6050_readGyro+0xc0>)
 8005466:	795b      	ldrb	r3, [r3, #5]
 8005468:	b21b      	sxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	827b      	strh	r3, [r7, #18]

	*gx = (float)gyroX / myMPU->sensitivity;
 800546e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fb fc32 	bl	8000cdc <__aeabi_i2f>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7fb fd33 	bl	8000eec <__aeabi_fdiv>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	601a      	str	r2, [r3, #0]
	*gy = (float)gyroY / myMPU->sensitivity;
 800548e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb fc22 	bl	8000cdc <__aeabi_i2f>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7fb fd23 	bl	8000eec <__aeabi_fdiv>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
	*gz = (float)gyroZ / myMPU->sensitivity;
 80054ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fb fc12 	bl	8000cdc <__aeabi_i2f>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fb fd13 	bl	8000eec <__aeabi_fdiv>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20001910 	.word	0x20001910

080054dc <main>:
#include <stm32f103xb.h>

void calibrateFront();
void FloodFill();

int main(void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af02      	add	r7, sp, #8
	// == System CLK and Global Counter ==
	clk_setup();
 80054e2:	f000 f9c1 	bl	8005868 <clk_setup>
    timers_stopwatchSetup(TIM2); // Global Counter using TIM4
 80054e6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80054ea:	f001 fbbf 	bl	8006c6c <timers_stopwatchSetup>
    // == Peripherals Setup ==
    systick_setup();
 80054ee:	f001 f849 	bl	8006584 <systick_setup>
    uart_setup();
 80054f2:	f001 fbf7 	bl	8006ce4 <uart_setup>
    // == Core Setup ==
    core_setup();
 80054f6:	f7fe fbeb 	bl	8003cd0 <core_setup>
    gpio_setupPin(GPIOC,13,OUT_50,GP_PP);
 80054fa:	2300      	movs	r3, #0
 80054fc:	2203      	movs	r2, #3
 80054fe:	210d      	movs	r1, #13
 8005500:	4855      	ldr	r0, [pc, #340]	@ (8005658 <main+0x17c>)
 8005502:	f000 fc99 	bl	8005e38 <gpio_setupPin>

    // TODO : Adjust PID more
    pidController_setup(&RIGHT_SPEED_PID, 150.0f, 50.0f, 3.5f, 1000.0f, 10000.0f);
 8005506:	4b55      	ldr	r3, [pc, #340]	@ (800565c <main+0x180>)
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	4b55      	ldr	r3, [pc, #340]	@ (8005660 <main+0x184>)
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4b55      	ldr	r3, [pc, #340]	@ (8005664 <main+0x188>)
 8005510:	4a55      	ldr	r2, [pc, #340]	@ (8005668 <main+0x18c>)
 8005512:	4956      	ldr	r1, [pc, #344]	@ (800566c <main+0x190>)
 8005514:	4856      	ldr	r0, [pc, #344]	@ (8005670 <main+0x194>)
 8005516:	f7fb fee3 	bl	80012e0 <pidController_setup>
    pidController_setup(&LEFT_SPEED_PID , 150.0f, 50.0f, 13.5f, 800.0f, 10000.0f);
 800551a:	4b50      	ldr	r3, [pc, #320]	@ (800565c <main+0x180>)
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <main+0x198>)
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	4b55      	ldr	r3, [pc, #340]	@ (8005678 <main+0x19c>)
 8005524:	4a50      	ldr	r2, [pc, #320]	@ (8005668 <main+0x18c>)
 8005526:	4951      	ldr	r1, [pc, #324]	@ (800566c <main+0x190>)
 8005528:	4854      	ldr	r0, [pc, #336]	@ (800567c <main+0x1a0>)
 800552a:	f7fb fed9 	bl	80012e0 <pidController_setup>

    pidController_setup(&STABLE_GYRO_PID, 15.5f, 0.5f, 0.01f, 0.0f, 15.0f);
 800552e:	4b54      	ldr	r3, [pc, #336]	@ (8005680 <main+0x1a4>)
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4b52      	ldr	r3, [pc, #328]	@ (8005684 <main+0x1a8>)
 800553a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800553e:	4952      	ldr	r1, [pc, #328]	@ (8005688 <main+0x1ac>)
 8005540:	4852      	ldr	r0, [pc, #328]	@ (800568c <main+0x1b0>)
 8005542:	f7fb fecd 	bl	80012e0 <pidController_setup>
    pidController_setup(&STABLE_IR_PID, 15.5f, 0.0f, 0.01f, 0.0f, 50.0f);
 8005546:	4b48      	ldr	r3, [pc, #288]	@ (8005668 <main+0x18c>)
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4b4c      	ldr	r3, [pc, #304]	@ (8005684 <main+0x1a8>)
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	494c      	ldr	r1, [pc, #304]	@ (8005688 <main+0x1ac>)
 8005558:	484d      	ldr	r0, [pc, #308]	@ (8005690 <main+0x1b4>)
 800555a:	f7fb fec1 	bl	80012e0 <pidController_setup>

    pidController_setup(&SPIN_PID, 0.5f, 0.5f, 0.02f, 80.0f, 150.0f);
 800555e:	4b43      	ldr	r3, [pc, #268]	@ (800566c <main+0x190>)
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	4b4c      	ldr	r3, [pc, #304]	@ (8005694 <main+0x1b8>)
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	4b4c      	ldr	r3, [pc, #304]	@ (8005698 <main+0x1bc>)
 8005568:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800556c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005570:	484a      	ldr	r0, [pc, #296]	@ (800569c <main+0x1c0>)
 8005572:	f7fb feb5 	bl	80012e0 <pidController_setup>
    pidController_setup(&IR_PID, 0.3f, 0.5f, 0.0f, 70.0f, 100.0f);
 8005576:	4b4a      	ldr	r3, [pc, #296]	@ (80056a0 <main+0x1c4>)
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	4b4a      	ldr	r3, [pc, #296]	@ (80056a4 <main+0x1c8>)
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8005586:	4948      	ldr	r1, [pc, #288]	@ (80056a8 <main+0x1cc>)
 8005588:	4848      	ldr	r0, [pc, #288]	@ (80056ac <main+0x1d0>)
 800558a:	f7fb fea9 	bl	80012e0 <pidController_setup>

    // Calibrate Front
    systick_delayMillis(2000);
 800558e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005592:	f001 f821 	bl	80065d8 <systick_delayMillis>
    calibrateFront();
 8005596:	f000 f899 	bl	80056cc <calibrateFront>
    remi(DEADEND);
 800559a:	2006      	movs	r0, #6
 800559c:	f7fe ff90 	bl	80044c0 <remi>
    // Mode Select
    core_modeSelect();
 80055a0:	f7fe ff72 	bl	8004488 <core_modeSelect>
    core_speak(BEEP);
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7fe ff31 	bl	800440c <core_speak>
    systick_delayMillis(1000);
 80055aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055ae:	f001 f813 	bl	80065d8 <systick_delayMillis>
    // Wait For Touch
    while (!(walls & 0b0010)) {
 80055b2:	e001      	b.n	80055b8 <main+0xdc>
		readWalls();
 80055b4:	f7ff fada 	bl	8004b6c <readWalls>
    while (!(walls & 0b0010)) {
 80055b8:	4b3d      	ldr	r3, [pc, #244]	@ (80056b0 <main+0x1d4>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f7      	beq.n	80055b4 <main+0xd8>
	}
    walls &=~ 0b0110;
 80055c4:	4b3a      	ldr	r3, [pc, #232]	@ (80056b0 <main+0x1d4>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f023 0306 	bic.w	r3, r3, #6
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <main+0x1d4>)
 80055d0:	701a      	strb	r2, [r3, #0]
	systick_delayMillis(500);
 80055d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80055d6:	f000 ffff 	bl	80065d8 <systick_delayMillis>
	core_speak(BEEP);
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fe ff16 	bl	800440c <core_speak>
	systick_delayMillis(2000);
 80055e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80055e4:	f000 fff8 	bl	80065d8 <systick_delayMillis>

    while (1) {

    	if (CORE_MODE == 0) {
 80055e8:	4b32      	ldr	r3, [pc, #200]	@ (80056b4 <main+0x1d8>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <main+0x11a>
    		FloodFill();
 80055f0:	f000 f880 	bl	80056f4 <FloodFill>
 80055f4:	e7f8      	b.n	80055e8 <main+0x10c>
    	}
    	else if (CORE_MODE == 1) { // TEST SENSORS
 80055f6:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <main+0x1d8>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <main+0x128>
    		readWalls();
 80055fe:	f7ff fab5 	bl	8004b6c <readWalls>
 8005602:	e7f1      	b.n	80055e8 <main+0x10c>
    	}
    	else if (CORE_MODE == 2) { // TEST MOTORS
 8005604:	4b2b      	ldr	r3, [pc, #172]	@ (80056b4 <main+0x1d8>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d11e      	bne.n	800564a <main+0x16e>
    		core_MotorPidControl(&MR, FORWARD, 200); uart_send("R:%f\n",MR.CURR_RPM);
 800560c:	4a2a      	ldr	r2, [pc, #168]	@ (80056b8 <main+0x1dc>)
 800560e:	2100      	movs	r1, #0
 8005610:	482a      	ldr	r0, [pc, #168]	@ (80056bc <main+0x1e0>)
 8005612:	f7fe fcf9 	bl	8004008 <core_MotorPidControl>
 8005616:	4b29      	ldr	r3, [pc, #164]	@ (80056bc <main+0x1e0>)
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff04 	bl	8000428 <__aeabi_f2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4826      	ldr	r0, [pc, #152]	@ (80056c0 <main+0x1e4>)
 8005626:	f001 fb97 	bl	8006d58 <uart_send>
    		core_MotorPidControl(&ML, FORWARD, 200); uart_send("L:%f\n",ML.CURR_RPM);
 800562a:	4a23      	ldr	r2, [pc, #140]	@ (80056b8 <main+0x1dc>)
 800562c:	2100      	movs	r1, #0
 800562e:	4825      	ldr	r0, [pc, #148]	@ (80056c4 <main+0x1e8>)
 8005630:	f7fe fcea 	bl	8004008 <core_MotorPidControl>
 8005634:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <main+0x1e8>)
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4618      	mov	r0, r3
 800563a:	f7fa fef5 	bl	8000428 <__aeabi_f2d>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4821      	ldr	r0, [pc, #132]	@ (80056c8 <main+0x1ec>)
 8005644:	f001 fb88 	bl	8006d58 <uart_send>
 8005648:	e7ce      	b.n	80055e8 <main+0x10c>
    	}
    	else if (CORE_MODE == 3) {
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <main+0x1d8>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d1ca      	bne.n	80055e8 <main+0x10c>
    		aStar();
 8005652:	f7fd fcbb 	bl	8002fcc <aStar>
    	if (CORE_MODE == 0) {
 8005656:	e7c7      	b.n	80055e8 <main+0x10c>
 8005658:	40011000 	.word	0x40011000
 800565c:	461c4000 	.word	0x461c4000
 8005660:	447a0000 	.word	0x447a0000
 8005664:	40600000 	.word	0x40600000
 8005668:	42480000 	.word	0x42480000
 800566c:	43160000 	.word	0x43160000
 8005670:	2000182c 	.word	0x2000182c
 8005674:	44480000 	.word	0x44480000
 8005678:	41580000 	.word	0x41580000
 800567c:	2000180c 	.word	0x2000180c
 8005680:	41700000 	.word	0x41700000
 8005684:	3c23d70a 	.word	0x3c23d70a
 8005688:	41780000 	.word	0x41780000
 800568c:	2000184c 	.word	0x2000184c
 8005690:	2000186c 	.word	0x2000186c
 8005694:	42a00000 	.word	0x42a00000
 8005698:	3ca3d70a 	.word	0x3ca3d70a
 800569c:	2000188c 	.word	0x2000188c
 80056a0:	42c80000 	.word	0x42c80000
 80056a4:	428c0000 	.word	0x428c0000
 80056a8:	3e99999a 	.word	0x3e99999a
 80056ac:	200018ac 	.word	0x200018ac
 80056b0:	2000190c 	.word	0x2000190c
 80056b4:	2000190d 	.word	0x2000190d
 80056b8:	43480000 	.word	0x43480000
 80056bc:	20001768 	.word	0x20001768
 80056c0:	0800a2b8 	.word	0x0800a2b8
 80056c4:	20001788 	.word	0x20001788
 80056c8:	0800a2c0 	.word	0x0800a2c0

080056cc <calibrateFront>:

    }
    return 0;
}

void calibrateFront() {
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
	RIGHT_GOAL = IR_READINGS[1];
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <calibrateFront+0x1c>)
 80056d2:	885a      	ldrh	r2, [r3, #2]
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <calibrateFront+0x20>)
 80056d6:	801a      	strh	r2, [r3, #0]
	LEFT_GOAL  = IR_READINGS[2];
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <calibrateFront+0x1c>)
 80056da:	889a      	ldrh	r2, [r3, #4]
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <calibrateFront+0x24>)
 80056de:	801a      	strh	r2, [r3, #0]
}
 80056e0:	bf00      	nop
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	20001904 	.word	0x20001904
 80056ec:	20000412 	.word	0x20000412
 80056f0:	20000410 	.word	0x20000410

080056f4 <FloodFill>:

void FloodFill() {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	// SEARCH
	SPEED = 200.0f;
 80056f8:	4b54      	ldr	r3, [pc, #336]	@ (800584c <FloodFill+0x158>)
 80056fa:	4a55      	ldr	r2, [pc, #340]	@ (8005850 <FloodFill+0x15c>)
 80056fc:	601a      	str	r2, [r3, #0]
	gpio_writePin(runLedPort   , runLedPin   , LOW);
 80056fe:	2200      	movs	r2, #0
 8005700:	2101      	movs	r1, #1
 8005702:	4854      	ldr	r0, [pc, #336]	@ (8005854 <FloodFill+0x160>)
 8005704:	f000 fc02 	bl	8005f0c <gpio_writePin>
	gpio_writePin(searchLedPort, searchLedPin, HIGH);
 8005708:	2201      	movs	r2, #1
 800570a:	2100      	movs	r1, #0
 800570c:	4851      	ldr	r0, [pc, #324]	@ (8005854 <FloodFill+0x160>)
 800570e:	f000 fbfd 	bl	8005f0c <gpio_writePin>
	do {
		floodfill(0);
 8005712:	2000      	movs	r0, #0
 8005714:	f7fe f988 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 8005718:	4b4f      	ldr	r3, [pc, #316]	@ (8005858 <FloodFill+0x164>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b4f      	ldr	r3, [pc, #316]	@ (800585c <FloodFill+0x168>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	494f      	ldr	r1, [pc, #316]	@ (8005860 <FloodFill+0x16c>)
 8005722:	0112      	lsls	r2, r2, #4
 8005724:	4413      	add	r3, r2
 8005726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f1      	bne.n	8005712 <FloodFill+0x1e>
	remi(HALT);
 800572e:	2008      	movs	r0, #8
 8005730:	f7fe fec6 	bl	80044c0 <remi>
	core_speak(CELEBRATE1);
 8005734:	2001      	movs	r0, #1
 8005736:	f7fe fe69 	bl	800440c <core_speak>
	// RETURN
	SPEED = 200.0f;
 800573a:	4b44      	ldr	r3, [pc, #272]	@ (800584c <FloodFill+0x158>)
 800573c:	4a44      	ldr	r2, [pc, #272]	@ (8005850 <FloodFill+0x15c>)
 800573e:	601a      	str	r2, [r3, #0]
	do {
		floodfill(1);
 8005740:	2001      	movs	r0, #1
 8005742:	f7fe f971 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 8005746:	4b44      	ldr	r3, [pc, #272]	@ (8005858 <FloodFill+0x164>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b44      	ldr	r3, [pc, #272]	@ (800585c <FloodFill+0x168>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4944      	ldr	r1, [pc, #272]	@ (8005860 <FloodFill+0x16c>)
 8005750:	0112      	lsls	r2, r2, #4
 8005752:	4413      	add	r3, r2
 8005754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f1      	bne.n	8005740 <FloodFill+0x4c>
	remi(HALT);
 800575c:	2008      	movs	r0, #8
 800575e:	f7fe feaf 	bl	80044c0 <remi>
	core_speak(BEEP);
 8005762:	2000      	movs	r0, #0
 8005764:	f7fe fe52 	bl	800440c <core_speak>

	// RUN 1
	SPEED = 200.0f;
 8005768:	4b38      	ldr	r3, [pc, #224]	@ (800584c <FloodFill+0x158>)
 800576a:	4a39      	ldr	r2, [pc, #228]	@ (8005850 <FloodFill+0x15c>)
 800576c:	601a      	str	r2, [r3, #0]
	gpio_writePin(runLedPort   , runLedPin   , HIGH);
 800576e:	2201      	movs	r2, #1
 8005770:	2101      	movs	r1, #1
 8005772:	4838      	ldr	r0, [pc, #224]	@ (8005854 <FloodFill+0x160>)
 8005774:	f000 fbca 	bl	8005f0c <gpio_writePin>
	gpio_writePin(searchLedPort, searchLedPin, LOW);
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	4835      	ldr	r0, [pc, #212]	@ (8005854 <FloodFill+0x160>)
 800577e:	f000 fbc5 	bl	8005f0c <gpio_writePin>
	do {
		floodfill(0);
 8005782:	2000      	movs	r0, #0
 8005784:	f7fe f950 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 8005788:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <FloodFill+0x164>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b33      	ldr	r3, [pc, #204]	@ (800585c <FloodFill+0x168>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4933      	ldr	r1, [pc, #204]	@ (8005860 <FloodFill+0x16c>)
 8005792:	0112      	lsls	r2, r2, #4
 8005794:	4413      	add	r3, r2
 8005796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f1      	bne.n	8005782 <FloodFill+0x8e>
	remi(HALT);
 800579e:	2008      	movs	r0, #8
 80057a0:	f7fe fe8e 	bl	80044c0 <remi>
	core_speak(CELEBRATE1);
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fe fe31 	bl	800440c <core_speak>
	// RETURN
	SPEED = 200.0f;
 80057aa:	4b28      	ldr	r3, [pc, #160]	@ (800584c <FloodFill+0x158>)
 80057ac:	4a28      	ldr	r2, [pc, #160]	@ (8005850 <FloodFill+0x15c>)
 80057ae:	601a      	str	r2, [r3, #0]
	do {
		floodfill(1);
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fe f939 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 80057b6:	4b28      	ldr	r3, [pc, #160]	@ (8005858 <FloodFill+0x164>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b28      	ldr	r3, [pc, #160]	@ (800585c <FloodFill+0x168>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4928      	ldr	r1, [pc, #160]	@ (8005860 <FloodFill+0x16c>)
 80057c0:	0112      	lsls	r2, r2, #4
 80057c2:	4413      	add	r3, r2
 80057c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f1      	bne.n	80057b0 <FloodFill+0xbc>
	remi(HALT);
 80057cc:	2008      	movs	r0, #8
 80057ce:	f7fe fe77 	bl	80044c0 <remi>
	core_speak(BEEP);
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fe fe1a 	bl	800440c <core_speak>

	// RUN 2
	SPEED = 225.0f;
 80057d8:	4b1c      	ldr	r3, [pc, #112]	@ (800584c <FloodFill+0x158>)
 80057da:	4a22      	ldr	r2, [pc, #136]	@ (8005864 <FloodFill+0x170>)
 80057dc:	601a      	str	r2, [r3, #0]
	gpio_writePin(runLedPort   , runLedPin   , HIGH);
 80057de:	2201      	movs	r2, #1
 80057e0:	2101      	movs	r1, #1
 80057e2:	481c      	ldr	r0, [pc, #112]	@ (8005854 <FloodFill+0x160>)
 80057e4:	f000 fb92 	bl	8005f0c <gpio_writePin>
	gpio_writePin(searchLedPort, searchLedPin, LOW);
 80057e8:	2200      	movs	r2, #0
 80057ea:	2100      	movs	r1, #0
 80057ec:	4819      	ldr	r0, [pc, #100]	@ (8005854 <FloodFill+0x160>)
 80057ee:	f000 fb8d 	bl	8005f0c <gpio_writePin>
	do {
		floodfill(0);
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7fe f918 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 80057f8:	4b17      	ldr	r3, [pc, #92]	@ (8005858 <FloodFill+0x164>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b17      	ldr	r3, [pc, #92]	@ (800585c <FloodFill+0x168>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4917      	ldr	r1, [pc, #92]	@ (8005860 <FloodFill+0x16c>)
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	4413      	add	r3, r2
 8005806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f1      	bne.n	80057f2 <FloodFill+0xfe>
	remi(HALT);
 800580e:	2008      	movs	r0, #8
 8005810:	f7fe fe56 	bl	80044c0 <remi>
	core_speak(CELEBRATE2);
 8005814:	2002      	movs	r0, #2
 8005816:	f7fe fdf9 	bl	800440c <core_speak>
	// RETURN
	SPEED = 200.0f;
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <FloodFill+0x158>)
 800581c:	4a0c      	ldr	r2, [pc, #48]	@ (8005850 <FloodFill+0x15c>)
 800581e:	601a      	str	r2, [r3, #0]
	do {
		floodfill(1);
 8005820:	2001      	movs	r0, #1
 8005822:	f7fe f901 	bl	8003a28 <floodfill>
	} while (FLOOD_MAP[currX][currY] != 0);
 8005826:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <FloodFill+0x164>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <FloodFill+0x168>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	490c      	ldr	r1, [pc, #48]	@ (8005860 <FloodFill+0x16c>)
 8005830:	0112      	lsls	r2, r2, #4
 8005832:	4413      	add	r3, r2
 8005834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f1      	bne.n	8005820 <FloodFill+0x12c>
	remi(HALT);
 800583c:	2008      	movs	r0, #8
 800583e:	f7fe fe3f 	bl	80044c0 <remi>
	core_speak(BEEP);
 8005842:	2000      	movs	r0, #0
 8005844:	f7fe fde2 	bl	800440c <core_speak>
}
 8005848:	bf00      	nop
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000408 	.word	0x20000408
 8005850:	43480000 	.word	0x43480000
 8005854:	40010c00 	.word	0x40010c00
 8005858:	20000b50 	.word	0x20000b50
 800585c:	20000b54 	.word	0x20000b54
 8005860:	20000750 	.word	0x20000750
 8005864:	43610000 	.word	0x43610000

08005868 <clk_setup>:
 * Date: ~
 ******************************************************/

#include <peripherals/clkHeaderFiles/clk.h>

void clk_setup(void) {
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
    // 1. Enable HSE (external 8 MHz crystal)
    RCC->CR |= RCC_CR_HSEON;
 800586c:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <clk_setup+0xd8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a33      	ldr	r2, [pc, #204]	@ (8005940 <clk_setup+0xd8>)
 8005872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005876:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Wait for HSE ready
 8005878:	bf00      	nop
 800587a:	4b31      	ldr	r3, [pc, #196]	@ (8005940 <clk_setup+0xd8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f9      	beq.n	800587a <clk_setup+0x12>

    // 2. Configure Flash prefetch and latency
    FLASH->ACR |= FLASH_ACR_PRFTBE;       // Enable prefetch buffer
 8005886:	4b2f      	ldr	r3, [pc, #188]	@ (8005944 <clk_setup+0xdc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2e      	ldr	r2, [pc, #184]	@ (8005944 <clk_setup+0xdc>)
 800588c:	f043 0310 	orr.w	r3, r3, #16
 8005890:	6013      	str	r3, [r2, #0]
    FLASH->ACR &= ~FLASH_ACR_LATENCY;     // Clear latency bits
 8005892:	4b2c      	ldr	r3, [pc, #176]	@ (8005944 <clk_setup+0xdc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2b      	ldr	r2, [pc, #172]	@ (8005944 <clk_setup+0xdc>)
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2;    // 2 wait states (for 72 MHz)
 800589e:	4b29      	ldr	r3, [pc, #164]	@ (8005944 <clk_setup+0xdc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a28      	ldr	r2, [pc, #160]	@ (8005944 <clk_setup+0xdc>)
 80058a4:	f043 0304 	orr.w	r3, r3, #4
 80058a8:	6013      	str	r3, [r2, #0]

    // 3. Set bus prescalers
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;      // AHB = SYSCLK / 1 = 72 MHz
 80058aa:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <clk_setup+0xd8>)
 80058ac:	4a24      	ldr	r2, [pc, #144]	@ (8005940 <clk_setup+0xd8>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;     // APB2 = AHB / 1 = 72 MHz (TIM1)
 80058b2:	4b23      	ldr	r3, [pc, #140]	@ (8005940 <clk_setup+0xd8>)
 80058b4:	4a22      	ldr	r2, [pc, #136]	@ (8005940 <clk_setup+0xd8>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;     // APB1 = AHB / 2 = 36 MHz (TIM2–TIM4) → timers get x2 = 72 MHz
 80058ba:	4b21      	ldr	r3, [pc, #132]	@ (8005940 <clk_setup+0xd8>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4a20      	ldr	r2, [pc, #128]	@ (8005940 <clk_setup+0xd8>)
 80058c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058c4:	6053      	str	r3, [r2, #4]

    // 4. Configure PLL: HSE as source, x9 multiplier → 8 MHz * 9 = 72 MHz
    RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;      // HSE not divided
 80058c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005940 <clk_setup+0xd8>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <clk_setup+0xd8>)
 80058cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058d0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC;         // PLL source = HSE
 80058d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <clk_setup+0xd8>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005940 <clk_setup+0xd8>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 80058de:	4b18      	ldr	r3, [pc, #96]	@ (8005940 <clk_setup+0xd8>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <clk_setup+0xd8>)
 80058e4:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80058e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80058ea:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <clk_setup+0xd8>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4a14      	ldr	r2, [pc, #80]	@ (8005940 <clk_setup+0xd8>)
 80058f0:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80058f4:	6053      	str	r3, [r2, #4]

    // 5. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80058f6:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <clk_setup+0xd8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <clk_setup+0xd8>)
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005900:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));   // Wait for PLL ready
 8005902:	bf00      	nop
 8005904:	4b0e      	ldr	r3, [pc, #56]	@ (8005940 <clk_setup+0xd8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f9      	beq.n	8005904 <clk_setup+0x9c>

    // 6. Switch system clock to PLL
    RCC->CFGR &= ~RCC_CFGR_SW;
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <clk_setup+0xd8>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a0a      	ldr	r2, [pc, #40]	@ (8005940 <clk_setup+0xd8>)
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800591c:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <clk_setup+0xd8>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a07      	ldr	r2, [pc, #28]	@ (8005940 <clk_setup+0xd8>)
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait for switch
 8005928:	bf00      	nop
 800592a:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <clk_setup+0xd8>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d1f9      	bne.n	800592a <clk_setup+0xc2>
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	40021000 	.word	0x40021000
 8005944:	40022000 	.word	0x40022000

08005948 <adc_setupPin>:

/* per-ADC channel counters (index 0 => ADC1, index 1 => ADC2) */
static uint8_t adc_channel_count[2] = {0, 0};

void adc_setupPin(ADC_TypeDef *ADCx, GPIO_TypeDef *GPIOx, uint8_t pin)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
    uint8_t adc_index;
    uint8_t channel;

    // Map ADCx pointer to index 0/1 for arrays (ADC1=0, ADC2=1)
    if      (ADCx == ADC1) adc_index = 0;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a9d      	ldr	r2, [pc, #628]	@ (8005bd0 <adc_setupPin+0x288>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d102      	bne.n	8005964 <adc_setupPin+0x1c>
 800595e:	2300      	movs	r3, #0
 8005960:	75fb      	strb	r3, [r7, #23]
 8005962:	e006      	b.n	8005972 <adc_setupPin+0x2a>
    else if (ADCx == ADC2) adc_index = 1;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a9b      	ldr	r2, [pc, #620]	@ (8005bd4 <adc_setupPin+0x28c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	f040 8129 	bne.w	8005bc0 <adc_setupPin+0x278>
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
    else return; // unsupported ADC

    // Convert GPIO pin to ADC channel number
    // Assuming PA0=0..PA7=7, PB0=8, PB1=9, etc.
    if (GPIOx == GPIOA)      channel = pin;         // PA0..PA7
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4a98      	ldr	r2, [pc, #608]	@ (8005bd8 <adc_setupPin+0x290>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d102      	bne.n	8005980 <adc_setupPin+0x38>
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	75bb      	strb	r3, [r7, #22]
 800597e:	e00f      	b.n	80059a0 <adc_setupPin+0x58>
    else if (GPIOx == GPIOB) channel = pin + 8;     // PB0..PB1
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a96      	ldr	r2, [pc, #600]	@ (8005bdc <adc_setupPin+0x294>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <adc_setupPin+0x48>
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	3308      	adds	r3, #8
 800598c:	75bb      	strb	r3, [r7, #22]
 800598e:	e007      	b.n	80059a0 <adc_setupPin+0x58>
    else if (GPIOx == GPIOC) channel = pin + 10;    // PC0..PC5
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a93      	ldr	r2, [pc, #588]	@ (8005be0 <adc_setupPin+0x298>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f040 8115 	bne.w	8005bc4 <adc_setupPin+0x27c>
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	330a      	adds	r3, #10
 800599e:	75bb      	strb	r3, [r7, #22]
    else return; // unsupported port

    // Enable GPIO clock
    if      (GPIOx == GPIOA) RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a8d      	ldr	r2, [pc, #564]	@ (8005bd8 <adc_setupPin+0x290>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d106      	bne.n	80059b6 <adc_setupPin+0x6e>
 80059a8:	4b8e      	ldr	r3, [pc, #568]	@ (8005be4 <adc_setupPin+0x29c>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	4a8d      	ldr	r2, [pc, #564]	@ (8005be4 <adc_setupPin+0x29c>)
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	6193      	str	r3, [r2, #24]
 80059b4:	e014      	b.n	80059e0 <adc_setupPin+0x98>
    else if (GPIOx == GPIOB) RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4a88      	ldr	r2, [pc, #544]	@ (8005bdc <adc_setupPin+0x294>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d106      	bne.n	80059cc <adc_setupPin+0x84>
 80059be:	4b89      	ldr	r3, [pc, #548]	@ (8005be4 <adc_setupPin+0x29c>)
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	4a88      	ldr	r2, [pc, #544]	@ (8005be4 <adc_setupPin+0x29c>)
 80059c4:	f043 0308 	orr.w	r3, r3, #8
 80059c8:	6193      	str	r3, [r2, #24]
 80059ca:	e009      	b.n	80059e0 <adc_setupPin+0x98>
    else if (GPIOx == GPIOC) RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4a84      	ldr	r2, [pc, #528]	@ (8005be0 <adc_setupPin+0x298>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d105      	bne.n	80059e0 <adc_setupPin+0x98>
 80059d4:	4b83      	ldr	r3, [pc, #524]	@ (8005be4 <adc_setupPin+0x29c>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	4a82      	ldr	r2, [pc, #520]	@ (8005be4 <adc_setupPin+0x29c>)
 80059da:	f043 0310 	orr.w	r3, r3, #16
 80059de:	6193      	str	r3, [r2, #24]

    // Configure pin as analog input
    if (pin <= 7) {
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	d80b      	bhi.n	80059fe <adc_setupPin+0xb6>
        GPIOx->CRL &= ~(0xF << (pin * 4)); // MODE=00, CNF=00
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	79fa      	ldrb	r2, [r7, #7]
 80059ec:	0092      	lsls	r2, r2, #2
 80059ee:	210f      	movs	r1, #15
 80059f0:	fa01 f202 	lsl.w	r2, r1, r2
 80059f4:	43d2      	mvns	r2, r2
 80059f6:	401a      	ands	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e00b      	b.n	8005a16 <adc_setupPin+0xce>
    } else {
        GPIOx->CRH &= ~(0xF << ((pin - 8) * 4));
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	3a08      	subs	r2, #8
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	210f      	movs	r1, #15
 8005a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0e:	43d2      	mvns	r2, r2
 8005a10:	401a      	ands	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	605a      	str	r2, [r3, #4]
    }

    // Enable ADC clock
    if      (ADCx == ADC1) RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd0 <adc_setupPin+0x288>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d106      	bne.n	8005a2c <adc_setupPin+0xe4>
 8005a1e:	4b71      	ldr	r3, [pc, #452]	@ (8005be4 <adc_setupPin+0x29c>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	4a70      	ldr	r2, [pc, #448]	@ (8005be4 <adc_setupPin+0x29c>)
 8005a24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a28:	6193      	str	r3, [r2, #24]
 8005a2a:	e009      	b.n	8005a40 <adc_setupPin+0xf8>
    else if (ADCx == ADC2) RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a69      	ldr	r2, [pc, #420]	@ (8005bd4 <adc_setupPin+0x28c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d105      	bne.n	8005a40 <adc_setupPin+0xf8>
 8005a34:	4b6b      	ldr	r3, [pc, #428]	@ (8005be4 <adc_setupPin+0x29c>)
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	4a6a      	ldr	r2, [pc, #424]	@ (8005be4 <adc_setupPin+0x29c>)
 8005a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a3e:	6193      	str	r3, [r2, #24]

    // Append channel to sequence
    uint8_t slot = adc_channel_count[adc_index]; // slot index 0..15
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	4a69      	ldr	r2, [pc, #420]	@ (8005be8 <adc_setupPin+0x2a0>)
 8005a44:	5cd3      	ldrb	r3, [r2, r3]
 8005a46:	757b      	strb	r3, [r7, #21]

    if (slot < 6) {
 8005a48:	7d7b      	ldrb	r3, [r7, #21]
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d81d      	bhi.n	8005a8a <adc_setupPin+0x142>
        ADCx->SQR3 &= ~(0x1F << (slot * 5));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a52:	7d7a      	ldrb	r2, [r7, #21]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	221f      	movs	r2, #31
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	ea01 0203 	and.w	r2, r1, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	635a      	str	r2, [r3, #52]	@ 0x34
        ADCx->SQR3 |=  (channel & 0x1F) << (slot * 5);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a6e:	7dbb      	ldrb	r3, [r7, #22]
 8005a70:	f003 001f 	and.w	r0, r3, #31
 8005a74:	7d7a      	ldrb	r2, [r7, #21]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	fa00 f303 	lsl.w	r3, r0, r3
 8005a80:	ea41 0203 	orr.w	r2, r1, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a88:	e043      	b.n	8005b12 <adc_setupPin+0x1ca>
    }
    else if (slot < 12) {
 8005a8a:	7d7b      	ldrb	r3, [r7, #21]
 8005a8c:	2b0b      	cmp	r3, #11
 8005a8e:	d820      	bhi.n	8005ad2 <adc_setupPin+0x18a>
        uint8_t s = slot - 6;
 8005a90:	7d7b      	ldrb	r3, [r7, #21]
 8005a92:	3b06      	subs	r3, #6
 8005a94:	74fb      	strb	r3, [r7, #19]
        ADCx->SQR2 &= ~(0x1F << (s * 5));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a9a:	7cfa      	ldrb	r2, [r7, #19]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	221f      	movs	r2, #31
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	ea01 0203 	and.w	r2, r1, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
        ADCx->SQR2 |=  (channel & 0x1F) << (s * 5);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ab6:	7dbb      	ldrb	r3, [r7, #22]
 8005ab8:	f003 001f 	and.w	r0, r3, #31
 8005abc:	7cfa      	ldrb	r2, [r7, #19]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	fa00 f303 	lsl.w	r3, r0, r3
 8005ac8:	ea41 0203 	orr.w	r2, r1, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ad0:	e01f      	b.n	8005b12 <adc_setupPin+0x1ca>
    }
    else {
        uint8_t s = slot - 12;
 8005ad2:	7d7b      	ldrb	r3, [r7, #21]
 8005ad4:	3b0c      	subs	r3, #12
 8005ad6:	753b      	strb	r3, [r7, #20]
        ADCx->SQR1 &= ~(0x1F << (s * 5));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005adc:	7d3a      	ldrb	r2, [r7, #20]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	221f      	movs	r2, #31
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	ea01 0203 	and.w	r2, r1, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c
        ADCx->SQR1 |=  (channel & 0x1F) << (s * 5);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005af8:	7dbb      	ldrb	r3, [r7, #22]
 8005afa:	f003 001f 	and.w	r0, r3, #31
 8005afe:	7d3a      	ldrb	r2, [r7, #20]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	fa00 f303 	lsl.w	r3, r0, r3
 8005b0a:	ea41 0203 	orr.w	r2, r1, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    adc_channel_count[adc_index]++;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	4a34      	ldr	r2, [pc, #208]	@ (8005be8 <adc_setupPin+0x2a0>)
 8005b16:	5cd2      	ldrb	r2, [r2, r3]
 8005b18:	3201      	adds	r2, #1
 8005b1a:	b2d1      	uxtb	r1, r2
 8005b1c:	4a32      	ldr	r2, [pc, #200]	@ (8005be8 <adc_setupPin+0x2a0>)
 8005b1e:	54d1      	strb	r1, [r2, r3]

    // Update sequence length (bits [23:20] in SQR1)
    ADCx->SQR1 &= ~(0xF << 20);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR1 |= ((adc_channel_count[adc_index] - 1) & 0xF) << 20;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	492d      	ldr	r1, [pc, #180]	@ (8005be8 <adc_setupPin+0x2a0>)
 8005b34:	5ccb      	ldrb	r3, [r1, r3]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	051b      	lsls	r3, r3, #20
 8005b3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure sample time for the channel (here: max = 239.5 cycles)
    if (channel <= 9) {
 8005b44:	7dbb      	ldrb	r3, [r7, #22]
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d81b      	bhi.n	8005b82 <adc_setupPin+0x23a>
        ADCx->SMPR2 &= ~(0x7 << (channel * 3));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6919      	ldr	r1, [r3, #16]
 8005b4e:	7dba      	ldrb	r2, [r7, #22]
 8005b50:	4613      	mov	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	4413      	add	r3, r2
 8005b56:	2207      	movs	r2, #7
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	ea01 0203 	and.w	r2, r1, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |=  (0x7 << (channel * 3));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6919      	ldr	r1, [r3, #16]
 8005b6a:	7dba      	ldrb	r2, [r7, #22]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	2207      	movs	r2, #7
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	ea41 0203 	orr.w	r2, r1, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
 8005b80:	e021      	b.n	8005bc6 <adc_setupPin+0x27e>
    } else {
        uint8_t c = channel - 10;
 8005b82:	7dbb      	ldrb	r3, [r7, #22]
 8005b84:	3b0a      	subs	r3, #10
 8005b86:	74bb      	strb	r3, [r7, #18]
        ADCx->SMPR1 &= ~(0x7 << (c * 3));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68d9      	ldr	r1, [r3, #12]
 8005b8c:	7cba      	ldrb	r2, [r7, #18]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	2207      	movs	r2, #7
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	ea01 0203 	and.w	r2, r1, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |=  (0x7 << (c * 3));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	7cba      	ldrb	r2, [r7, #18]
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	ea41 0203 	orr.w	r2, r1, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e002      	b.n	8005bc6 <adc_setupPin+0x27e>
    else return; // unsupported ADC
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <adc_setupPin+0x27e>
    else return; // unsupported port
 8005bc4:	bf00      	nop
    }
}
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012400 	.word	0x40012400
 8005bd4:	40012800 	.word	0x40012800
 8005bd8:	40010800 	.word	0x40010800
 8005bdc:	40010c00 	.word	0x40010c00
 8005be0:	40011000 	.word	0x40011000
 8005be4:	40021000 	.word	0x40021000
 8005be8:	20001928 	.word	0x20001928

08005bec <adc_start>:

void adc_start(ADC_TypeDef* ADCx, uint16_t* dmaBuffer, uint16_t length) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
    // 1. Enable ADC clock (safety net)
    if (ADCx == ADC1) RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8005d2c <adc_start+0x140>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d105      	bne.n	8005c0e <adc_start+0x22>
 8005c02:	4b4b      	ldr	r3, [pc, #300]	@ (8005d30 <adc_start+0x144>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	4a4a      	ldr	r2, [pc, #296]	@ (8005d30 <adc_start+0x144>)
 8005c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c0c:	6193      	str	r3, [r2, #24]
    if (ADCx == ADC2) RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a48      	ldr	r2, [pc, #288]	@ (8005d34 <adc_start+0x148>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d105      	bne.n	8005c22 <adc_start+0x36>
 8005c16:	4b46      	ldr	r3, [pc, #280]	@ (8005d30 <adc_start+0x144>)
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	4a45      	ldr	r2, [pc, #276]	@ (8005d30 <adc_start+0x144>)
 8005c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c20:	6193      	str	r3, [r2, #24]

    // 2. Enable ADC
    ADCx->CR2 |= ADC_CR2_ADON;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
    systick_delayMillis(1);
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f000 fcd2 	bl	80065d8 <systick_delayMillis>

    // 3. Calibrate
    ADCx->CR2 |= ADC_CR2_RSTCAL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f043 0208 	orr.w	r2, r3, #8
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
    while (ADCx->CR2 & ADC_CR2_RSTCAL);
 8005c40:	bf00      	nop
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f9      	bne.n	8005c42 <adc_start+0x56>
    ADCx->CR2 |= ADC_CR2_CAL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	609a      	str	r2, [r3, #8]
    while (ADCx->CR2 & ADC_CR2_CAL);
 8005c5a:	bf00      	nop
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f9      	bne.n	8005c5c <adc_start+0x70>

    // 4. Scan + continuous mode
    ADCx->CR1 |= ADC_CR1_SCAN;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	605a      	str	r2, [r3, #4]
    ADCx->CR2 |= ADC_CR2_CONT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f043 0202 	orr.w	r2, r3, #2
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]

    // 5. Alignment
    ADCx->CR2 &= ~ADC_CR2_ALIGN; // Right alignment
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	609a      	str	r2, [r3, #8]

    // 6. DMA mode if requested
    if (dmaBuffer && length > 0) {
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d02a      	beq.n	8005ce8 <adc_start+0xfc>
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d027      	beq.n	8005ce8 <adc_start+0xfc>
        if (ADCx == ADC1) RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1 clock
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	@ (8005d2c <adc_start+0x140>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d105      	bne.n	8005cac <adc_start+0xc0>
 8005ca0:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <adc_start+0x144>)
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	@ (8005d30 <adc_start+0x144>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6153      	str	r3, [r2, #20]

        DMA1_Channel1->CCR = 0; // Disable & reset config
 8005cac:	4b22      	ldr	r3, [pc, #136]	@ (8005d38 <adc_start+0x14c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
        DMA1_Channel1->CPAR = (uint32_t)&ADCx->DR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8005cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d38 <adc_start+0x14c>)
 8005cba:	609a      	str	r2, [r3, #8]
        DMA1_Channel1->CMAR = (uint32_t)dmaBuffer;
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <adc_start+0x14c>)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	60d3      	str	r3, [r2, #12]
        DMA1_Channel1->CNDTR = length;
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <adc_start+0x14c>)
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	6053      	str	r3, [r2, #4]
        DMA1_Channel1->CCR = DMA_CCR_MINC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0 |
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <adc_start+0x14c>)
 8005cca:	f242 52a0 	movw	r2, #9632	@ 0x25a0
 8005cce:	601a      	str	r2, [r3, #0]
                             DMA_CCR_CIRC | DMA_CCR_PL_1; // 16-bit mem & periph, circular, high prio
        DMA1_Channel1->CCR |= DMA_CCR_EN; // Enable channel
 8005cd0:	4b19      	ldr	r3, [pc, #100]	@ (8005d38 <adc_start+0x14c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <adc_start+0x14c>)
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	6013      	str	r3, [r2, #0]

        ADCx->CR2 |= ADC_CR2_DMA; // Enable ADC DMA mode
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]
    }

    // 7. Software start
    ADCx->CR2 &= ~(ADC_CR2_EXTSEL); // Clear EXTSEL
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~ADC_CR2_EXTSEL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= ADC_CR2_EXTSEL_0 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f443 2260 	orr.w	r2, r3, #917504	@ 0xe0000
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= ADC_CR2_EXTTRIG; // Enable trigger
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= ADC_CR2_SWSTART;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40012400 	.word	0x40012400
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40012800 	.word	0x40012800
 8005d38:	40020008 	.word	0x40020008

08005d3c <adc_irqRFlag>:
	adc_irqAttach(adc, type, function);

	__enable_irq();
}

void adc_irqRFlag(ADC_TypeDef* ADCx, TYPE type) {
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
    if (type == EOC) {
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <adc_irqRFlag+0x24>
        // Do nothing — EOC flag is cleared by reading ADCx->DR
    } else if (type == AWD) {
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <adc_irqRFlag+0x24>
        ADCx->SR &= ~(1<<0); // Clear AWD flag
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 0201 	bic.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
    }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr
	...

08005d6c <ADC1_2_IRQHandler>:

/* ========================================================================================================================
 *                                                 IRQ-HANDLERS FUNCTIONS
 * ======================================================================================================================== */

void ADC1_2_IRQHandler() {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
    // EOC for ADC1
    if ((ADC1->SR & (1 << 1)) && adc_exti_callbacks[0][0]) {
 8005d72:	4b2e      	ldr	r3, [pc, #184]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00f      	beq.n	8005d9e <ADC1_2_IRQHandler+0x32>
 8005d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <ADC1_2_IRQHandler+0x32>
        uint16_t value = ADC1->DR;
 8005d86:	4b29      	ldr	r3, [pc, #164]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	80fb      	strh	r3, [r7, #6]
        adc_irqRFlag(ADC1, EOC);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4827      	ldr	r0, [pc, #156]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005d90:	f7ff ffd4 	bl	8005d3c <adc_irqRFlag>
        adc_exti_callbacks[0][0](value);
 8005d94:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4798      	blx	r3
    } // WATCHDOG for ADC1
    if ((ADC1->SR & (1 << 0)) && adc_exti_callbacks[0][1]) {
 8005d9e:	4b23      	ldr	r3, [pc, #140]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00f      	beq.n	8005dca <ADC1_2_IRQHandler+0x5e>
 8005daa:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <ADC1_2_IRQHandler+0x5e>
        uint16_t value = ADC1->DR;
 8005db2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db6:	80bb      	strh	r3, [r7, #4]
        adc_irqRFlag(ADC1, AWD);
 8005db8:	2101      	movs	r1, #1
 8005dba:	481c      	ldr	r0, [pc, #112]	@ (8005e2c <ADC1_2_IRQHandler+0xc0>)
 8005dbc:	f7ff ffbe 	bl	8005d3c <adc_irqRFlag>
        adc_exti_callbacks[0][1](value);
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	88ba      	ldrh	r2, [r7, #4]
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4798      	blx	r3
    }
    // EOC for ADC2
    if ((ADC2->SR & (1 << 1)) && adc_exti_callbacks[1][0]) {
 8005dca:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00f      	beq.n	8005df6 <ADC1_2_IRQHandler+0x8a>
 8005dd6:	4b16      	ldr	r3, [pc, #88]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <ADC1_2_IRQHandler+0x8a>
        uint16_t value = ADC2->DR;
 8005dde:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de2:	807b      	strh	r3, [r7, #2]
        adc_irqRFlag(ADC2, EOC);
 8005de4:	2100      	movs	r1, #0
 8005de6:	4813      	ldr	r0, [pc, #76]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005de8:	f7ff ffa8 	bl	8005d3c <adc_irqRFlag>
        adc_exti_callbacks[1][0](value);
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	887a      	ldrh	r2, [r7, #2]
 8005df2:	4610      	mov	r0, r2
 8005df4:	4798      	blx	r3
    } // WATCHDOG for ADC2
    if ((ADC2->SR & (1 << 0)) && adc_exti_callbacks[1][1]) {
 8005df6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <ADC1_2_IRQHandler+0xb6>
 8005e02:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <ADC1_2_IRQHandler+0xb6>
        uint16_t value = ADC2->DR;
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0e:	803b      	strh	r3, [r7, #0]
        adc_irqRFlag(ADC2, AWD);
 8005e10:	2101      	movs	r1, #1
 8005e12:	4808      	ldr	r0, [pc, #32]	@ (8005e34 <ADC1_2_IRQHandler+0xc8>)
 8005e14:	f7ff ff92 	bl	8005d3c <adc_irqRFlag>
        adc_exti_callbacks[1][1](value);
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <ADC1_2_IRQHandler+0xc4>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	883a      	ldrh	r2, [r7, #0]
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4798      	blx	r3
    }
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40012400 	.word	0x40012400
 8005e30:	20001918 	.word	0x20001918
 8005e34:	40012800 	.word	0x40012800

08005e38 <gpio_setupPin>:
 * @param GPIOx Pointer to GPIO port (GPIOA, GPIOB, GPIOC, GPIOD)
 * @param pin Pin number (0–15)
 * @param mode Pin speed/mode (IN, OUT_10, OUT_2, OUT_50)
 * @param conf Pin configuration (GP_PP, GP_OD, AF_PP, AF_OD, ANALOG, FLOAT, PULLUP)
 */
void gpio_setupPin(GPIO_TypeDef* GPIOx, uint8_t pin, MODE mode, CONFIGURATION conf) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	70fb      	strb	r3, [r7, #3]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70bb      	strb	r3, [r7, #2]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	707b      	strb	r3, [r7, #1]
	/* (RM0008 / 112) Enable clock for GPIO port */
	RCC->APB2ENR |= (1 << (((uint32_t)(GPIOx) - (uint32_t)GPIOA) / 0x400 + 2));
 8005e52:	4b2d      	ldr	r3, [pc, #180]	@ (8005f08 <gpio_setupPin+0xd0>)
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8005e5c:	f5a3 3384 	sub.w	r3, r3, #67584	@ 0x10800
 8005e60:	0a9b      	lsrs	r3, r3, #10
 8005e62:	3302      	adds	r3, #2
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	4927      	ldr	r1, [pc, #156]	@ (8005f08 <gpio_setupPin+0xd0>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	618b      	str	r3, [r1, #24]
	if ((conf == AF_PP) || (conf == AF_OD))
 8005e70:	787b      	ldrb	r3, [r7, #1]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d002      	beq.n	8005e7c <gpio_setupPin+0x44>
 8005e76:	787b      	ldrb	r3, [r7, #1]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d105      	bne.n	8005e88 <gpio_setupPin+0x50>
		RCC->APB2ENR |= (1 << 0); // Bit 0 = AFIOEN
 8005e7c:	4b22      	ldr	r3, [pc, #136]	@ (8005f08 <gpio_setupPin+0xd0>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4a21      	ldr	r2, [pc, #132]	@ (8005f08 <gpio_setupPin+0xd0>)
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	6193      	str	r3, [r2, #24]

	/* (RM0008 / 171) Configure pin mode and function */
	if (pin <= 7) {
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b07      	cmp	r3, #7
 8005e8c:	d818      	bhi.n	8005ec0 <gpio_setupPin+0x88>
		GPIOx->CRL &= ~((0xF) << (pin * 4));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	0092      	lsls	r2, r2, #2
 8005e96:	210f      	movs	r1, #15
 8005e98:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9c:	43d2      	mvns	r2, r2
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= ((mode | (conf << 2)) << (pin * 4));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	78b9      	ldrb	r1, [r7, #2]
 8005eaa:	787a      	ldrb	r2, [r7, #1]
 8005eac:	0092      	lsls	r2, r2, #2
 8005eae:	4311      	orrs	r1, r2
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e019      	b.n	8005ef4 <gpio_setupPin+0xbc>
	} else {
		GPIOx->CRH &= ~((0xF) << ((pin - 8) * 4));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	3a08      	subs	r2, #8
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	210f      	movs	r1, #15
 8005ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed0:	43d2      	mvns	r2, r2
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= ((mode | (conf << 2)) << ((pin - 8) * 4));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	78b9      	ldrb	r1, [r7, #2]
 8005ede:	787a      	ldrb	r2, [r7, #1]
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	4311      	orrs	r1, r2
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	3a08      	subs	r2, #8
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	fa01 f202 	lsl.w	r2, r1, r2
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
	}
	gpio_writePin(GPIOx, pin, LOW);
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f806 	bl	8005f0c <gpio_writePin>
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000

08005f0c <gpio_writePin>:
 *
 * @param GPIOx Pointer to GPIO port
 * @param pin Pin number (0–15)
 * @param pinSTATE State to write (LOW, HIGH, TOGGLE)
 */
void gpio_writePin(GPIO_TypeDef* GPIOx, uint8_t pin, PINSTATE pinSTATE) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	70bb      	strb	r3, [r7, #2]
	/* (RM0008 / 173–174) Atomic write to pin */
	switch (pinSTATE) {
 8005f1c:	78bb      	ldrb	r3, [r7, #2]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d016      	beq.n	8005f50 <gpio_writePin+0x44>
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	dc1e      	bgt.n	8005f64 <gpio_writePin+0x58>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <gpio_writePin+0x24>
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d008      	beq.n	8005f40 <gpio_writePin+0x34>
		case LOW:    GPIOx->BRR  = (1 << pin); break;
		case HIGH:   GPIOx->BSRR = (1 << pin); break;
		case TOGGLE: GPIOx->ODR ^= (1 << pin); break;
	}
}
 8005f2e:	e019      	b.n	8005f64 <gpio_writePin+0x58>
		case LOW:    GPIOx->BRR  = (1 << pin); break;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2201      	movs	r2, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	615a      	str	r2, [r3, #20]
 8005f3e:	e011      	b.n	8005f64 <gpio_writePin+0x58>
		case HIGH:   GPIOx->BSRR = (1 << pin); break;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2201      	movs	r2, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	611a      	str	r2, [r3, #16]
 8005f4e:	e009      	b.n	8005f64 <gpio_writePin+0x58>
		case TOGGLE: GPIOx->ODR ^= (1 << pin); break;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	2101      	movs	r1, #1
 8005f58:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5c:	405a      	eors	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
 8005f62:	bf00      	nop
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <gpio_readPin>:
 *
 * @param GPIOx Pointer to GPIO port
 * @param pin Pin number (0–15)
 * @return uint8_t 1 if pin is HIGH, 0 if LOW
 */
uint8_t gpio_readPin(GPIO_TypeDef* GPIOx, uint8_t pin) {
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
	/* (RM0008 / 172) Read pin state */
	return (GPIOx->IDR & (1 << pin)) ? 1 : 0;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	2101      	movs	r1, #1
 8005f82:	fa01 f202 	lsl.w	r2, r1, r2
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <i2c_setup>:
 *
 * @param I2Cx        Pointer to I2C peripheral (I2C1 or I2C2)
 * @param speedMode   SM or FM
 * @param alternatePins Only used for I2C1: 0 = default PB6/PB7, 1 = remapped PB8/PB9
 */
void i2c_setup(I2C_TypeDef* I2Cx, uint8_t speedMode, ...) {
 8005f9c:	b40e      	push	{r1, r2, r3}
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
    uint8_t i2c = (((uint32_t)I2Cx - (uint32_t)I2C1) / 0x400) + 1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8005fac:	f5a3 43a8 	sub.w	r3, r3, #21504	@ 0x5400
 8005fb0:	0a9b      	lsrs	r3, r3, #10
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	73bb      	strb	r3, [r7, #14]
    uint8_t alternatePins = 0; // default
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]

    if (i2c == 1) {
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d107      	bne.n	8005fd2 <i2c_setup+0x36>
        va_list args;
        va_start(args, speedMode);
 8005fc2:	f107 0320 	add.w	r3, r7, #32
 8005fc6:	60bb      	str	r3, [r7, #8]
        alternatePins = (uint8_t)va_arg(args, int); // grab extra arg
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	60ba      	str	r2, [r7, #8]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	73fb      	strb	r3, [r7, #15]
        va_end(args);
    }

    // Enable clock
    RCC->APB1ENR |= (1 << (20 + i2c));
 8005fd2:	4b40      	ldr	r3, [pc, #256]	@ (80060d4 <i2c_setup+0x138>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	7bba      	ldrb	r2, [r7, #14]
 8005fd8:	3214      	adds	r2, #20
 8005fda:	2101      	movs	r1, #1
 8005fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80060d4 <i2c_setup+0x138>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	61d3      	str	r3, [r2, #28]

    if (i2c == 1) {
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d131      	bne.n	8006052 <i2c_setup+0xb6>
        RCC->APB2ENR |= (1 << 0); // AFIO clock
 8005fee:	4b39      	ldr	r3, [pc, #228]	@ (80060d4 <i2c_setup+0x138>)
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	4a38      	ldr	r2, [pc, #224]	@ (80060d4 <i2c_setup+0x138>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6193      	str	r3, [r2, #24]

        if (alternatePins == 0) {
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <i2c_setup+0x8a>
            AFIO->MAPR &= ~(1 << 8); // default pins
 8006000:	4b35      	ldr	r3, [pc, #212]	@ (80060d8 <i2c_setup+0x13c>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <i2c_setup+0x13c>)
 8006006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800600a:	6053      	str	r3, [r2, #4]
            gpio_setupPin(GPIOB, 6, OUT_50, AF_OD);
 800600c:	2303      	movs	r3, #3
 800600e:	2203      	movs	r2, #3
 8006010:	2106      	movs	r1, #6
 8006012:	4832      	ldr	r0, [pc, #200]	@ (80060dc <i2c_setup+0x140>)
 8006014:	f7ff ff10 	bl	8005e38 <gpio_setupPin>
            gpio_setupPin(GPIOB, 7, OUT_50, AF_OD);
 8006018:	2303      	movs	r3, #3
 800601a:	2203      	movs	r2, #3
 800601c:	2107      	movs	r1, #7
 800601e:	482f      	ldr	r0, [pc, #188]	@ (80060dc <i2c_setup+0x140>)
 8006020:	f7ff ff0a 	bl	8005e38 <gpio_setupPin>
 8006024:	e024      	b.n	8006070 <i2c_setup+0xd4>
        } else if (alternatePins == 1) {
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d121      	bne.n	8006070 <i2c_setup+0xd4>
            AFIO->MAPR |= (1 << 8); // remapped
 800602c:	4b2a      	ldr	r3, [pc, #168]	@ (80060d8 <i2c_setup+0x13c>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <i2c_setup+0x13c>)
 8006032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006036:	6053      	str	r3, [r2, #4]
            gpio_setupPin(GPIOB, 8, OUT_50, AF_OD);
 8006038:	2303      	movs	r3, #3
 800603a:	2203      	movs	r2, #3
 800603c:	2108      	movs	r1, #8
 800603e:	4827      	ldr	r0, [pc, #156]	@ (80060dc <i2c_setup+0x140>)
 8006040:	f7ff fefa 	bl	8005e38 <gpio_setupPin>
            gpio_setupPin(GPIOB, 9, OUT_50, AF_OD);
 8006044:	2303      	movs	r3, #3
 8006046:	2203      	movs	r2, #3
 8006048:	2109      	movs	r1, #9
 800604a:	4824      	ldr	r0, [pc, #144]	@ (80060dc <i2c_setup+0x140>)
 800604c:	f7ff fef4 	bl	8005e38 <gpio_setupPin>
 8006050:	e00e      	b.n	8006070 <i2c_setup+0xd4>
        }
    } else if (i2c == 2) {
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d10b      	bne.n	8006070 <i2c_setup+0xd4>
        gpio_setupPin(GPIOB, 10, OUT_50, AF_OD);
 8006058:	2303      	movs	r3, #3
 800605a:	2203      	movs	r2, #3
 800605c:	210a      	movs	r1, #10
 800605e:	481f      	ldr	r0, [pc, #124]	@ (80060dc <i2c_setup+0x140>)
 8006060:	f7ff feea 	bl	8005e38 <gpio_setupPin>
        gpio_setupPin(GPIOB, 11, OUT_50, AF_OD);
 8006064:	2303      	movs	r3, #3
 8006066:	2203      	movs	r2, #3
 8006068:	210b      	movs	r1, #11
 800606a:	481c      	ldr	r0, [pc, #112]	@ (80060dc <i2c_setup+0x140>)
 800606c:	f7ff fee4 	bl	8005e38 <gpio_setupPin>
    }

    // Software reset
    I2Cx->CR1 |= 0x8000;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
    I2Cx->CR1 &= ~0x8000;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]

    // Configure speed
    I2Cx->CR2 = 36;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	605a      	str	r2, [r3, #4]
    I2Cx->CCR = speedMode;
 800608e:	7f3a      	ldrb	r2, [r7, #28]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	61da      	str	r2, [r3, #28]
    if (speedMode == SM) I2Cx->TRISE = 37;
 8006094:	7f3b      	ldrb	r3, [r7, #28]
 8006096:	2bb4      	cmp	r3, #180	@ 0xb4
 8006098:	d103      	bne.n	80060a2 <i2c_setup+0x106>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2225      	movs	r2, #37	@ 0x25
 800609e:	621a      	str	r2, [r3, #32]
 80060a0:	e00b      	b.n	80060ba <i2c_setup+0x11e>
    else if (speedMode == FM) { I2Cx->CCR |= (1 << 15); I2Cx->TRISE = 12; }
 80060a2:	7f3b      	ldrb	r3, [r7, #28]
 80060a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80060a6:	d108      	bne.n	80060ba <i2c_setup+0x11e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	61da      	str	r2, [r3, #28]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	220c      	movs	r2, #12
 80060b8:	621a      	str	r2, [r3, #32]

    I2Cx->CR1 |= (1 << 0); // Enable I2C
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060d0:	b003      	add	sp, #12
 80060d2:	4770      	bx	lr
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40010c00 	.word	0x40010c00

080060e0 <i2c_start>:
 * @brief Sends a START condition.
 *
 * @param I2Cx Pointer to I2C peripheral
 * @return 0 if success, 1 if timeout
 */
uint8_t i2c_start(I2C_TypeDef* I2Cx) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	uint16_t timeout = i2c_timeout;
 80060e8:	2332      	movs	r3, #50	@ 0x32
 80060ea:	81fb      	strh	r3, [r7, #14]
	I2Cx->CR1 |= (1 << 8);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & (1 << 0)) && timeout--) systick_delayMillis(1);
 80060f8:	e002      	b.n	8006100 <i2c_start+0x20>
 80060fa:	2001      	movs	r0, #1
 80060fc:	f000 fa6c 	bl	80065d8 <systick_delayMillis>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <i2c_start+0x36>
 800610c:	89fb      	ldrh	r3, [r7, #14]
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	81fa      	strh	r2, [r7, #14]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f1      	bne.n	80060fa <i2c_start+0x1a>
	return (I2Cx->SR1 & (1 << 0)) ? 0 : 1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <i2c_address>:
 * @param I2Cx I2C peripheral
 * @param address 7-bit slave address
 * @param RW READ or WRITE
 * @return 0 if ACK received, 1 if NACK or timeout
 */
uint8_t i2c_address(I2C_TypeDef* I2Cx, uint8_t address, RWSTATUS RW) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
 800613c:	4613      	mov	r3, r2
 800613e:	70bb      	strb	r3, [r7, #2]
	I2Cx->DR = ((address << 1) | RW);
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	005a      	lsls	r2, r3, #1
 8006144:	78bb      	ldrb	r3, [r7, #2]
 8006146:	4313      	orrs	r3, r2
 8006148:	461a      	mov	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]

	uint16_t timeout = i2c_timeout;
 800614e:	2332      	movs	r3, #50	@ 0x32
 8006150:	81fb      	strh	r3, [r7, #14]
	while (!(I2Cx->SR1 & (1 << 1)) && timeout--) systick_delayMillis(1);
 8006152:	e002      	b.n	800615a <i2c_address+0x2a>
 8006154:	2001      	movs	r0, #1
 8006156:	f000 fa3f 	bl	80065d8 <systick_delayMillis>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <i2c_address+0x40>
 8006166:	89fb      	ldrh	r3, [r7, #14]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	81fa      	strh	r2, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f1      	bne.n	8006154 <i2c_address+0x24>
	if (!(I2Cx->SR1 & (1 << 1))) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d107      	bne.n	800618c <i2c_address+0x5c>
		I2Cx->SR1 &= ~(1 << 10); // Clear AF
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	615a      	str	r2, [r3, #20]
		return 1;
 8006188:	2301      	movs	r3, #1
 800618a:	e007      	b.n	800619c <i2c_address+0x6c>
	}

	volatile uint32_t temp;
	temp = I2Cx->SR1;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	60bb      	str	r3, [r7, #8]
	temp = I2Cx->SR2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60bb      	str	r3, [r7, #8]
	(void)temp;
 8006198:	68bb      	ldr	r3, [r7, #8]

	return 0;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <i2c_sendData>:
 * @brief Sends one byte of data.
 *
 * @param I2Cx I2C peripheral
 * @param data Byte to send
 */
void i2c_sendData(I2C_TypeDef* I2Cx, uint8_t data) {
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
	while (!(I2Cx->SR1 & (1 << 7)));
 80061b0:	bf00      	nop
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f9      	beq.n	80061b2 <i2c_sendData+0xe>
	I2Cx->DR = data;
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	611a      	str	r2, [r3, #16]
	while (!(I2Cx->SR1 & (1 << 7)));
 80061c4:	bf00      	nop
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f9      	beq.n	80061c6 <i2c_sendData+0x22>
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <i2c_stop>:
/**
 * @brief Sends STOP condition and ensures bus is released.
 *
 * @param I2Cx I2C peripheral
 */
void i2c_stop(I2C_TypeDef* I2Cx) {
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
	volatile uint32_t temp;
	while (I2Cx->SR1 & (1 << 1)) {
 80061e6:	e005      	b.n	80061f4 <i2c_stop+0x16>
		temp = I2Cx->SR1;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	60fb      	str	r3, [r7, #12]
		temp = I2Cx->SR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	60fb      	str	r3, [r7, #12]
	while (I2Cx->SR1 & (1 << 1)) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f3      	bne.n	80061e8 <i2c_stop+0xa>
	}
	(void)temp;
 8006200:	68fb      	ldr	r3, [r7, #12]

	I2Cx->CR1 |= (1 << 9);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
}
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006226:	2b00      	cmp	r3, #0
 8006228:	db0b      	blt.n	8006242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	f003 021f 	and.w	r2, r3, #31
 8006230:	4906      	ldr	r1, [pc, #24]	@ (800624c <__NVIC_EnableIRQ+0x34>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2001      	movs	r0, #1
 800623a:	fa00 f202 	lsl.w	r2, r0, r2
 800623e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	e000e100 	.word	0xe000e100

08006250 <interrupts_attach>:
 * @param GPIOx Pointer to the GPIO port
 * @param pin Pin number (0–15)
 * @param edgeSTATE Type of edge to trigger the interrupt
 * @param function Pointer to callback function
 */
void interrupts_attach(GPIO_TypeDef* GPIOx, uint8_t pin, EDGESTATE edgeSTATE, void (*function)(void)) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	72fb      	strb	r3, [r7, #11]
 800625e:	4613      	mov	r3, r2
 8006260:	72bb      	strb	r3, [r7, #10]
  __ASM volatile ("cpsid i" : : : "memory");
 8006262:	b672      	cpsid	i
}
 8006264:	bf00      	nop
	__disable_irq();

	gpio_setupPin(GPIOx, pin, IN, PULLUP);
 8006266:	7af9      	ldrb	r1, [r7, #11]
 8006268:	2302      	movs	r3, #2
 800626a:	2200      	movs	r2, #0
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff fde3 	bl	8005e38 <gpio_setupPin>

	AFIO->EXTICR[pin / 4] &= ~(0xF << ((pin % 4) * 4));
 8006272:	4a57      	ldr	r2, [pc, #348]	@ (80063d0 <interrupts_attach+0x180>)
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	b2d8      	uxtb	r0, r3
 800627a:	4603      	mov	r3, r0
 800627c:	3302      	adds	r3, #2
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	7afa      	ldrb	r2, [r7, #11]
 8006284:	f002 0203 	and.w	r2, r2, #3
 8006288:	0092      	lsls	r2, r2, #2
 800628a:	210f      	movs	r1, #15
 800628c:	fa01 f202 	lsl.w	r2, r1, r2
 8006290:	43d2      	mvns	r2, r2
 8006292:	494f      	ldr	r1, [pc, #316]	@ (80063d0 <interrupts_attach+0x180>)
 8006294:	401a      	ands	r2, r3
 8006296:	1c83      	adds	r3, r0, #2
 8006298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[pin / 4] |= ((((uint32_t)(GPIOx) - (uint32_t)GPIOA) / 0x400) << ((pin % 4) * 4));
 800629c:	4a4c      	ldr	r2, [pc, #304]	@ (80063d0 <interrupts_attach+0x180>)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	089b      	lsrs	r3, r3, #2
 80062a2:	b2d8      	uxtb	r0, r3
 80062a4:	4603      	mov	r3, r0
 80062a6:	3302      	adds	r3, #2
 80062a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80062b2:	f5a3 3384 	sub.w	r3, r3, #67584	@ 0x10800
 80062b6:	0a99      	lsrs	r1, r3, #10
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	4942      	ldr	r1, [pc, #264]	@ (80063d0 <interrupts_attach+0x180>)
 80062c6:	431a      	orrs	r2, r3
 80062c8:	1c83      	adds	r3, r0, #2
 80062ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR &= ~(1 << pin);  // Mask before config
 80062ce:	4b41      	ldr	r3, [pc, #260]	@ (80063d4 <interrupts_attach+0x184>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	7afa      	ldrb	r2, [r7, #11]
 80062d4:	2101      	movs	r1, #1
 80062d6:	fa01 f202 	lsl.w	r2, r1, r2
 80062da:	43d2      	mvns	r2, r2
 80062dc:	4611      	mov	r1, r2
 80062de:	4a3d      	ldr	r2, [pc, #244]	@ (80063d4 <interrupts_attach+0x184>)
 80062e0:	400b      	ands	r3, r1
 80062e2:	6013      	str	r3, [r2, #0]

	switch (edgeSTATE) {
 80062e4:	7abb      	ldrb	r3, [r7, #10]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d032      	beq.n	8006350 <interrupts_attach+0x100>
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	dc45      	bgt.n	800637a <interrupts_attach+0x12a>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <interrupts_attach+0xa8>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d016      	beq.n	8006324 <interrupts_attach+0xd4>
 80062f6:	e040      	b.n	800637a <interrupts_attach+0x12a>
		case RISING:  EXTI->FTSR &= ~(1 << pin); EXTI->RTSR |=  (1 << pin); break;
 80062f8:	4b36      	ldr	r3, [pc, #216]	@ (80063d4 <interrupts_attach+0x184>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	7afa      	ldrb	r2, [r7, #11]
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f202 	lsl.w	r2, r1, r2
 8006304:	43d2      	mvns	r2, r2
 8006306:	4611      	mov	r1, r2
 8006308:	4a32      	ldr	r2, [pc, #200]	@ (80063d4 <interrupts_attach+0x184>)
 800630a:	400b      	ands	r3, r1
 800630c:	60d3      	str	r3, [r2, #12]
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <interrupts_attach+0x184>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	7afa      	ldrb	r2, [r7, #11]
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f202 	lsl.w	r2, r1, r2
 800631a:	4611      	mov	r1, r2
 800631c:	4a2d      	ldr	r2, [pc, #180]	@ (80063d4 <interrupts_attach+0x184>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6093      	str	r3, [r2, #8]
 8006322:	e02a      	b.n	800637a <interrupts_attach+0x12a>
		case FALLING: EXTI->RTSR &= ~(1 << pin); EXTI->FTSR |=  (1 << pin); break;
 8006324:	4b2b      	ldr	r3, [pc, #172]	@ (80063d4 <interrupts_attach+0x184>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	7afa      	ldrb	r2, [r7, #11]
 800632a:	2101      	movs	r1, #1
 800632c:	fa01 f202 	lsl.w	r2, r1, r2
 8006330:	43d2      	mvns	r2, r2
 8006332:	4611      	mov	r1, r2
 8006334:	4a27      	ldr	r2, [pc, #156]	@ (80063d4 <interrupts_attach+0x184>)
 8006336:	400b      	ands	r3, r1
 8006338:	6093      	str	r3, [r2, #8]
 800633a:	4b26      	ldr	r3, [pc, #152]	@ (80063d4 <interrupts_attach+0x184>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	7afa      	ldrb	r2, [r7, #11]
 8006340:	2101      	movs	r1, #1
 8006342:	fa01 f202 	lsl.w	r2, r1, r2
 8006346:	4611      	mov	r1, r2
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <interrupts_attach+0x184>)
 800634a:	430b      	orrs	r3, r1
 800634c:	60d3      	str	r3, [r2, #12]
 800634e:	e014      	b.n	800637a <interrupts_attach+0x12a>
		case CHANGE:  EXTI->FTSR |=  (1 << pin); EXTI->RTSR |=  (1 << pin); break;
 8006350:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <interrupts_attach+0x184>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	7afa      	ldrb	r2, [r7, #11]
 8006356:	2101      	movs	r1, #1
 8006358:	fa01 f202 	lsl.w	r2, r1, r2
 800635c:	4611      	mov	r1, r2
 800635e:	4a1d      	ldr	r2, [pc, #116]	@ (80063d4 <interrupts_attach+0x184>)
 8006360:	430b      	orrs	r3, r1
 8006362:	60d3      	str	r3, [r2, #12]
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <interrupts_attach+0x184>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	7afa      	ldrb	r2, [r7, #11]
 800636a:	2101      	movs	r1, #1
 800636c:	fa01 f202 	lsl.w	r2, r1, r2
 8006370:	4611      	mov	r1, r2
 8006372:	4a18      	ldr	r2, [pc, #96]	@ (80063d4 <interrupts_attach+0x184>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6093      	str	r3, [r2, #8]
 8006378:	bf00      	nop
	}

	EXTI->IMR |= (1 << pin);  // Enable interrupt
 800637a:	4b16      	ldr	r3, [pc, #88]	@ (80063d4 <interrupts_attach+0x184>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	7afa      	ldrb	r2, [r7, #11]
 8006380:	2101      	movs	r1, #1
 8006382:	fa01 f202 	lsl.w	r2, r1, r2
 8006386:	4611      	mov	r1, r2
 8006388:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <interrupts_attach+0x184>)
 800638a:	430b      	orrs	r3, r1
 800638c:	6013      	str	r3, [r2, #0]

	if      (pin <= 4) NVIC_EnableIRQ(EXTI0_IRQn + pin);
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d807      	bhi.n	80063a4 <interrupts_attach+0x154>
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3306      	adds	r3, #6
 8006398:	b2db      	uxtb	r3, r3
 800639a:	b25b      	sxtb	r3, r3
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff ff3b 	bl	8006218 <__NVIC_EnableIRQ>
 80063a2:	e009      	b.n	80063b8 <interrupts_attach+0x168>
	else if (pin <= 9) NVIC_EnableIRQ(EXTI9_5_IRQn);
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	d803      	bhi.n	80063b2 <interrupts_attach+0x162>
 80063aa:	2017      	movs	r0, #23
 80063ac:	f7ff ff34 	bl	8006218 <__NVIC_EnableIRQ>
 80063b0:	e002      	b.n	80063b8 <interrupts_attach+0x168>
	else               NVIC_EnableIRQ(EXTI15_10_IRQn);
 80063b2:	2028      	movs	r0, #40	@ 0x28
 80063b4:	f7ff ff30 	bl	8006218 <__NVIC_EnableIRQ>

	interrupts_exti_callbacks[pin] = function;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	4907      	ldr	r1, [pc, #28]	@ (80063d8 <interrupts_attach+0x188>)
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("cpsie i" : : : "memory");
 80063c2:	b662      	cpsie	i
}
 80063c4:	bf00      	nop

	__enable_irq();
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40010400 	.word	0x40010400
 80063d8:	2000192c 	.word	0x2000192c

080063dc <EXTI0_IRQHandler>:
 * ======================================================================================================================== */

/**
 * @brief EXTI0 interrupt handler
 */
void EXTI0_IRQHandler(void) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 0)) {
 80063e0:	4b08      	ldr	r3, [pc, #32]	@ (8006404 <EXTI0_IRQHandler+0x28>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <EXTI0_IRQHandler+0x24>
		EXTI->PR = (1 << 0);
 80063ec:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <EXTI0_IRQHandler+0x28>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]
		if (interrupts_exti_callbacks[0]) interrupts_exti_callbacks[0]();
 80063f2:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <EXTI0_IRQHandler+0x2c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <EXTI0_IRQHandler+0x24>
 80063fa:	4b03      	ldr	r3, [pc, #12]	@ (8006408 <EXTI0_IRQHandler+0x2c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4798      	blx	r3
	}
}
 8006400:	bf00      	nop
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40010400 	.word	0x40010400
 8006408:	2000192c 	.word	0x2000192c

0800640c <EXTI1_IRQHandler>:

/**
 * @brief EXTI1 interrupt handler
 */
void EXTI1_IRQHandler(void) {
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 1)) {
 8006410:	4b08      	ldr	r3, [pc, #32]	@ (8006434 <EXTI1_IRQHandler+0x28>)
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <EXTI1_IRQHandler+0x24>
		EXTI->PR = (1 << 1);
 800641c:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <EXTI1_IRQHandler+0x28>)
 800641e:	2202      	movs	r2, #2
 8006420:	615a      	str	r2, [r3, #20]
		if (interrupts_exti_callbacks[1]) interrupts_exti_callbacks[1]();
 8006422:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <EXTI1_IRQHandler+0x2c>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <EXTI1_IRQHandler+0x24>
 800642a:	4b03      	ldr	r3, [pc, #12]	@ (8006438 <EXTI1_IRQHandler+0x2c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4798      	blx	r3
	}
}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40010400 	.word	0x40010400
 8006438:	2000192c 	.word	0x2000192c

0800643c <EXTI2_IRQHandler>:

/**
 * @brief EXTI2 interrupt handler
 */
void EXTI2_IRQHandler(void) {
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 2)) {
 8006440:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <EXTI2_IRQHandler+0x28>)
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <EXTI2_IRQHandler+0x24>
		EXTI->PR = (1 << 2);
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <EXTI2_IRQHandler+0x28>)
 800644e:	2204      	movs	r2, #4
 8006450:	615a      	str	r2, [r3, #20]
		if (interrupts_exti_callbacks[2]) interrupts_exti_callbacks[2]();
 8006452:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <EXTI2_IRQHandler+0x2c>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <EXTI2_IRQHandler+0x24>
 800645a:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <EXTI2_IRQHandler+0x2c>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	4798      	blx	r3
	}
}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40010400 	.word	0x40010400
 8006468:	2000192c 	.word	0x2000192c

0800646c <EXTI3_IRQHandler>:

/**
 * @brief EXTI3 interrupt handler
 */
void EXTI3_IRQHandler(void) {
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 3)) {
 8006470:	4b08      	ldr	r3, [pc, #32]	@ (8006494 <EXTI3_IRQHandler+0x28>)
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <EXTI3_IRQHandler+0x24>
		EXTI->PR = (1 << 3);
 800647c:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <EXTI3_IRQHandler+0x28>)
 800647e:	2208      	movs	r2, #8
 8006480:	615a      	str	r2, [r3, #20]
		if (interrupts_exti_callbacks[3]) interrupts_exti_callbacks[3]();
 8006482:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <EXTI3_IRQHandler+0x2c>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <EXTI3_IRQHandler+0x24>
 800648a:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <EXTI3_IRQHandler+0x2c>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4798      	blx	r3
	}
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40010400 	.word	0x40010400
 8006498:	2000192c 	.word	0x2000192c

0800649c <EXTI4_IRQHandler>:

/**
 * @brief EXTI4 interrupt handler
 */
void EXTI4_IRQHandler(void) {
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 4)) {
 80064a0:	4b08      	ldr	r3, [pc, #32]	@ (80064c4 <EXTI4_IRQHandler+0x28>)
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <EXTI4_IRQHandler+0x24>
		EXTI->PR = (1 << 4);
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <EXTI4_IRQHandler+0x28>)
 80064ae:	2210      	movs	r2, #16
 80064b0:	615a      	str	r2, [r3, #20]
		if (interrupts_exti_callbacks[4]) interrupts_exti_callbacks[4]();
 80064b2:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <EXTI4_IRQHandler+0x2c>)
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <EXTI4_IRQHandler+0x24>
 80064ba:	4b03      	ldr	r3, [pc, #12]	@ (80064c8 <EXTI4_IRQHandler+0x2c>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4798      	blx	r3
	}
}
 80064c0:	bf00      	nop
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40010400 	.word	0x40010400
 80064c8:	2000192c 	.word	0x2000192c

080064cc <EXTI9_5_IRQHandler>:

/**
 * @brief Shared EXTI5–EXTI9 interrupt handler
 */
void EXTI9_5_IRQHandler(void) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
	for (uint8_t i = 5; i <= 9; i++) {
 80064d2:	2305      	movs	r3, #5
 80064d4:	71fb      	strb	r3, [r7, #7]
 80064d6:	e01b      	b.n	8006510 <EXTI9_5_IRQHandler+0x44>
		if (EXTI->PR & (1 << i)) {
 80064d8:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <EXTI9_5_IRQHandler+0x54>)
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	79fa      	ldrb	r2, [r7, #7]
 80064de:	2101      	movs	r1, #1
 80064e0:	fa01 f202 	lsl.w	r2, r1, r2
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00f      	beq.n	800650a <EXTI9_5_IRQHandler+0x3e>
			EXTI->PR = (1 << i);
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	2201      	movs	r2, #1
 80064ee:	409a      	lsls	r2, r3
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <EXTI9_5_IRQHandler+0x54>)
 80064f2:	615a      	str	r2, [r3, #20]
			if (interrupts_exti_callbacks[i]) interrupts_exti_callbacks[i]();
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006524 <EXTI9_5_IRQHandler+0x58>)
 80064f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <EXTI9_5_IRQHandler+0x3e>
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <EXTI9_5_IRQHandler+0x58>)
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	4798      	blx	r3
	for (uint8_t i = 5; i <= 9; i++) {
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	3301      	adds	r3, #1
 800650e:	71fb      	strb	r3, [r7, #7]
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	2b09      	cmp	r3, #9
 8006514:	d9e0      	bls.n	80064d8 <EXTI9_5_IRQHandler+0xc>
		}
	}
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40010400 	.word	0x40010400
 8006524:	2000192c 	.word	0x2000192c

08006528 <EXTI15_10_IRQHandler>:

/**
 * @brief Shared EXTI10–EXTI15 interrupt handler
 */
void EXTI15_10_IRQHandler(void) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i <= 15; i++) {
 800652e:	230a      	movs	r3, #10
 8006530:	71fb      	strb	r3, [r7, #7]
 8006532:	e01b      	b.n	800656c <EXTI15_10_IRQHandler+0x44>
		if (EXTI->PR & (1 << i)) {
 8006534:	4b11      	ldr	r3, [pc, #68]	@ (800657c <EXTI15_10_IRQHandler+0x54>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	79fa      	ldrb	r2, [r7, #7]
 800653a:	2101      	movs	r1, #1
 800653c:	fa01 f202 	lsl.w	r2, r1, r2
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00f      	beq.n	8006566 <EXTI15_10_IRQHandler+0x3e>
			EXTI->PR = (1 << i);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <EXTI15_10_IRQHandler+0x54>)
 800654e:	615a      	str	r2, [r3, #20]
			if (interrupts_exti_callbacks[i]) interrupts_exti_callbacks[i]();
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	4a0b      	ldr	r2, [pc, #44]	@ (8006580 <EXTI15_10_IRQHandler+0x58>)
 8006554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <EXTI15_10_IRQHandler+0x3e>
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	4a08      	ldr	r2, [pc, #32]	@ (8006580 <EXTI15_10_IRQHandler+0x58>)
 8006560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006564:	4798      	blx	r3
	for (uint8_t i = 10; i <= 15; i++) {
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	3301      	adds	r3, #1
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	d9e0      	bls.n	8006534 <EXTI15_10_IRQHandler+0xc>
		}
	}
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40010400 	.word	0x40010400
 8006580:	2000192c 	.word	0x2000192c

08006584 <systick_setup>:
 * ======================================================================================================================== */

/**
 * @brief Configures the SysTick timer for 1ms ticks (72 MHz system clock).
 */
void systick_setup(void) {
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;         // Disable SysTick
 8006588:	4b07      	ldr	r3, [pc, #28]	@ (80065a8 <systick_setup+0x24>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 72000 - 1; // 1ms tick @ 72 MHz
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <systick_setup+0x24>)
 8006590:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <systick_setup+0x28>)
 8006592:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;         // Reset current value
 8006594:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <systick_setup+0x24>)
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;         // Enable SysTick with processor clock, no interrupt
 800659a:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <systick_setup+0x24>)
 800659c:	2205      	movs	r2, #5
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	e000e010 	.word	0xe000e010
 80065ac:	0001193f 	.word	0x0001193f

080065b0 <systick_milliSecond>:
 * ======================================================================================================================== */

/**
 * @brief Blocks execution for exactly 1 millisecond.
 */
void systick_milliSecond(void) {
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
	SysTick->VAL = 0;                     // Reset current value
 80065b4:	4b07      	ldr	r3, [pc, #28]	@ (80065d4 <systick_milliSecond+0x24>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	609a      	str	r2, [r3, #8]
	while ((SysTick->CTRL & (1 << 16)) == 0); // Wait for COUNTFLAG
 80065ba:	bf00      	nop
 80065bc:	4b05      	ldr	r3, [pc, #20]	@ (80065d4 <systick_milliSecond+0x24>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f9      	beq.n	80065bc <systick_milliSecond+0xc>
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	e000e010 	.word	0xe000e010

080065d8 <systick_delayMillis>:

/**
 * @brief Blocks execution for a specified number of milliseconds.
 * @param del Number of milliseconds to delay.
 */
void systick_delayMillis(uint16_t del) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	80fb      	strh	r3, [r7, #6]
	while (del--) systick_milliSecond();
 80065e2:	e001      	b.n	80065e8 <systick_delayMillis+0x10>
 80065e4:	f7ff ffe4 	bl	80065b0 <systick_milliSecond>
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	80fa      	strh	r2, [r7, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f8      	bne.n	80065e4 <systick_delayMillis+0xc>
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <__NVIC_EnableIRQ>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660a:	2b00      	cmp	r3, #0
 800660c:	db0b      	blt.n	8006626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	f003 021f 	and.w	r2, r3, #31
 8006614:	4906      	ldr	r1, [pc, #24]	@ (8006630 <__NVIC_EnableIRQ+0x34>)
 8006616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	2001      	movs	r0, #1
 800661e:	fa00 f202 	lsl.w	r2, r0, r2
 8006622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	e000e100 	.word	0xe000e100

08006634 <timers_setup>:
 * ======================================================================================================================== */

/**
 * @brief Initializes the given timer with the desired time base (MICROS or MILLIS).
 */
void timers_setup(TIM_TypeDef* TIMx, TimeBase unit) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
	uint8_t timer = timers_getNum(TIMx);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9ad 	bl	80069a0 <timers_getNum>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

	if      (timer == 1) { RCC->APB2ENR |= (1 << 11); }
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d106      	bne.n	800665e <timers_setup+0x2a>
 8006650:	4b14      	ldr	r3, [pc, #80]	@ (80066a4 <timers_setup+0x70>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	4a13      	ldr	r2, [pc, #76]	@ (80066a4 <timers_setup+0x70>)
 8006656:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800665a:	6193      	str	r3, [r2, #24]
 800665c:	e00d      	b.n	800667a <timers_setup+0x46>
	else if (timer <= 4) { RCC->APB1ENR |= (1 << (timer - 2)); }
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d80a      	bhi.n	800667a <timers_setup+0x46>
 8006664:	4b0f      	ldr	r3, [pc, #60]	@ (80066a4 <timers_setup+0x70>)
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	7bfa      	ldrb	r2, [r7, #15]
 800666a:	3a02      	subs	r2, #2
 800666c:	2101      	movs	r1, #1
 800666e:	fa01 f202 	lsl.w	r2, r1, r2
 8006672:	4611      	mov	r1, r2
 8006674:	4a0b      	ldr	r2, [pc, #44]	@ (80066a4 <timers_setup+0x70>)
 8006676:	430b      	orrs	r3, r1
 8006678:	61d3      	str	r3, [r2, #28]

	TIMx->CNT = 0;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->PSC = (unit == MICROS) ? (F_CPU / 1000000UL) - 1 : (F_CPU / 1000UL) - 1;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <timers_setup+0x56>
 8006686:	2247      	movs	r2, #71	@ 0x47
 8006688:	e000      	b.n	800668c <timers_setup+0x58>
 800668a:	4a07      	ldr	r2, [pc, #28]	@ (80066a8 <timers_setup+0x74>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMx->CR1 &= ~(1 << 0); // Disable Counter
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	601a      	str	r2, [r3, #0]
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000
 80066a8:	0001193f 	.word	0x0001193f

080066ac <timers_start>:
 * ======================================================================================================================== */

/**
 * @brief Starts a timer in continuous mode with the specified delay and time base.
 */
void timers_start(TIM_TypeDef* TIMx, uint16_t del, TimeBase unit) {
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
 80066b8:	4613      	mov	r3, r2
 80066ba:	707b      	strb	r3, [r7, #1]
	if (del == 0) return;
 80066bc:	887b      	ldrh	r3, [r7, #2]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <timers_start+0x44>

	TIMx->CNT = 0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMx->PSC = (unit == MICROS) ? (F_CPU / 1000000UL - 1) : (F_CPU / 1000UL - 1);
 80066c8:	787b      	ldrb	r3, [r7, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <timers_start+0x26>
 80066ce:	2247      	movs	r2, #71	@ 0x47
 80066d0:	e000      	b.n	80066d4 <timers_start+0x28>
 80066d2:	4a0a      	ldr	r2, [pc, #40]	@ (80066fc <timers_start+0x50>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMx->ARR = del - 1;
 80066d8:	887b      	ldrh	r3, [r7, #2]
 80066da:	3b01      	subs	r3, #1
 80066dc:	461a      	mov	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIMx->CR1 |= TIM_CR1_CEN;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f043 0201 	orr.w	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e000      	b.n	80066f2 <timers_start+0x46>
	if (del == 0) return;
 80066f0:	bf00      	nop
}
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	0001193f 	.word	0x0001193f

08006700 <timers_irqStart>:
 * ======================================================================================================================== */

/**
 * @brief Enables timer interrupt and attaches a callback to it.
 */
void timers_irqStart(TIM_TypeDef* TIMx, void (*function)(void)) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	TIMx->DIER |= 1; // Enable update interrupt
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006716:	b672      	cpsid	i
}
 8006718:	bf00      	nop

	__disable_irq();
	uint8_t timer = timers_getNum(TIMx);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f940 	bl	80069a0 <timers_getNum>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]

	switch (timer) {
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	3b01      	subs	r3, #1
 8006728:	2b03      	cmp	r3, #3
 800672a:	d81b      	bhi.n	8006764 <timers_irqStart+0x64>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <timers_irqStart+0x34>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006745 	.word	0x08006745
 8006738:	0800674d 	.word	0x0800674d
 800673c:	08006755 	.word	0x08006755
 8006740:	0800675d 	.word	0x0800675d
		case 1: NVIC_EnableIRQ(TIM1_UP_IRQn); break;
 8006744:	2019      	movs	r0, #25
 8006746:	f7ff ff59 	bl	80065fc <__NVIC_EnableIRQ>
 800674a:	e00b      	b.n	8006764 <timers_irqStart+0x64>
		case 2: NVIC_EnableIRQ(TIM2_IRQn);    break;
 800674c:	201c      	movs	r0, #28
 800674e:	f7ff ff55 	bl	80065fc <__NVIC_EnableIRQ>
 8006752:	e007      	b.n	8006764 <timers_irqStart+0x64>
		case 3: NVIC_EnableIRQ(TIM3_IRQn);    break;
 8006754:	201d      	movs	r0, #29
 8006756:	f7ff ff51 	bl	80065fc <__NVIC_EnableIRQ>
 800675a:	e003      	b.n	8006764 <timers_irqStart+0x64>
		case 4: NVIC_EnableIRQ(TIM4_IRQn);    break;
 800675c:	201e      	movs	r0, #30
 800675e:	f7ff ff4d 	bl	80065fc <__NVIC_EnableIRQ>
 8006762:	bf00      	nop
	}

	timers_irqAttach(timer, function);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 f817 	bl	800679c <timers_irqAttach>
  __ASM volatile ("cpsie i" : : : "memory");
 800676e:	b662      	cpsie	i
}
 8006770:	bf00      	nop
	__enable_irq();
}
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop

0800677c <timers_irqRFlag>:
}

/**
 * @brief Clears the update interrupt flag of the given timer.
 */
void timers_irqRFlag(TIM_TypeDef* TIMx) {
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	TIMx->SR &= ~(1 << 0); // Clear update interrupt flag
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f023 0201 	bic.w	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	611a      	str	r2, [r3, #16]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
	...

0800679c <timers_irqAttach>:

/**
 * @brief Assigns a user callback function to the specified timer interrupt.
 */
void timers_irqAttach(uint8_t timer, void (*function)(void)) {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
	if (timer >= 1 && timer <= 4)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <timers_irqAttach+0x24>
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d805      	bhi.n	80067c0 <timers_irqAttach+0x24>
		timers_exti_callbacks[timer - 1] = function;
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4904      	ldr	r1, [pc, #16]	@ (80067cc <timers_irqAttach+0x30>)
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	2000196c 	.word	0x2000196c

080067d0 <TIM1_UP_IRQHandler>:


/**
 * @brief TIM1 update interrupt handler.
 */
void TIM1_UP_IRQHandler(void) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
	timers_irqRFlag(TIM1);
 80067d4:	4805      	ldr	r0, [pc, #20]	@ (80067ec <TIM1_UP_IRQHandler+0x1c>)
 80067d6:	f7ff ffd1 	bl	800677c <timers_irqRFlag>
	if (timers_exti_callbacks[0]) timers_exti_callbacks[0]();
 80067da:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <TIM1_UP_IRQHandler+0x20>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <TIM1_UP_IRQHandler+0x18>
 80067e2:	4b03      	ldr	r3, [pc, #12]	@ (80067f0 <TIM1_UP_IRQHandler+0x20>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4798      	blx	r3
}
 80067e8:	bf00      	nop
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	2000196c 	.word	0x2000196c

080067f4 <TIM2_IRQHandler>:

/**
 * @brief TIM2 update interrupt handler.
 */
void TIM2_IRQHandler(void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
	timers_irqRFlag(TIM2);
 80067f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80067fc:	f7ff ffbe 	bl	800677c <timers_irqRFlag>
	if (timers_exti_callbacks[1]) timers_exti_callbacks[1]();
 8006800:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <TIM2_IRQHandler+0x20>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <TIM2_IRQHandler+0x1a>
 8006808:	4b02      	ldr	r3, [pc, #8]	@ (8006814 <TIM2_IRQHandler+0x20>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4798      	blx	r3
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2000196c 	.word	0x2000196c

08006818 <TIM3_IRQHandler>:

/**
 * @brief TIM3 update interrupt handler.
 */
void TIM3_IRQHandler(void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
	timers_irqRFlag(TIM3);
 800681c:	4805      	ldr	r0, [pc, #20]	@ (8006834 <TIM3_IRQHandler+0x1c>)
 800681e:	f7ff ffad 	bl	800677c <timers_irqRFlag>
	if (timers_exti_callbacks[2]) timers_exti_callbacks[2]();
 8006822:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <TIM3_IRQHandler+0x20>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <TIM3_IRQHandler+0x18>
 800682a:	4b03      	ldr	r3, [pc, #12]	@ (8006838 <TIM3_IRQHandler+0x20>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4798      	blx	r3
}
 8006830:	bf00      	nop
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40000400 	.word	0x40000400
 8006838:	2000196c 	.word	0x2000196c

0800683c <TIM4_IRQHandler>:

/**
 * @brief TIM4 update interrupt handler.
 */
void TIM4_IRQHandler(void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
	timers_irqRFlag(TIM4);
 8006840:	4805      	ldr	r0, [pc, #20]	@ (8006858 <TIM4_IRQHandler+0x1c>)
 8006842:	f7ff ff9b 	bl	800677c <timers_irqRFlag>
	if (timers_exti_callbacks[3]) timers_exti_callbacks[3]();
 8006846:	4b05      	ldr	r3, [pc, #20]	@ (800685c <TIM4_IRQHandler+0x20>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <TIM4_IRQHandler+0x18>
 800684e:	4b03      	ldr	r3, [pc, #12]	@ (800685c <TIM4_IRQHandler+0x20>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	4798      	blx	r3
}
 8006854:	bf00      	nop
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40000800 	.word	0x40000800
 800685c:	2000196c 	.word	0x2000196c

08006860 <timers_getChannel>:

/**
 * @brief Determines the timer channel (1–4) for a given GPIO pin.
 * @return Timer channel (1–4), or 0xFF if unsupported.
 */
uint8_t timers_getChannel(GPIO_TypeDef* GPIOx, uint8_t pin) {
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
    if (GPIOx == GPIOA) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <timers_getChannel+0xc0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d125      	bne.n	80068c0 <timers_getChannel+0x60>
        switch (pin) {
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	2b0b      	cmp	r3, #11
 8006878:	d84c      	bhi.n	8006914 <timers_getChannel+0xb4>
 800687a:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <timers_getChannel+0x20>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	080068b1 	.word	0x080068b1
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068bd 	.word	0x080068bd
 8006890:	08006915 	.word	0x08006915
 8006894:	08006915 	.word	0x08006915
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b5 	.word	0x080068b5
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068bd 	.word	0x080068bd
            case 0: case 6: case 8:  return 1;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e030      	b.n	8006916 <timers_getChannel+0xb6>
            case 1: case 7: case 9:  return 2;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e02e      	b.n	8006916 <timers_getChannel+0xb6>
            case 2: case 10:         return 3;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e02c      	b.n	8006916 <timers_getChannel+0xb6>
            case 3: case 11:         return 4;
 80068bc:	2304      	movs	r3, #4
 80068be:	e02a      	b.n	8006916 <timers_getChannel+0xb6>
        }
    } else if (GPIOx == GPIOB) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <timers_getChannel+0xc4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d125      	bne.n	8006914 <timers_getChannel+0xb4>
        switch (pin) {
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	2b09      	cmp	r3, #9
 80068cc:	d822      	bhi.n	8006914 <timers_getChannel+0xb4>
 80068ce:	a201      	add	r2, pc, #4	@ (adr r2, 80068d4 <timers_getChannel+0x74>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006915 	.word	0x08006915
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006915 	.word	0x08006915
 80068e8:	08006915 	.word	0x08006915
 80068ec:	08006905 	.word	0x08006905
 80068f0:	08006909 	.word	0x08006909
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006911 	.word	0x08006911
            case 0:  return 3; // TIM3_CH3
 80068fc:	2303      	movs	r3, #3
 80068fe:	e00a      	b.n	8006916 <timers_getChannel+0xb6>
            case 1:  return 4; // TIM3_CH4
 8006900:	2304      	movs	r3, #4
 8006902:	e008      	b.n	8006916 <timers_getChannel+0xb6>
            case 6:  return 1; // TIM4_CH1
 8006904:	2301      	movs	r3, #1
 8006906:	e006      	b.n	8006916 <timers_getChannel+0xb6>
            case 7:  return 2; // TIM4_CH2
 8006908:	2302      	movs	r3, #2
 800690a:	e004      	b.n	8006916 <timers_getChannel+0xb6>
            case 8:  return 3; // TIM4_CH3
 800690c:	2303      	movs	r3, #3
 800690e:	e002      	b.n	8006916 <timers_getChannel+0xb6>
            case 9:  return 4; // TIM4_CH4
 8006910:	2304      	movs	r3, #4
 8006912:	e000      	b.n	8006916 <timers_getChannel+0xb6>
        }
    }
    return 0xFF;
 8006914:	23ff      	movs	r3, #255	@ 0xff
}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr
 8006920:	40010800 	.word	0x40010800
 8006924:	40010c00 	.word	0x40010c00

08006928 <timers_getTimer>:

/**
 * @brief Returns the timer instance for a given GPIO pin.
 */
TIM_TypeDef* timers_getTimer(GPIO_TypeDef* GPIOx, uint8_t pin) {
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
    if (GPIOx == GPIOA) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a15      	ldr	r2, [pc, #84]	@ (800698c <timers_getTimer+0x64>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d10f      	bne.n	800695c <timers_getTimer+0x34>
        if      (pin < 4)  return TIM2;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d802      	bhi.n	8006948 <timers_getTimer+0x20>
 8006942:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006946:	e01b      	b.n	8006980 <timers_getTimer+0x58>
        else if (pin < 8)  return TIM3;
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2b07      	cmp	r3, #7
 800694c:	d801      	bhi.n	8006952 <timers_getTimer+0x2a>
 800694e:	4b10      	ldr	r3, [pc, #64]	@ (8006990 <timers_getTimer+0x68>)
 8006950:	e016      	b.n	8006980 <timers_getTimer+0x58>
        else if (pin < 12) return TIM1;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	2b0b      	cmp	r3, #11
 8006956:	d812      	bhi.n	800697e <timers_getTimer+0x56>
 8006958:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <timers_getTimer+0x6c>)
 800695a:	e011      	b.n	8006980 <timers_getTimer+0x58>
    } else if (GPIOx == GPIOB) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0e      	ldr	r2, [pc, #56]	@ (8006998 <timers_getTimer+0x70>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d10c      	bne.n	800697e <timers_getTimer+0x56>
        if (pin < 2) return TIM3;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d801      	bhi.n	800696e <timers_getTimer+0x46>
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <timers_getTimer+0x68>)
 800696c:	e008      	b.n	8006980 <timers_getTimer+0x58>
        else if (pin >= 6 && pin <= 9) return TIM4;
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	2b05      	cmp	r3, #5
 8006972:	d904      	bls.n	800697e <timers_getTimer+0x56>
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	2b09      	cmp	r3, #9
 8006978:	d801      	bhi.n	800697e <timers_getTimer+0x56>
 800697a:	4b08      	ldr	r3, [pc, #32]	@ (800699c <timers_getTimer+0x74>)
 800697c:	e000      	b.n	8006980 <timers_getTimer+0x58>
    }
    return NULL;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010800 	.word	0x40010800
 8006990:	40000400 	.word	0x40000400
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40010c00 	.word	0x40010c00
 800699c:	40000800 	.word	0x40000800

080069a0 <timers_getNum>:

/**
 * @brief Returns the timer number (1–4) for a given TIM_TypeDef pointer.
 */
uint8_t timers_getNum(TIM_TypeDef* TIMx) {
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	if      (TIMx == TIM1) return 1;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <timers_getNum+0x44>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d101      	bne.n	80069b4 <timers_getNum+0x14>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e012      	b.n	80069da <timers_getNum+0x3a>
	else if (TIMx == TIM2) return 2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d101      	bne.n	80069c0 <timers_getNum+0x20>
 80069bc:	2302      	movs	r3, #2
 80069be:	e00c      	b.n	80069da <timers_getNum+0x3a>
	else if (TIMx == TIM3) return 3;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <timers_getNum+0x48>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d101      	bne.n	80069cc <timers_getNum+0x2c>
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <timers_getNum+0x3a>
	else if (TIMx == TIM4) return 4;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a07      	ldr	r2, [pc, #28]	@ (80069ec <timers_getNum+0x4c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <timers_getNum+0x38>
 80069d4:	2304      	movs	r3, #4
 80069d6:	e000      	b.n	80069da <timers_getNum+0x3a>
	return 1;
 80069d8:	2301      	movs	r3, #1
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800

080069f0 <timers_pwmSetup>:
		case 3: TIMx->CCR3 = compare; break;
		case 4: TIMx->CCR4 = compare; break;
	}
}*/
// --- One-time setup ---
void timers_pwmSetup(GPIO_TypeDef* GPIOx, uint8_t pin, uint32_t freq) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	460b      	mov	r3, r1
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	72fb      	strb	r3, [r7, #11]
    TIM_TypeDef* TIMx = timers_getTimer(GPIOx, pin);
 80069fe:	7afb      	ldrb	r3, [r7, #11]
 8006a00:	4619      	mov	r1, r3
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff90 	bl	8006928 <timers_getTimer>
 8006a08:	61f8      	str	r0, [r7, #28]
    uint8_t channel = timers_getChannel(GPIOx, pin);
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff ff26 	bl	8006860 <timers_getChannel>
 8006a14:	4603      	mov	r3, r0
 8006a16:	76fb      	strb	r3, [r7, #27]

    uint8_t timer = timers_getNum(TIMx);
 8006a18:	69f8      	ldr	r0, [r7, #28]
 8006a1a:	f7ff ffc1 	bl	80069a0 <timers_getNum>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	76bb      	strb	r3, [r7, #26]
    if      (timer == 1) { RCC->APB2ENR |= (1 << 11); }
 8006a22:	7ebb      	ldrb	r3, [r7, #26]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <timers_pwmSetup+0x46>
 8006a28:	4b64      	ldr	r3, [pc, #400]	@ (8006bbc <timers_pwmSetup+0x1cc>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4a63      	ldr	r2, [pc, #396]	@ (8006bbc <timers_pwmSetup+0x1cc>)
 8006a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006a32:	6193      	str	r3, [r2, #24]
 8006a34:	e00d      	b.n	8006a52 <timers_pwmSetup+0x62>
    else if (timer <= 4) { RCC->APB1ENR |= (1 << (timer - 2)); }
 8006a36:	7ebb      	ldrb	r3, [r7, #26]
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d80a      	bhi.n	8006a52 <timers_pwmSetup+0x62>
 8006a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8006bbc <timers_pwmSetup+0x1cc>)
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	7eba      	ldrb	r2, [r7, #26]
 8006a42:	3a02      	subs	r2, #2
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8006bbc <timers_pwmSetup+0x1cc>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	61d3      	str	r3, [r2, #28]

    gpio_setupPin(GPIOx, pin, OUT_50, AF_PP);
 8006a52:	7af9      	ldrb	r1, [r7, #11]
 8006a54:	2302      	movs	r3, #2
 8006a56:	2203      	movs	r2, #3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff f9ed 	bl	8005e38 <gpio_setupPin>

    uint32_t T_CLK = 72000000UL;
 8006a5e:	4b58      	ldr	r3, [pc, #352]	@ (8006bc0 <timers_pwmSetup+0x1d0>)
 8006a60:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t arr = (T_CLK / freq) - 1;
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	623b      	str	r3, [r7, #32]

    while (arr > 0xFFFF) {
 8006a72:	e00b      	b.n	8006a8c <timers_pwmSetup+0x9c>
        prescaler++;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	3301      	adds	r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
        arr = (T_CLK / (prescaler * freq)) - 1;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	623b      	str	r3, [r7, #32]
    while (arr > 0xFFFF) {
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a92:	d2ef      	bcs.n	8006a74 <timers_pwmSetup+0x84>
    }

    TIMx->PSC = prescaler - 1;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	1e5a      	subs	r2, r3, #1
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = arr;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode without nuking other bits
    switch(channel) {
 8006aa2:	7efb      	ldrb	r3, [r7, #27]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d86e      	bhi.n	8006b88 <timers_pwmSetup+0x198>
 8006aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <timers_pwmSetup+0xc0>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ac1 	.word	0x08006ac1
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006b25 	.word	0x08006b25
 8006abc:	08006b57 	.word	0x08006b57
        case 1:
            TIMx->CCMR1 &= ~(0x7 << 4);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	619a      	str	r2, [r3, #24]
            TIMx->CCMR1 |= (0x6 << 4);   // PWM mode 1
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	619a      	str	r2, [r3, #24]
            TIMx->CCMR1 |= (1 << 3);     // preload enable
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f043 0208 	orr.w	r2, r3, #8
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	619a      	str	r2, [r3, #24]
            TIMx->CCER  |= 0x01;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f043 0201 	orr.w	r2, r3, #1
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	621a      	str	r2, [r3, #32]
            break;
 8006af0:	e04a      	b.n	8006b88 <timers_pwmSetup+0x198>

        case 2:
            TIMx->CCMR1 &= ~(0x7 << 12);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	619a      	str	r2, [r3, #24]
            TIMx->CCMR1 |= (0x6 << 12);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	619a      	str	r2, [r3, #24]
            TIMx->CCMR1 |= (1 << 11);
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	619a      	str	r2, [r3, #24]
            TIMx->CCER  |= 0x10;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f043 0210 	orr.w	r2, r3, #16
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	621a      	str	r2, [r3, #32]
            break;
 8006b22:	e031      	b.n	8006b88 <timers_pwmSetup+0x198>

        case 3:
            TIMx->CCMR2 &= ~(0x7 << 4);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	61da      	str	r2, [r3, #28]
            TIMx->CCMR2 |= (0x6 << 4);
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	61da      	str	r2, [r3, #28]
            TIMx->CCMR2 |= (1 << 3);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f043 0208 	orr.w	r2, r3, #8
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	61da      	str	r2, [r3, #28]
            TIMx->CCER  |= 0x100;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	621a      	str	r2, [r3, #32]
            break;
 8006b54:	e018      	b.n	8006b88 <timers_pwmSetup+0x198>

        case 4:
            TIMx->CCMR2 &= ~(0x7 << 12);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	61da      	str	r2, [r3, #28]
            TIMx->CCMR2 |= (0x6 << 12);
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	61da      	str	r2, [r3, #28]
            TIMx->CCMR2 |= (1 << 11);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	61da      	str	r2, [r3, #28]
            TIMx->CCER  |= 0x1000;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	621a      	str	r2, [r3, #32]
            break;
 8006b86:	bf00      	nop
    }

    TIMx->EGR |= 0x01;   // update registers
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	615a      	str	r2, [r3, #20]
    TIMx->CR1 |= 0x01;   // enable counter
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f043 0201 	orr.w	r2, r3, #1
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	601a      	str	r2, [r3, #0]

    // Only enable BDTR if it's TIM1 or TIM8 (advanced timers)
    if (TIMx == TIM1) {
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4a08      	ldr	r2, [pc, #32]	@ (8006bc4 <timers_pwmSetup+0x1d4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d105      	bne.n	8006bb4 <timers_pwmSetup+0x1c4>
        TIMx->BDTR |= 0x8000;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
}
 8006bb4:	bf00      	nop
 8006bb6:	3728      	adds	r7, #40	@ 0x28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	044aa200 	.word	0x044aa200
 8006bc4:	40012c00 	.word	0x40012c00

08006bc8 <timers_pwm>:

// --- Fast CCR update (raw ticks) ---
void timers_pwm(GPIO_TypeDef* GPIOx, uint8_t pin, uint32_t compare) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	72fb      	strb	r3, [r7, #11]
    TIM_TypeDef* TIMx = timers_getTimer(GPIOx, pin);
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fea4 	bl	8006928 <timers_getTimer>
 8006be0:	61f8      	str	r0, [r7, #28]
    uint8_t channel = timers_getChannel(GPIOx, pin);
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fe3a 	bl	8006860 <timers_getChannel>
 8006bec:	4603      	mov	r3, r0
 8006bee:	76fb      	strb	r3, [r7, #27]

    uint32_t arr = TIMx->ARR;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	617b      	str	r3, [r7, #20]
    if (compare > arr) compare = arr; // clamp
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d901      	bls.n	8006c02 <timers_pwm+0x3a>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	607b      	str	r3, [r7, #4]

    switch(channel) {
 8006c02:	7efb      	ldrb	r3, [r7, #27]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d81a      	bhi.n	8006c40 <timers_pwm+0x78>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <timers_pwm+0x48>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c29 	.word	0x08006c29
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c39 	.word	0x08006c39
        case 1: TIMx->CCR1 = compare; break;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c26:	e00b      	b.n	8006c40 <timers_pwm+0x78>
        case 2: TIMx->CCR2 = compare; break;
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c2e:	e007      	b.n	8006c40 <timers_pwm+0x78>
        case 3: TIMx->CCR3 = compare; break;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c36:	e003      	b.n	8006c40 <timers_pwm+0x78>
        case 4: TIMx->CCR4 = compare; break;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c3e:	bf00      	nop
    }
}
 8006c40:	bf00      	nop
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <timers_ovfHandler>:
 * ======================================================================================================================== */

/**
 * @brief Overflow handler for the stopwatch timer.
 */
void timers_ovfHandler() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
	stopwatchOVF++;
 8006c4c:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <timers_ovfHandler+0x1c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a04      	ldr	r2, [pc, #16]	@ (8006c64 <timers_ovfHandler+0x1c>)
 8006c54:	6013      	str	r3, [r2, #0]
	timers_irqRFlag(stopwatchTimer);
 8006c56:	4b04      	ldr	r3, [pc, #16]	@ (8006c68 <timers_ovfHandler+0x20>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fd8e 	bl	800677c <timers_irqRFlag>
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	2000197c 	.word	0x2000197c
 8006c68:	20000414 	.word	0x20000414

08006c6c <timers_stopwatchSetup>:

/**
 * @brief Initializes a timer to work as a high-resolution stopwatch.
 */
void timers_stopwatchSetup(TIM_TypeDef* TIMx) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	timers_setup(TIMx, MICROS);
 8006c74:	2100      	movs	r1, #0
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff fcdc 	bl	8006634 <timers_setup>
	timers_start(TIMx, 0xFFFF, MICROS);
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fd12 	bl	80066ac <timers_start>
	timers_irqStart(TIMx, timers_ovfHandler);
 8006c88:	4905      	ldr	r1, [pc, #20]	@ (8006ca0 <timers_stopwatchSetup+0x34>)
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fd38 	bl	8006700 <timers_irqStart>
	stopwatchTimer = TIMx;
 8006c90:	4a04      	ldr	r2, [pc, #16]	@ (8006ca4 <timers_stopwatchSetup+0x38>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6013      	str	r3, [r2, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08006c49 	.word	0x08006c49
 8006ca4:	20000414 	.word	0x20000414

08006ca8 <timers_stopwatch>:

/**
 * @brief Returns the total time elapsed in microseconds since stopwatch start.
 */
uint32_t timers_stopwatch() {
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
	uint32_t ovf1, ovf2;
	uint16_t cnt;

	do {
		ovf1 = stopwatchOVF;
 8006cae:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <timers_stopwatch+0x34>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
		cnt  = stopwatchTimer->CNT;
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <timers_stopwatch+0x38>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	817b      	strh	r3, [r7, #10]
		ovf2 = stopwatchOVF;
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <timers_stopwatch+0x34>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	607b      	str	r3, [r7, #4]
	} while (ovf1 != ovf2);
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d1f1      	bne.n	8006cae <timers_stopwatch+0x6>

	return ((ovf1 << 16) | cnt);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	041a      	lsls	r2, r3, #16
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	4313      	orrs	r3, r2
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	2000197c 	.word	0x2000197c
 8006ce0:	20000414 	.word	0x20000414

08006ce4 <uart_setup>:
 * Configures GPIOA9 (TX) as Alternate Function Push-Pull, sets baud rate to 115200,
 * enables USART1 transmitter, and sends a welcome message.
 *
 * @param strtDel Delay in milliseconds before sending the welcome message.
 */
void uart_setup() {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // Enable clock for USART1
 8006ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d1c <uart_setup+0x38>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4a0b      	ldr	r2, [pc, #44]	@ (8006d1c <uart_setup+0x38>)
 8006cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cf2:	6193      	str	r3, [r2, #24]

    gpio_setupPin(GPIOA, 9, OUT_50, AF_PP); // TX Pin setup (PA9)
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	2109      	movs	r1, #9
 8006cfa:	4809      	ldr	r0, [pc, #36]	@ (8006d20 <uart_setup+0x3c>)
 8006cfc:	f7ff f89c 	bl	8005e38 <gpio_setupPin>

    // USART1 Baud Rate = 115200 @ 72 MHz
    USART1->BRR = 0x0271;
 8006d00:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <uart_setup+0x40>)
 8006d02:	f240 2271 	movw	r2, #625	@ 0x271
 8006d06:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE; // Enable Transmitter and USART
 8006d08:	4b06      	ldr	r3, [pc, #24]	@ (8006d24 <uart_setup+0x40>)
 8006d0a:	f242 0208 	movw	r2, #8200	@ 0x2008
 8006d0e:	60da      	str	r2, [r3, #12]

    uart_send("\nHAPPY DEBUGGING <3 !! \n\n");
 8006d10:	4805      	ldr	r0, [pc, #20]	@ (8006d28 <uart_setup+0x44>)
 8006d12:	f000 f821 	bl	8006d58 <uart_send>
}
 8006d16:	bf00      	nop
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40010800 	.word	0x40010800
 8006d24:	40013800 	.word	0x40013800
 8006d28:	0800a2c8 	.word	0x0800a2c8

08006d2c <uart_sendChar>:
 *
 * Waits until transmit data register is empty before sending.
 *
 * @param c Character to send.
 */
void uart_sendChar(char c) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE)); // Wait until TX buffer is empty
 8006d36:	bf00      	nop
 8006d38:	4b06      	ldr	r3, [pc, #24]	@ (8006d54 <uart_sendChar+0x28>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f9      	beq.n	8006d38 <uart_sendChar+0xc>
    USART1->DR = c;
 8006d44:	4a03      	ldr	r2, [pc, #12]	@ (8006d54 <uart_sendChar+0x28>)
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	6053      	str	r3, [r2, #4]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr
 8006d54:	40013800 	.word	0x40013800

08006d58 <uart_send>:
 * Uses `vsnprintf` to safely format the string, then transmits it character by character.
 *
 * @param fmt Format string (e.g., "X = %d")
 * @param ... Variable arguments to format.
 */
void uart_send(const char *fmt, ...) {
 8006d58:	b40f      	push	{r0, r1, r2, r3}
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b0a2      	sub	sp, #136	@ 0x88
 8006d5e:	af00      	add	r7, sp, #0
    char buffer[UART_BUFFER_SIZE];

    va_list args;
    va_start(args, fmt);
 8006d60:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006d64:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, UART_BUFFER_SIZE, fmt, args);
 8006d66:	1d38      	adds	r0, r7, #4
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	f000 fec2 	bl	8007af8 <vsniprintf>
    va_end(args);

    const char *p = buffer;
 8006d74:	1d3b      	adds	r3, r7, #4
 8006d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (*p) {
 8006d7a:	e008      	b.n	8006d8e <uart_send+0x36>
        uart_sendChar(*p++);
 8006d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ffcf 	bl	8006d2c <uart_sendChar>
    while (*p) {
 8006d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1f1      	bne.n	8006d7c <uart_send+0x24>
    }
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	3788      	adds	r7, #136	@ 0x88
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr

08006da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006da8:	f7fa fa94 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dac:	480b      	ldr	r0, [pc, #44]	@ (8006ddc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006dae:	490c      	ldr	r1, [pc, #48]	@ (8006de0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006db0:	4a0c      	ldr	r2, [pc, #48]	@ (8006de4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006db4:	e002      	b.n	8006dbc <LoopCopyDataInit>

08006db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dba:	3304      	adds	r3, #4

08006dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006dc0:	d3f9      	bcc.n	8006db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dc2:	4a09      	ldr	r2, [pc, #36]	@ (8006de8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006dc4:	4c09      	ldr	r4, [pc, #36]	@ (8006dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006dc8:	e001      	b.n	8006dce <LoopFillZerobss>

08006dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006dcc:	3204      	adds	r2, #4

08006dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006dd0:	d3fb      	bcc.n	8006dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006dd2:	f000 ff07 	bl	8007be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006dd6:	f7fe fb81 	bl	80054dc <main>
  bx lr
 8006dda:	4770      	bx	lr
  ldr r0, =_sdata
 8006ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006de0:	200005e0 	.word	0x200005e0
  ldr r2, =_sidata
 8006de4:	0800a69c 	.word	0x0800a69c
  ldr r2, =_sbss
 8006de8:	200005e0 	.word	0x200005e0
  ldr r4, =_ebss
 8006dec:	20001acc 	.word	0x20001acc

08006df0 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006df0:	e7fe      	b.n	8006df0 <BusFault_Handler>
	...

08006df4 <malloc>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <malloc+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f000 b82d 	b.w	8006e58 <_malloc_r>
 8006dfe:	bf00      	nop
 8006e00:	20000424 	.word	0x20000424

08006e04 <free>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	@ (8006e10 <free+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f001 bd7d 	b.w	8008908 <_free_r>
 8006e0e:	bf00      	nop
 8006e10:	20000424 	.word	0x20000424

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 feb8 	bl	8007b94 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 feb3 	bl	8007b94 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fea4 	bl	8007b94 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20001980 	.word	0x20001980

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 fe6e 	bl	8007b94 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	1a6d      	subs	r5, r5, r1
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	4630      	mov	r0, r6
 8006f46:	6033      	str	r3, [r6, #0]
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20001984 	.word	0x20001984

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f000 be68 	b.w	8007c2e <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20001ac8 	.word	0x20001ac8

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f000 be63 	b.w	8007c30 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20001ac8 	.word	0x20001ac8

08006f70 <__cvt>:
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f76:	461d      	mov	r5, r3
 8006f78:	bfbb      	ittet	lt
 8006f7a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006f7e:	461d      	movlt	r5, r3
 8006f80:	2300      	movge	r3, #0
 8006f82:	232d      	movlt	r3, #45	@ 0x2d
 8006f84:	b088      	sub	sp, #32
 8006f86:	4614      	mov	r4, r2
 8006f88:	bfb8      	it	lt
 8006f8a:	4614      	movlt	r4, r2
 8006f8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f8e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006f90:	7013      	strb	r3, [r2, #0]
 8006f92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006f98:	f023 0820 	bic.w	r8, r3, #32
 8006f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fa0:	d005      	beq.n	8006fae <__cvt+0x3e>
 8006fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fa6:	d100      	bne.n	8006faa <__cvt+0x3a>
 8006fa8:	3601      	adds	r6, #1
 8006faa:	2302      	movs	r3, #2
 8006fac:	e000      	b.n	8006fb0 <__cvt+0x40>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	aa07      	add	r2, sp, #28
 8006fb2:	9204      	str	r2, [sp, #16]
 8006fb4:	aa06      	add	r2, sp, #24
 8006fb6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006fba:	e9cd 3600 	strd	r3, r6, [sp]
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f000 fecd 	bl	8007d60 <_dtoa_r>
 8006fc6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fca:	4607      	mov	r7, r0
 8006fcc:	d119      	bne.n	8007002 <__cvt+0x92>
 8006fce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d50e      	bpl.n	8006ff2 <__cvt+0x82>
 8006fd4:	eb00 0906 	add.w	r9, r0, r6
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 fce2 	bl	80009a8 <__aeabi_dcmpeq>
 8006fe4:	b108      	cbz	r0, 8006fea <__cvt+0x7a>
 8006fe6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fea:	2230      	movs	r2, #48	@ 0x30
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	454b      	cmp	r3, r9
 8006ff0:	d31e      	bcc.n	8007030 <__cvt+0xc0>
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ff8:	1bdb      	subs	r3, r3, r7
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	b008      	add	sp, #32
 8006ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007002:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007006:	eb00 0906 	add.w	r9, r0, r6
 800700a:	d1e5      	bne.n	8006fd8 <__cvt+0x68>
 800700c:	7803      	ldrb	r3, [r0, #0]
 800700e:	2b30      	cmp	r3, #48	@ 0x30
 8007010:	d10a      	bne.n	8007028 <__cvt+0xb8>
 8007012:	2200      	movs	r2, #0
 8007014:	2300      	movs	r3, #0
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800701e:	b918      	cbnz	r0, 8007028 <__cvt+0xb8>
 8007020:	f1c6 0601 	rsb	r6, r6, #1
 8007024:	f8ca 6000 	str.w	r6, [sl]
 8007028:	f8da 3000 	ldr.w	r3, [sl]
 800702c:	4499      	add	r9, r3
 800702e:	e7d3      	b.n	8006fd8 <__cvt+0x68>
 8007030:	1c59      	adds	r1, r3, #1
 8007032:	9107      	str	r1, [sp, #28]
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e7d9      	b.n	8006fec <__cvt+0x7c>

08007038 <__exponent>:
 8007038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800703a:	2900      	cmp	r1, #0
 800703c:	bfb6      	itet	lt
 800703e:	232d      	movlt	r3, #45	@ 0x2d
 8007040:	232b      	movge	r3, #43	@ 0x2b
 8007042:	4249      	neglt	r1, r1
 8007044:	2909      	cmp	r1, #9
 8007046:	7002      	strb	r2, [r0, #0]
 8007048:	7043      	strb	r3, [r0, #1]
 800704a:	dd29      	ble.n	80070a0 <__exponent+0x68>
 800704c:	f10d 0307 	add.w	r3, sp, #7
 8007050:	461d      	mov	r5, r3
 8007052:	270a      	movs	r7, #10
 8007054:	fbb1 f6f7 	udiv	r6, r1, r7
 8007058:	461a      	mov	r2, r3
 800705a:	fb07 1416 	mls	r4, r7, r6, r1
 800705e:	3430      	adds	r4, #48	@ 0x30
 8007060:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007064:	460c      	mov	r4, r1
 8007066:	2c63      	cmp	r4, #99	@ 0x63
 8007068:	4631      	mov	r1, r6
 800706a:	f103 33ff 	add.w	r3, r3, #4294967295
 800706e:	dcf1      	bgt.n	8007054 <__exponent+0x1c>
 8007070:	3130      	adds	r1, #48	@ 0x30
 8007072:	1e94      	subs	r4, r2, #2
 8007074:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007078:	4623      	mov	r3, r4
 800707a:	1c41      	adds	r1, r0, #1
 800707c:	42ab      	cmp	r3, r5
 800707e:	d30a      	bcc.n	8007096 <__exponent+0x5e>
 8007080:	f10d 0309 	add.w	r3, sp, #9
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	42ac      	cmp	r4, r5
 8007088:	bf88      	it	hi
 800708a:	2300      	movhi	r3, #0
 800708c:	3302      	adds	r3, #2
 800708e:	4403      	add	r3, r0
 8007090:	1a18      	subs	r0, r3, r0
 8007092:	b003      	add	sp, #12
 8007094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007096:	f813 6b01 	ldrb.w	r6, [r3], #1
 800709a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800709e:	e7ed      	b.n	800707c <__exponent+0x44>
 80070a0:	2330      	movs	r3, #48	@ 0x30
 80070a2:	3130      	adds	r1, #48	@ 0x30
 80070a4:	7083      	strb	r3, [r0, #2]
 80070a6:	70c1      	strb	r1, [r0, #3]
 80070a8:	1d03      	adds	r3, r0, #4
 80070aa:	e7f1      	b.n	8007090 <__exponent+0x58>

080070ac <_printf_float>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	b091      	sub	sp, #68	@ 0x44
 80070b2:	460c      	mov	r4, r1
 80070b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80070b8:	4616      	mov	r6, r2
 80070ba:	461f      	mov	r7, r3
 80070bc:	4605      	mov	r5, r0
 80070be:	f000 fd31 	bl	8007b24 <_localeconv_r>
 80070c2:	6803      	ldr	r3, [r0, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	9308      	str	r3, [sp, #32]
 80070c8:	f7f9 f842 	bl	8000150 <strlen>
 80070cc:	2300      	movs	r3, #0
 80070ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80070d0:	f8d8 3000 	ldr.w	r3, [r8]
 80070d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80070d6:	3307      	adds	r3, #7
 80070d8:	f023 0307 	bic.w	r3, r3, #7
 80070dc:	f103 0208 	add.w	r2, r3, #8
 80070e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070e4:	f8d4 b000 	ldr.w	fp, [r4]
 80070e8:	f8c8 2000 	str.w	r2, [r8]
 80070ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007102:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007106:	4b9c      	ldr	r3, [pc, #624]	@ (8007378 <_printf_float+0x2cc>)
 8007108:	f7f9 fc80 	bl	8000a0c <__aeabi_dcmpun>
 800710c:	bb70      	cbnz	r0, 800716c <_printf_float+0xc0>
 800710e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007112:	f04f 32ff 	mov.w	r2, #4294967295
 8007116:	4b98      	ldr	r3, [pc, #608]	@ (8007378 <_printf_float+0x2cc>)
 8007118:	f7f9 fc5a 	bl	80009d0 <__aeabi_dcmple>
 800711c:	bb30      	cbnz	r0, 800716c <_printf_float+0xc0>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	f7f9 fc49 	bl	80009bc <__aeabi_dcmplt>
 800712a:	b110      	cbz	r0, 8007132 <_printf_float+0x86>
 800712c:	232d      	movs	r3, #45	@ 0x2d
 800712e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007132:	4a92      	ldr	r2, [pc, #584]	@ (800737c <_printf_float+0x2d0>)
 8007134:	4b92      	ldr	r3, [pc, #584]	@ (8007380 <_printf_float+0x2d4>)
 8007136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800713a:	bf8c      	ite	hi
 800713c:	4690      	movhi	r8, r2
 800713e:	4698      	movls	r8, r3
 8007140:	2303      	movs	r3, #3
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	f02b 0304 	bic.w	r3, fp, #4
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	4633      	mov	r3, r6
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	9700      	str	r7, [sp, #0]
 8007156:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007158:	f000 f9d4 	bl	8007504 <_printf_common>
 800715c:	3001      	adds	r0, #1
 800715e:	f040 8090 	bne.w	8007282 <_printf_float+0x1d6>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	b011      	add	sp, #68	@ 0x44
 8007168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 fc4a 	bl	8000a0c <__aeabi_dcmpun>
 8007178:	b148      	cbz	r0, 800718e <_printf_float+0xe2>
 800717a:	464b      	mov	r3, r9
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfb8      	it	lt
 8007180:	232d      	movlt	r3, #45	@ 0x2d
 8007182:	4a80      	ldr	r2, [pc, #512]	@ (8007384 <_printf_float+0x2d8>)
 8007184:	bfb8      	it	lt
 8007186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800718a:	4b7f      	ldr	r3, [pc, #508]	@ (8007388 <_printf_float+0x2dc>)
 800718c:	e7d3      	b.n	8007136 <_printf_float+0x8a>
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	d13f      	bne.n	8007218 <_printf_float+0x16c>
 8007198:	2306      	movs	r3, #6
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	9206      	str	r2, [sp, #24]
 80071a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80071a8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80071ac:	aa0d      	add	r2, sp, #52	@ 0x34
 80071ae:	9203      	str	r2, [sp, #12]
 80071b0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80071b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	4642      	mov	r2, r8
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4628      	mov	r0, r5
 80071c0:	464b      	mov	r3, r9
 80071c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80071c4:	f7ff fed4 	bl	8006f70 <__cvt>
 80071c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071ca:	4680      	mov	r8, r0
 80071cc:	2947      	cmp	r1, #71	@ 0x47
 80071ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80071d0:	d128      	bne.n	8007224 <_printf_float+0x178>
 80071d2:	1cc8      	adds	r0, r1, #3
 80071d4:	db02      	blt.n	80071dc <_printf_float+0x130>
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	4299      	cmp	r1, r3
 80071da:	dd40      	ble.n	800725e <_printf_float+0x1b2>
 80071dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80071e0:	fa5f fa8a 	uxtb.w	sl, sl
 80071e4:	4652      	mov	r2, sl
 80071e6:	3901      	subs	r1, #1
 80071e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071ec:	910d      	str	r1, [sp, #52]	@ 0x34
 80071ee:	f7ff ff23 	bl	8007038 <__exponent>
 80071f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071f4:	4681      	mov	r9, r0
 80071f6:	1813      	adds	r3, r2, r0
 80071f8:	2a01      	cmp	r2, #1
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	dc02      	bgt.n	8007204 <_printf_float+0x158>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	07d2      	lsls	r2, r2, #31
 8007202:	d501      	bpl.n	8007208 <_printf_float+0x15c>
 8007204:	3301      	adds	r3, #1
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800720c:	2b00      	cmp	r3, #0
 800720e:	d09e      	beq.n	800714e <_printf_float+0xa2>
 8007210:	232d      	movs	r3, #45	@ 0x2d
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007216:	e79a      	b.n	800714e <_printf_float+0xa2>
 8007218:	2947      	cmp	r1, #71	@ 0x47
 800721a:	d1bf      	bne.n	800719c <_printf_float+0xf0>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1bd      	bne.n	800719c <_printf_float+0xf0>
 8007220:	2301      	movs	r3, #1
 8007222:	e7ba      	b.n	800719a <_printf_float+0xee>
 8007224:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007228:	d9dc      	bls.n	80071e4 <_printf_float+0x138>
 800722a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800722e:	d118      	bne.n	8007262 <_printf_float+0x1b6>
 8007230:	2900      	cmp	r1, #0
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	dd0b      	ble.n	800724e <_printf_float+0x1a2>
 8007236:	6121      	str	r1, [r4, #16]
 8007238:	b913      	cbnz	r3, 8007240 <_printf_float+0x194>
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	07d0      	lsls	r0, r2, #31
 800723e:	d502      	bpl.n	8007246 <_printf_float+0x19a>
 8007240:	3301      	adds	r3, #1
 8007242:	440b      	add	r3, r1
 8007244:	6123      	str	r3, [r4, #16]
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800724c:	e7dc      	b.n	8007208 <_printf_float+0x15c>
 800724e:	b913      	cbnz	r3, 8007256 <_printf_float+0x1aa>
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	07d2      	lsls	r2, r2, #31
 8007254:	d501      	bpl.n	800725a <_printf_float+0x1ae>
 8007256:	3302      	adds	r3, #2
 8007258:	e7f4      	b.n	8007244 <_printf_float+0x198>
 800725a:	2301      	movs	r3, #1
 800725c:	e7f2      	b.n	8007244 <_printf_float+0x198>
 800725e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007264:	4299      	cmp	r1, r3
 8007266:	db05      	blt.n	8007274 <_printf_float+0x1c8>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	6121      	str	r1, [r4, #16]
 800726c:	07d8      	lsls	r0, r3, #31
 800726e:	d5ea      	bpl.n	8007246 <_printf_float+0x19a>
 8007270:	1c4b      	adds	r3, r1, #1
 8007272:	e7e7      	b.n	8007244 <_printf_float+0x198>
 8007274:	2900      	cmp	r1, #0
 8007276:	bfcc      	ite	gt
 8007278:	2201      	movgt	r2, #1
 800727a:	f1c1 0202 	rsble	r2, r1, #2
 800727e:	4413      	add	r3, r2
 8007280:	e7e0      	b.n	8007244 <_printf_float+0x198>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	055a      	lsls	r2, r3, #21
 8007286:	d407      	bmi.n	8007298 <_printf_float+0x1ec>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	4642      	mov	r2, r8
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	d12b      	bne.n	80072ee <_printf_float+0x242>
 8007296:	e764      	b.n	8007162 <_printf_float+0xb6>
 8007298:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800729c:	f240 80dc 	bls.w	8007458 <_printf_float+0x3ac>
 80072a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	f7f9 fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d033      	beq.n	8007318 <_printf_float+0x26c>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	4a35      	ldr	r2, [pc, #212]	@ (800738c <_printf_float+0x2e0>)
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af51 	beq.w	8007162 <_printf_float+0xb6>
 80072c0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80072c4:	4543      	cmp	r3, r8
 80072c6:	db02      	blt.n	80072ce <_printf_float+0x222>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	07d8      	lsls	r0, r3, #31
 80072cc:	d50f      	bpl.n	80072ee <_printf_float+0x242>
 80072ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072d2:	4631      	mov	r1, r6
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b8      	blx	r7
 80072d8:	3001      	adds	r0, #1
 80072da:	f43f af42 	beq.w	8007162 <_printf_float+0xb6>
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80072e6:	f104 0a1a 	add.w	sl, r4, #26
 80072ea:	45c8      	cmp	r8, r9
 80072ec:	dc09      	bgt.n	8007302 <_printf_float+0x256>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	079b      	lsls	r3, r3, #30
 80072f2:	f100 8102 	bmi.w	80074fa <_printf_float+0x44e>
 80072f6:	68e0      	ldr	r0, [r4, #12]
 80072f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fa:	4298      	cmp	r0, r3
 80072fc:	bfb8      	it	lt
 80072fe:	4618      	movlt	r0, r3
 8007300:	e731      	b.n	8007166 <_printf_float+0xba>
 8007302:	2301      	movs	r3, #1
 8007304:	4652      	mov	r2, sl
 8007306:	4631      	mov	r1, r6
 8007308:	4628      	mov	r0, r5
 800730a:	47b8      	blx	r7
 800730c:	3001      	adds	r0, #1
 800730e:	f43f af28 	beq.w	8007162 <_printf_float+0xb6>
 8007312:	f109 0901 	add.w	r9, r9, #1
 8007316:	e7e8      	b.n	80072ea <_printf_float+0x23e>
 8007318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc38      	bgt.n	8007390 <_printf_float+0x2e4>
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	4a19      	ldr	r2, [pc, #100]	@ (800738c <_printf_float+0x2e0>)
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f af1a 	beq.w	8007162 <_printf_float+0xb6>
 800732e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007332:	ea59 0303 	orrs.w	r3, r9, r3
 8007336:	d102      	bne.n	800733e <_printf_float+0x292>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	07d9      	lsls	r1, r3, #31
 800733c:	d5d7      	bpl.n	80072ee <_printf_float+0x242>
 800733e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007342:	4631      	mov	r1, r6
 8007344:	4628      	mov	r0, r5
 8007346:	47b8      	blx	r7
 8007348:	3001      	adds	r0, #1
 800734a:	f43f af0a 	beq.w	8007162 <_printf_float+0xb6>
 800734e:	f04f 0a00 	mov.w	sl, #0
 8007352:	f104 0b1a 	add.w	fp, r4, #26
 8007356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007358:	425b      	negs	r3, r3
 800735a:	4553      	cmp	r3, sl
 800735c:	dc01      	bgt.n	8007362 <_printf_float+0x2b6>
 800735e:	464b      	mov	r3, r9
 8007360:	e793      	b.n	800728a <_printf_float+0x1de>
 8007362:	2301      	movs	r3, #1
 8007364:	465a      	mov	r2, fp
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f aef8 	beq.w	8007162 <_printf_float+0xb6>
 8007372:	f10a 0a01 	add.w	sl, sl, #1
 8007376:	e7ee      	b.n	8007356 <_printf_float+0x2aa>
 8007378:	7fefffff 	.word	0x7fefffff
 800737c:	0800a318 	.word	0x0800a318
 8007380:	0800a314 	.word	0x0800a314
 8007384:	0800a320 	.word	0x0800a320
 8007388:	0800a31c 	.word	0x0800a31c
 800738c:	0800a324 	.word	0x0800a324
 8007390:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007392:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007396:	4553      	cmp	r3, sl
 8007398:	bfa8      	it	ge
 800739a:	4653      	movge	r3, sl
 800739c:	2b00      	cmp	r3, #0
 800739e:	4699      	mov	r9, r3
 80073a0:	dc36      	bgt.n	8007410 <_printf_float+0x364>
 80073a2:	f04f 0b00 	mov.w	fp, #0
 80073a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073aa:	f104 021a 	add.w	r2, r4, #26
 80073ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b2:	eba3 0309 	sub.w	r3, r3, r9
 80073b6:	455b      	cmp	r3, fp
 80073b8:	dc31      	bgt.n	800741e <_printf_float+0x372>
 80073ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073bc:	459a      	cmp	sl, r3
 80073be:	dc3a      	bgt.n	8007436 <_printf_float+0x38a>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07da      	lsls	r2, r3, #31
 80073c4:	d437      	bmi.n	8007436 <_printf_float+0x38a>
 80073c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073c8:	ebaa 0903 	sub.w	r9, sl, r3
 80073cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ce:	ebaa 0303 	sub.w	r3, sl, r3
 80073d2:	4599      	cmp	r9, r3
 80073d4:	bfa8      	it	ge
 80073d6:	4699      	movge	r9, r3
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	dc33      	bgt.n	8007446 <_printf_float+0x39a>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e6:	f104 0b1a 	add.w	fp, r4, #26
 80073ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073ec:	ebaa 0303 	sub.w	r3, sl, r3
 80073f0:	eba3 0309 	sub.w	r3, r3, r9
 80073f4:	4543      	cmp	r3, r8
 80073f6:	f77f af7a 	ble.w	80072ee <_printf_float+0x242>
 80073fa:	2301      	movs	r3, #1
 80073fc:	465a      	mov	r2, fp
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	f43f aeac 	beq.w	8007162 <_printf_float+0xb6>
 800740a:	f108 0801 	add.w	r8, r8, #1
 800740e:	e7ec      	b.n	80073ea <_printf_float+0x33e>
 8007410:	4642      	mov	r2, r8
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	d1c2      	bne.n	80073a2 <_printf_float+0x2f6>
 800741c:	e6a1      	b.n	8007162 <_printf_float+0xb6>
 800741e:	2301      	movs	r3, #1
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	920a      	str	r2, [sp, #40]	@ 0x28
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae9a 	beq.w	8007162 <_printf_float+0xb6>
 800742e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007430:	f10b 0b01 	add.w	fp, fp, #1
 8007434:	e7bb      	b.n	80073ae <_printf_float+0x302>
 8007436:	4631      	mov	r1, r6
 8007438:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	d1c0      	bne.n	80073c6 <_printf_float+0x31a>
 8007444:	e68d      	b.n	8007162 <_printf_float+0xb6>
 8007446:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007448:	464b      	mov	r3, r9
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	4442      	add	r2, r8
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	d1c3      	bne.n	80073de <_printf_float+0x332>
 8007456:	e684      	b.n	8007162 <_printf_float+0xb6>
 8007458:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800745c:	f1ba 0f01 	cmp.w	sl, #1
 8007460:	dc01      	bgt.n	8007466 <_printf_float+0x3ba>
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d536      	bpl.n	80074d4 <_printf_float+0x428>
 8007466:	2301      	movs	r3, #1
 8007468:	4642      	mov	r2, r8
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f ae76 	beq.w	8007162 <_printf_float+0xb6>
 8007476:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800747a:	4631      	mov	r1, r6
 800747c:	4628      	mov	r0, r5
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	f43f ae6e 	beq.w	8007162 <_printf_float+0xb6>
 8007486:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800748a:	2200      	movs	r2, #0
 800748c:	2300      	movs	r3, #0
 800748e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007492:	f7f9 fa89 	bl	80009a8 <__aeabi_dcmpeq>
 8007496:	b9c0      	cbnz	r0, 80074ca <_printf_float+0x41e>
 8007498:	4653      	mov	r3, sl
 800749a:	f108 0201 	add.w	r2, r8, #1
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	d10c      	bne.n	80074c2 <_printf_float+0x416>
 80074a8:	e65b      	b.n	8007162 <_printf_float+0xb6>
 80074aa:	2301      	movs	r3, #1
 80074ac:	465a      	mov	r2, fp
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae54 	beq.w	8007162 <_printf_float+0xb6>
 80074ba:	f108 0801 	add.w	r8, r8, #1
 80074be:	45d0      	cmp	r8, sl
 80074c0:	dbf3      	blt.n	80074aa <_printf_float+0x3fe>
 80074c2:	464b      	mov	r3, r9
 80074c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074c8:	e6e0      	b.n	800728c <_printf_float+0x1e0>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	f104 0b1a 	add.w	fp, r4, #26
 80074d2:	e7f4      	b.n	80074be <_printf_float+0x412>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4642      	mov	r2, r8
 80074d8:	e7e1      	b.n	800749e <_printf_float+0x3f2>
 80074da:	2301      	movs	r3, #1
 80074dc:	464a      	mov	r2, r9
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f ae3c 	beq.w	8007162 <_printf_float+0xb6>
 80074ea:	f108 0801 	add.w	r8, r8, #1
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80074f2:	1a5b      	subs	r3, r3, r1
 80074f4:	4543      	cmp	r3, r8
 80074f6:	dcf0      	bgt.n	80074da <_printf_float+0x42e>
 80074f8:	e6fd      	b.n	80072f6 <_printf_float+0x24a>
 80074fa:	f04f 0800 	mov.w	r8, #0
 80074fe:	f104 0919 	add.w	r9, r4, #25
 8007502:	e7f4      	b.n	80074ee <_printf_float+0x442>

08007504 <_printf_common>:
 8007504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	4616      	mov	r6, r2
 800750a:	4698      	mov	r8, r3
 800750c:	688a      	ldr	r2, [r1, #8]
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	4607      	mov	r7, r0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfb8      	it	lt
 8007516:	4613      	movlt	r3, r2
 8007518:	6033      	str	r3, [r6, #0]
 800751a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800751e:	460c      	mov	r4, r1
 8007520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007524:	b10a      	cbz	r2, 800752a <_printf_common+0x26>
 8007526:	3301      	adds	r3, #1
 8007528:	6033      	str	r3, [r6, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	0699      	lsls	r1, r3, #26
 800752e:	bf42      	ittt	mi
 8007530:	6833      	ldrmi	r3, [r6, #0]
 8007532:	3302      	addmi	r3, #2
 8007534:	6033      	strmi	r3, [r6, #0]
 8007536:	6825      	ldr	r5, [r4, #0]
 8007538:	f015 0506 	ands.w	r5, r5, #6
 800753c:	d106      	bne.n	800754c <_printf_common+0x48>
 800753e:	f104 0a19 	add.w	sl, r4, #25
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	6832      	ldr	r2, [r6, #0]
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	42ab      	cmp	r3, r5
 800754a:	dc2b      	bgt.n	80075a4 <_printf_common+0xa0>
 800754c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	3b00      	subs	r3, #0
 8007554:	bf18      	it	ne
 8007556:	2301      	movne	r3, #1
 8007558:	0692      	lsls	r2, r2, #26
 800755a:	d430      	bmi.n	80075be <_printf_common+0xba>
 800755c:	4641      	mov	r1, r8
 800755e:	4638      	mov	r0, r7
 8007560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007564:	47c8      	blx	r9
 8007566:	3001      	adds	r0, #1
 8007568:	d023      	beq.n	80075b2 <_printf_common+0xae>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	6922      	ldr	r2, [r4, #16]
 800756e:	f003 0306 	and.w	r3, r3, #6
 8007572:	2b04      	cmp	r3, #4
 8007574:	bf14      	ite	ne
 8007576:	2500      	movne	r5, #0
 8007578:	6833      	ldreq	r3, [r6, #0]
 800757a:	f04f 0600 	mov.w	r6, #0
 800757e:	bf08      	it	eq
 8007580:	68e5      	ldreq	r5, [r4, #12]
 8007582:	f104 041a 	add.w	r4, r4, #26
 8007586:	bf08      	it	eq
 8007588:	1aed      	subeq	r5, r5, r3
 800758a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800758e:	bf08      	it	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	4293      	cmp	r3, r2
 8007596:	bfc4      	itt	gt
 8007598:	1a9b      	subgt	r3, r3, r2
 800759a:	18ed      	addgt	r5, r5, r3
 800759c:	42b5      	cmp	r5, r6
 800759e:	d11a      	bne.n	80075d6 <_printf_common+0xd2>
 80075a0:	2000      	movs	r0, #0
 80075a2:	e008      	b.n	80075b6 <_printf_common+0xb2>
 80075a4:	2301      	movs	r3, #1
 80075a6:	4652      	mov	r2, sl
 80075a8:	4641      	mov	r1, r8
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c8      	blx	r9
 80075ae:	3001      	adds	r0, #1
 80075b0:	d103      	bne.n	80075ba <_printf_common+0xb6>
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ba:	3501      	adds	r5, #1
 80075bc:	e7c1      	b.n	8007542 <_printf_common+0x3e>
 80075be:	2030      	movs	r0, #48	@ 0x30
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075cc:	4422      	add	r2, r4
 80075ce:	3302      	adds	r3, #2
 80075d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d4:	e7c2      	b.n	800755c <_printf_common+0x58>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4622      	mov	r2, r4
 80075da:	4641      	mov	r1, r8
 80075dc:	4638      	mov	r0, r7
 80075de:	47c8      	blx	r9
 80075e0:	3001      	adds	r0, #1
 80075e2:	d0e6      	beq.n	80075b2 <_printf_common+0xae>
 80075e4:	3601      	adds	r6, #1
 80075e6:	e7d9      	b.n	800759c <_printf_common+0x98>

080075e8 <_printf_i>:
 80075e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	7e0f      	ldrb	r7, [r1, #24]
 80075ee:	4691      	mov	r9, r2
 80075f0:	2f78      	cmp	r7, #120	@ 0x78
 80075f2:	4680      	mov	r8, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	469a      	mov	sl, r3
 80075f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075fe:	d807      	bhi.n	8007610 <_printf_i+0x28>
 8007600:	2f62      	cmp	r7, #98	@ 0x62
 8007602:	d80a      	bhi.n	800761a <_printf_i+0x32>
 8007604:	2f00      	cmp	r7, #0
 8007606:	f000 80d1 	beq.w	80077ac <_printf_i+0x1c4>
 800760a:	2f58      	cmp	r7, #88	@ 0x58
 800760c:	f000 80b8 	beq.w	8007780 <_printf_i+0x198>
 8007610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007618:	e03a      	b.n	8007690 <_printf_i+0xa8>
 800761a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800761e:	2b15      	cmp	r3, #21
 8007620:	d8f6      	bhi.n	8007610 <_printf_i+0x28>
 8007622:	a101      	add	r1, pc, #4	@ (adr r1, 8007628 <_printf_i+0x40>)
 8007624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007628:	08007681 	.word	0x08007681
 800762c:	08007695 	.word	0x08007695
 8007630:	08007611 	.word	0x08007611
 8007634:	08007611 	.word	0x08007611
 8007638:	08007611 	.word	0x08007611
 800763c:	08007611 	.word	0x08007611
 8007640:	08007695 	.word	0x08007695
 8007644:	08007611 	.word	0x08007611
 8007648:	08007611 	.word	0x08007611
 800764c:	08007611 	.word	0x08007611
 8007650:	08007611 	.word	0x08007611
 8007654:	08007793 	.word	0x08007793
 8007658:	080076bf 	.word	0x080076bf
 800765c:	0800774d 	.word	0x0800774d
 8007660:	08007611 	.word	0x08007611
 8007664:	08007611 	.word	0x08007611
 8007668:	080077b5 	.word	0x080077b5
 800766c:	08007611 	.word	0x08007611
 8007670:	080076bf 	.word	0x080076bf
 8007674:	08007611 	.word	0x08007611
 8007678:	08007611 	.word	0x08007611
 800767c:	08007755 	.word	0x08007755
 8007680:	6833      	ldr	r3, [r6, #0]
 8007682:	1d1a      	adds	r2, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6032      	str	r2, [r6, #0]
 8007688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800768c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007690:	2301      	movs	r3, #1
 8007692:	e09c      	b.n	80077ce <_printf_i+0x1e6>
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	1d19      	adds	r1, r3, #4
 800769a:	6031      	str	r1, [r6, #0]
 800769c:	0606      	lsls	r6, r0, #24
 800769e:	d501      	bpl.n	80076a4 <_printf_i+0xbc>
 80076a0:	681d      	ldr	r5, [r3, #0]
 80076a2:	e003      	b.n	80076ac <_printf_i+0xc4>
 80076a4:	0645      	lsls	r5, r0, #25
 80076a6:	d5fb      	bpl.n	80076a0 <_printf_i+0xb8>
 80076a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	da03      	bge.n	80076b8 <_printf_i+0xd0>
 80076b0:	232d      	movs	r3, #45	@ 0x2d
 80076b2:	426d      	negs	r5, r5
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b8:	230a      	movs	r3, #10
 80076ba:	4858      	ldr	r0, [pc, #352]	@ (800781c <_printf_i+0x234>)
 80076bc:	e011      	b.n	80076e2 <_printf_i+0xfa>
 80076be:	6821      	ldr	r1, [r4, #0]
 80076c0:	6833      	ldr	r3, [r6, #0]
 80076c2:	0608      	lsls	r0, r1, #24
 80076c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80076c8:	d402      	bmi.n	80076d0 <_printf_i+0xe8>
 80076ca:	0649      	lsls	r1, r1, #25
 80076cc:	bf48      	it	mi
 80076ce:	b2ad      	uxthmi	r5, r5
 80076d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	bf14      	ite	ne
 80076d6:	230a      	movne	r3, #10
 80076d8:	2308      	moveq	r3, #8
 80076da:	4850      	ldr	r0, [pc, #320]	@ (800781c <_printf_i+0x234>)
 80076dc:	2100      	movs	r1, #0
 80076de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076e2:	6866      	ldr	r6, [r4, #4]
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	60a6      	str	r6, [r4, #8]
 80076e8:	db05      	blt.n	80076f6 <_printf_i+0x10e>
 80076ea:	6821      	ldr	r1, [r4, #0]
 80076ec:	432e      	orrs	r6, r5
 80076ee:	f021 0104 	bic.w	r1, r1, #4
 80076f2:	6021      	str	r1, [r4, #0]
 80076f4:	d04b      	beq.n	800778e <_printf_i+0x1a6>
 80076f6:	4616      	mov	r6, r2
 80076f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80076fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007700:	5dc7      	ldrb	r7, [r0, r7]
 8007702:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007706:	462f      	mov	r7, r5
 8007708:	42bb      	cmp	r3, r7
 800770a:	460d      	mov	r5, r1
 800770c:	d9f4      	bls.n	80076f8 <_printf_i+0x110>
 800770e:	2b08      	cmp	r3, #8
 8007710:	d10b      	bne.n	800772a <_printf_i+0x142>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	07df      	lsls	r7, r3, #31
 8007716:	d508      	bpl.n	800772a <_printf_i+0x142>
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	6861      	ldr	r1, [r4, #4]
 800771c:	4299      	cmp	r1, r3
 800771e:	bfde      	ittt	le
 8007720:	2330      	movle	r3, #48	@ 0x30
 8007722:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007726:	f106 36ff 	addle.w	r6, r6, #4294967295
 800772a:	1b92      	subs	r2, r2, r6
 800772c:	6122      	str	r2, [r4, #16]
 800772e:	464b      	mov	r3, r9
 8007730:	4621      	mov	r1, r4
 8007732:	4640      	mov	r0, r8
 8007734:	f8cd a000 	str.w	sl, [sp]
 8007738:	aa03      	add	r2, sp, #12
 800773a:	f7ff fee3 	bl	8007504 <_printf_common>
 800773e:	3001      	adds	r0, #1
 8007740:	d14a      	bne.n	80077d8 <_printf_i+0x1f0>
 8007742:	f04f 30ff 	mov.w	r0, #4294967295
 8007746:	b004      	add	sp, #16
 8007748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	f043 0320 	orr.w	r3, r3, #32
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	2778      	movs	r7, #120	@ 0x78
 8007756:	4832      	ldr	r0, [pc, #200]	@ (8007820 <_printf_i+0x238>)
 8007758:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	6831      	ldr	r1, [r6, #0]
 8007760:	061f      	lsls	r7, r3, #24
 8007762:	f851 5b04 	ldr.w	r5, [r1], #4
 8007766:	d402      	bmi.n	800776e <_printf_i+0x186>
 8007768:	065f      	lsls	r7, r3, #25
 800776a:	bf48      	it	mi
 800776c:	b2ad      	uxthmi	r5, r5
 800776e:	6031      	str	r1, [r6, #0]
 8007770:	07d9      	lsls	r1, r3, #31
 8007772:	bf44      	itt	mi
 8007774:	f043 0320 	orrmi.w	r3, r3, #32
 8007778:	6023      	strmi	r3, [r4, #0]
 800777a:	b11d      	cbz	r5, 8007784 <_printf_i+0x19c>
 800777c:	2310      	movs	r3, #16
 800777e:	e7ad      	b.n	80076dc <_printf_i+0xf4>
 8007780:	4826      	ldr	r0, [pc, #152]	@ (800781c <_printf_i+0x234>)
 8007782:	e7e9      	b.n	8007758 <_printf_i+0x170>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	f023 0320 	bic.w	r3, r3, #32
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	e7f6      	b.n	800777c <_printf_i+0x194>
 800778e:	4616      	mov	r6, r2
 8007790:	e7bd      	b.n	800770e <_printf_i+0x126>
 8007792:	6833      	ldr	r3, [r6, #0]
 8007794:	6825      	ldr	r5, [r4, #0]
 8007796:	1d18      	adds	r0, r3, #4
 8007798:	6961      	ldr	r1, [r4, #20]
 800779a:	6030      	str	r0, [r6, #0]
 800779c:	062e      	lsls	r6, r5, #24
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	d501      	bpl.n	80077a6 <_printf_i+0x1be>
 80077a2:	6019      	str	r1, [r3, #0]
 80077a4:	e002      	b.n	80077ac <_printf_i+0x1c4>
 80077a6:	0668      	lsls	r0, r5, #25
 80077a8:	d5fb      	bpl.n	80077a2 <_printf_i+0x1ba>
 80077aa:	8019      	strh	r1, [r3, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	4616      	mov	r6, r2
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	e7bc      	b.n	800772e <_printf_i+0x146>
 80077b4:	6833      	ldr	r3, [r6, #0]
 80077b6:	2100      	movs	r1, #0
 80077b8:	1d1a      	adds	r2, r3, #4
 80077ba:	6032      	str	r2, [r6, #0]
 80077bc:	681e      	ldr	r6, [r3, #0]
 80077be:	6862      	ldr	r2, [r4, #4]
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 fa36 	bl	8007c32 <memchr>
 80077c6:	b108      	cbz	r0, 80077cc <_printf_i+0x1e4>
 80077c8:	1b80      	subs	r0, r0, r6
 80077ca:	6060      	str	r0, [r4, #4]
 80077cc:	6863      	ldr	r3, [r4, #4]
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	2300      	movs	r3, #0
 80077d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d6:	e7aa      	b.n	800772e <_printf_i+0x146>
 80077d8:	4632      	mov	r2, r6
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	47d0      	blx	sl
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0ad      	beq.n	8007742 <_printf_i+0x15a>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	079b      	lsls	r3, r3, #30
 80077ea:	d413      	bmi.n	8007814 <_printf_i+0x22c>
 80077ec:	68e0      	ldr	r0, [r4, #12]
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	4298      	cmp	r0, r3
 80077f2:	bfb8      	it	lt
 80077f4:	4618      	movlt	r0, r3
 80077f6:	e7a6      	b.n	8007746 <_printf_i+0x15e>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4632      	mov	r2, r6
 80077fc:	4649      	mov	r1, r9
 80077fe:	4640      	mov	r0, r8
 8007800:	47d0      	blx	sl
 8007802:	3001      	adds	r0, #1
 8007804:	d09d      	beq.n	8007742 <_printf_i+0x15a>
 8007806:	3501      	adds	r5, #1
 8007808:	68e3      	ldr	r3, [r4, #12]
 800780a:	9903      	ldr	r1, [sp, #12]
 800780c:	1a5b      	subs	r3, r3, r1
 800780e:	42ab      	cmp	r3, r5
 8007810:	dcf2      	bgt.n	80077f8 <_printf_i+0x210>
 8007812:	e7eb      	b.n	80077ec <_printf_i+0x204>
 8007814:	2500      	movs	r5, #0
 8007816:	f104 0619 	add.w	r6, r4, #25
 800781a:	e7f5      	b.n	8007808 <_printf_i+0x220>
 800781c:	0800a326 	.word	0x0800a326
 8007820:	0800a337 	.word	0x0800a337

08007824 <std>:
 8007824:	2300      	movs	r3, #0
 8007826:	b510      	push	{r4, lr}
 8007828:	4604      	mov	r4, r0
 800782a:	e9c0 3300 	strd	r3, r3, [r0]
 800782e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007832:	6083      	str	r3, [r0, #8]
 8007834:	8181      	strh	r1, [r0, #12]
 8007836:	6643      	str	r3, [r0, #100]	@ 0x64
 8007838:	81c2      	strh	r2, [r0, #14]
 800783a:	6183      	str	r3, [r0, #24]
 800783c:	4619      	mov	r1, r3
 800783e:	2208      	movs	r2, #8
 8007840:	305c      	adds	r0, #92	@ 0x5c
 8007842:	f000 f967 	bl	8007b14 <memset>
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x58>)
 8007848:	6224      	str	r4, [r4, #32]
 800784a:	6263      	str	r3, [r4, #36]	@ 0x24
 800784c:	4b0c      	ldr	r3, [pc, #48]	@ (8007880 <std+0x5c>)
 800784e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007850:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <std+0x60>)
 8007852:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <std+0x64>)
 8007856:	6323      	str	r3, [r4, #48]	@ 0x30
 8007858:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <std+0x68>)
 800785a:	429c      	cmp	r4, r3
 800785c:	d006      	beq.n	800786c <std+0x48>
 800785e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007862:	4294      	cmp	r4, r2
 8007864:	d002      	beq.n	800786c <std+0x48>
 8007866:	33d0      	adds	r3, #208	@ 0xd0
 8007868:	429c      	cmp	r4, r3
 800786a:	d105      	bne.n	8007878 <std+0x54>
 800786c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007874:	f000 b9da 	b.w	8007c2c <__retarget_lock_init_recursive>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	bf00      	nop
 800787c:	08007a15 	.word	0x08007a15
 8007880:	08007a37 	.word	0x08007a37
 8007884:	08007a6f 	.word	0x08007a6f
 8007888:	08007a93 	.word	0x08007a93
 800788c:	20001988 	.word	0x20001988

08007890 <stdio_exit_handler>:
 8007890:	4a02      	ldr	r2, [pc, #8]	@ (800789c <stdio_exit_handler+0xc>)
 8007892:	4903      	ldr	r1, [pc, #12]	@ (80078a0 <stdio_exit_handler+0x10>)
 8007894:	4803      	ldr	r0, [pc, #12]	@ (80078a4 <stdio_exit_handler+0x14>)
 8007896:	f000 b869 	b.w	800796c <_fwalk_sglue>
 800789a:	bf00      	nop
 800789c:	20000418 	.word	0x20000418
 80078a0:	0800943d 	.word	0x0800943d
 80078a4:	20000428 	.word	0x20000428

080078a8 <cleanup_stdio>:
 80078a8:	6841      	ldr	r1, [r0, #4]
 80078aa:	4b0c      	ldr	r3, [pc, #48]	@ (80078dc <cleanup_stdio+0x34>)
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4299      	cmp	r1, r3
 80078b0:	4604      	mov	r4, r0
 80078b2:	d001      	beq.n	80078b8 <cleanup_stdio+0x10>
 80078b4:	f001 fdc2 	bl	800943c <_fflush_r>
 80078b8:	68a1      	ldr	r1, [r4, #8]
 80078ba:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <cleanup_stdio+0x38>)
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <cleanup_stdio+0x1e>
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 fdbb 	bl	800943c <_fflush_r>
 80078c6:	68e1      	ldr	r1, [r4, #12]
 80078c8:	4b06      	ldr	r3, [pc, #24]	@ (80078e4 <cleanup_stdio+0x3c>)
 80078ca:	4299      	cmp	r1, r3
 80078cc:	d004      	beq.n	80078d8 <cleanup_stdio+0x30>
 80078ce:	4620      	mov	r0, r4
 80078d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d4:	f001 bdb2 	b.w	800943c <_fflush_r>
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	bf00      	nop
 80078dc:	20001988 	.word	0x20001988
 80078e0:	200019f0 	.word	0x200019f0
 80078e4:	20001a58 	.word	0x20001a58

080078e8 <global_stdio_init.part.0>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <global_stdio_init.part.0+0x30>)
 80078ec:	4c0b      	ldr	r4, [pc, #44]	@ (800791c <global_stdio_init.part.0+0x34>)
 80078ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007920 <global_stdio_init.part.0+0x38>)
 80078f0:	4620      	mov	r0, r4
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	2104      	movs	r1, #4
 80078f6:	2200      	movs	r2, #0
 80078f8:	f7ff ff94 	bl	8007824 <std>
 80078fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007900:	2201      	movs	r2, #1
 8007902:	2109      	movs	r1, #9
 8007904:	f7ff ff8e 	bl	8007824 <std>
 8007908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800790c:	2202      	movs	r2, #2
 800790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007912:	2112      	movs	r1, #18
 8007914:	f7ff bf86 	b.w	8007824 <std>
 8007918:	20001ac0 	.word	0x20001ac0
 800791c:	20001988 	.word	0x20001988
 8007920:	08007891 	.word	0x08007891

08007924 <__sfp_lock_acquire>:
 8007924:	4801      	ldr	r0, [pc, #4]	@ (800792c <__sfp_lock_acquire+0x8>)
 8007926:	f000 b982 	b.w	8007c2e <__retarget_lock_acquire_recursive>
 800792a:	bf00      	nop
 800792c:	20001ac9 	.word	0x20001ac9

08007930 <__sfp_lock_release>:
 8007930:	4801      	ldr	r0, [pc, #4]	@ (8007938 <__sfp_lock_release+0x8>)
 8007932:	f000 b97d 	b.w	8007c30 <__retarget_lock_release_recursive>
 8007936:	bf00      	nop
 8007938:	20001ac9 	.word	0x20001ac9

0800793c <__sinit>:
 800793c:	b510      	push	{r4, lr}
 800793e:	4604      	mov	r4, r0
 8007940:	f7ff fff0 	bl	8007924 <__sfp_lock_acquire>
 8007944:	6a23      	ldr	r3, [r4, #32]
 8007946:	b11b      	cbz	r3, 8007950 <__sinit+0x14>
 8007948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794c:	f7ff bff0 	b.w	8007930 <__sfp_lock_release>
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <__sinit+0x28>)
 8007952:	6223      	str	r3, [r4, #32]
 8007954:	4b04      	ldr	r3, [pc, #16]	@ (8007968 <__sinit+0x2c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f5      	bne.n	8007948 <__sinit+0xc>
 800795c:	f7ff ffc4 	bl	80078e8 <global_stdio_init.part.0>
 8007960:	e7f2      	b.n	8007948 <__sinit+0xc>
 8007962:	bf00      	nop
 8007964:	080078a9 	.word	0x080078a9
 8007968:	20001ac0 	.word	0x20001ac0

0800796c <_fwalk_sglue>:
 800796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007970:	4607      	mov	r7, r0
 8007972:	4688      	mov	r8, r1
 8007974:	4614      	mov	r4, r2
 8007976:	2600      	movs	r6, #0
 8007978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800797c:	f1b9 0901 	subs.w	r9, r9, #1
 8007980:	d505      	bpl.n	800798e <_fwalk_sglue+0x22>
 8007982:	6824      	ldr	r4, [r4, #0]
 8007984:	2c00      	cmp	r4, #0
 8007986:	d1f7      	bne.n	8007978 <_fwalk_sglue+0xc>
 8007988:	4630      	mov	r0, r6
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d907      	bls.n	80079a4 <_fwalk_sglue+0x38>
 8007994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007998:	3301      	adds	r3, #1
 800799a:	d003      	beq.n	80079a4 <_fwalk_sglue+0x38>
 800799c:	4629      	mov	r1, r5
 800799e:	4638      	mov	r0, r7
 80079a0:	47c0      	blx	r8
 80079a2:	4306      	orrs	r6, r0
 80079a4:	3568      	adds	r5, #104	@ 0x68
 80079a6:	e7e9      	b.n	800797c <_fwalk_sglue+0x10>

080079a8 <sniprintf>:
 80079a8:	b40c      	push	{r2, r3}
 80079aa:	b530      	push	{r4, r5, lr}
 80079ac:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <sniprintf+0x68>)
 80079ae:	1e0c      	subs	r4, r1, #0
 80079b0:	681d      	ldr	r5, [r3, #0]
 80079b2:	b09d      	sub	sp, #116	@ 0x74
 80079b4:	da08      	bge.n	80079c8 <sniprintf+0x20>
 80079b6:	238b      	movs	r3, #139	@ 0x8b
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	b01d      	add	sp, #116	@ 0x74
 80079c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c4:	b002      	add	sp, #8
 80079c6:	4770      	bx	lr
 80079c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80079cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80079d6:	bf0c      	ite	eq
 80079d8:	4623      	moveq	r3, r4
 80079da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079e6:	9002      	str	r0, [sp, #8]
 80079e8:	9006      	str	r0, [sp, #24]
 80079ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079ee:	4628      	mov	r0, r5
 80079f0:	ab21      	add	r3, sp, #132	@ 0x84
 80079f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079f4:	a902      	add	r1, sp, #8
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f001 fba4 	bl	8009144 <_svfiprintf_r>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	bfbc      	itt	lt
 8007a00:	238b      	movlt	r3, #139	@ 0x8b
 8007a02:	602b      	strlt	r3, [r5, #0]
 8007a04:	2c00      	cmp	r4, #0
 8007a06:	d0da      	beq.n	80079be <sniprintf+0x16>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e7d6      	b.n	80079be <sniprintf+0x16>
 8007a10:	20000424 	.word	0x20000424

08007a14 <__sread>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	460c      	mov	r4, r1
 8007a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1c:	f000 f8a8 	bl	8007b70 <_read_r>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	bfab      	itete	ge
 8007a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a26:	89a3      	ldrhlt	r3, [r4, #12]
 8007a28:	181b      	addge	r3, r3, r0
 8007a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a2e:	bfac      	ite	ge
 8007a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a32:	81a3      	strhlt	r3, [r4, #12]
 8007a34:	bd10      	pop	{r4, pc}

08007a36 <__swrite>:
 8007a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3a:	461f      	mov	r7, r3
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	4605      	mov	r5, r0
 8007a40:	05db      	lsls	r3, r3, #23
 8007a42:	460c      	mov	r4, r1
 8007a44:	4616      	mov	r6, r2
 8007a46:	d505      	bpl.n	8007a54 <__swrite+0x1e>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a50:	f000 f87c 	bl	8007b4c <_lseek_r>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	4632      	mov	r2, r6
 8007a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	4628      	mov	r0, r5
 8007a60:	463b      	mov	r3, r7
 8007a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	f000 b8a3 	b.w	8007bb4 <_write_r>

08007a6e <__sseek>:
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	460c      	mov	r4, r1
 8007a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a76:	f000 f869 	bl	8007b4c <_lseek_r>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	bf15      	itete	ne
 8007a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a8a:	81a3      	strheq	r3, [r4, #12]
 8007a8c:	bf18      	it	ne
 8007a8e:	81a3      	strhne	r3, [r4, #12]
 8007a90:	bd10      	pop	{r4, pc}

08007a92 <__sclose>:
 8007a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a96:	f000 b849 	b.w	8007b2c <_close_r>

08007a9a <_vsniprintf_r>:
 8007a9a:	b530      	push	{r4, r5, lr}
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	b09b      	sub	sp, #108	@ 0x6c
 8007aa6:	da05      	bge.n	8007ab4 <_vsniprintf_r+0x1a>
 8007aa8:	238b      	movs	r3, #139	@ 0x8b
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01b      	add	sp, #108	@ 0x6c
 8007ab2:	bd30      	pop	{r4, r5, pc}
 8007ab4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ab8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ac2:	bf0c      	ite	eq
 8007ac4:	4623      	moveq	r3, r4
 8007ac6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aca:	9302      	str	r3, [sp, #8]
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ad2:	9100      	str	r1, [sp, #0]
 8007ad4:	9104      	str	r1, [sp, #16]
 8007ad6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ada:	4669      	mov	r1, sp
 8007adc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007ade:	f001 fb31 	bl	8009144 <_svfiprintf_r>
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	bfbc      	itt	lt
 8007ae6:	238b      	movlt	r3, #139	@ 0x8b
 8007ae8:	602b      	strlt	r3, [r5, #0]
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d0e0      	beq.n	8007ab0 <_vsniprintf_r+0x16>
 8007aee:	2200      	movs	r2, #0
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	e7dc      	b.n	8007ab0 <_vsniprintf_r+0x16>
	...

08007af8 <vsniprintf>:
 8007af8:	b507      	push	{r0, r1, r2, lr}
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	460a      	mov	r2, r1
 8007b00:	4601      	mov	r1, r0
 8007b02:	4803      	ldr	r0, [pc, #12]	@ (8007b10 <vsniprintf+0x18>)
 8007b04:	6800      	ldr	r0, [r0, #0]
 8007b06:	f7ff ffc8 	bl	8007a9a <_vsniprintf_r>
 8007b0a:	b003      	add	sp, #12
 8007b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b10:	20000424 	.word	0x20000424

08007b14 <memset>:
 8007b14:	4603      	mov	r3, r0
 8007b16:	4402      	add	r2, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <_localeconv_r>:
 8007b24:	4800      	ldr	r0, [pc, #0]	@ (8007b28 <_localeconv_r+0x4>)
 8007b26:	4770      	bx	lr
 8007b28:	20000564 	.word	0x20000564

08007b2c <_close_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4d05      	ldr	r5, [pc, #20]	@ (8007b48 <_close_r+0x1c>)
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7f9 fb65 	bl	8001206 <_close>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_close_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_close_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20001ac4 	.word	0x20001ac4

08007b4c <_lseek_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	4611      	mov	r1, r2
 8007b54:	2200      	movs	r2, #0
 8007b56:	4d05      	ldr	r5, [pc, #20]	@ (8007b6c <_lseek_r+0x20>)
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 fb77 	bl	800124e <_lseek>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_lseek_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_lseek_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20001ac4 	.word	0x20001ac4

08007b70 <_read_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4d05      	ldr	r5, [pc, #20]	@ (8007b90 <_read_r+0x20>)
 8007b7c:	602a      	str	r2, [r5, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f7f9 fb08 	bl	8001194 <_read>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_read_r+0x1e>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_read_r+0x1e>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20001ac4 	.word	0x20001ac4

08007b94 <_sbrk_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	2300      	movs	r3, #0
 8007b98:	4d05      	ldr	r5, [pc, #20]	@ (8007bb0 <_sbrk_r+0x1c>)
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7f9 fb62 	bl	8001268 <_sbrk>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_sbrk_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_sbrk_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20001ac4 	.word	0x20001ac4

08007bb4 <_write_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4d05      	ldr	r5, [pc, #20]	@ (8007bd4 <_write_r+0x20>)
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7f9 fb03 	bl	80011ce <_write>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_write_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_write_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20001ac4 	.word	0x20001ac4

08007bd8 <__errno>:
 8007bd8:	4b01      	ldr	r3, [pc, #4]	@ (8007be0 <__errno+0x8>)
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000424 	.word	0x20000424

08007be4 <__libc_init_array>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	2600      	movs	r6, #0
 8007be8:	4d0c      	ldr	r5, [pc, #48]	@ (8007c1c <__libc_init_array+0x38>)
 8007bea:	4c0d      	ldr	r4, [pc, #52]	@ (8007c20 <__libc_init_array+0x3c>)
 8007bec:	1b64      	subs	r4, r4, r5
 8007bee:	10a4      	asrs	r4, r4, #2
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	d109      	bne.n	8007c08 <__libc_init_array+0x24>
 8007bf4:	f001 ffae 	bl	8009b54 <_init>
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	4d0a      	ldr	r5, [pc, #40]	@ (8007c24 <__libc_init_array+0x40>)
 8007bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8007c28 <__libc_init_array+0x44>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	42a6      	cmp	r6, r4
 8007c04:	d105      	bne.n	8007c12 <__libc_init_array+0x2e>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0c:	4798      	blx	r3
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7ee      	b.n	8007bf0 <__libc_init_array+0xc>
 8007c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c16:	4798      	blx	r3
 8007c18:	3601      	adds	r6, #1
 8007c1a:	e7f2      	b.n	8007c02 <__libc_init_array+0x1e>
 8007c1c:	0800a694 	.word	0x0800a694
 8007c20:	0800a694 	.word	0x0800a694
 8007c24:	0800a694 	.word	0x0800a694
 8007c28:	0800a698 	.word	0x0800a698

08007c2c <__retarget_lock_init_recursive>:
 8007c2c:	4770      	bx	lr

08007c2e <__retarget_lock_acquire_recursive>:
 8007c2e:	4770      	bx	lr

08007c30 <__retarget_lock_release_recursive>:
 8007c30:	4770      	bx	lr

08007c32 <memchr>:
 8007c32:	4603      	mov	r3, r0
 8007c34:	b510      	push	{r4, lr}
 8007c36:	b2c9      	uxtb	r1, r1
 8007c38:	4402      	add	r2, r0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	d101      	bne.n	8007c44 <memchr+0x12>
 8007c40:	2000      	movs	r0, #0
 8007c42:	e003      	b.n	8007c4c <memchr+0x1a>
 8007c44:	7804      	ldrb	r4, [r0, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	428c      	cmp	r4, r1
 8007c4a:	d1f6      	bne.n	8007c3a <memchr+0x8>
 8007c4c:	bd10      	pop	{r4, pc}

08007c4e <quorem>:
 8007c4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c52:	6903      	ldr	r3, [r0, #16]
 8007c54:	690c      	ldr	r4, [r1, #16]
 8007c56:	4607      	mov	r7, r0
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	db7e      	blt.n	8007d5a <quorem+0x10c>
 8007c5c:	3c01      	subs	r4, #1
 8007c5e:	00a3      	lsls	r3, r4, #2
 8007c60:	f100 0514 	add.w	r5, r0, #20
 8007c64:	f101 0814 	add.w	r8, r1, #20
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c84:	d32e      	bcc.n	8007ce4 <quorem+0x96>
 8007c86:	f04f 0a00 	mov.w	sl, #0
 8007c8a:	46c4      	mov	ip, r8
 8007c8c:	46ae      	mov	lr, r5
 8007c8e:	46d3      	mov	fp, sl
 8007c90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c94:	b298      	uxth	r0, r3
 8007c96:	fb06 a000 	mla	r0, r6, r0, sl
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	0c02      	lsrs	r2, r0, #16
 8007c9e:	fb06 2303 	mla	r3, r6, r3, r2
 8007ca2:	f8de 2000 	ldr.w	r2, [lr]
 8007ca6:	b280      	uxth	r0, r0
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	1a12      	subs	r2, r2, r0
 8007cac:	445a      	add	r2, fp
 8007cae:	f8de 0000 	ldr.w	r0, [lr]
 8007cb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007cbc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cc6:	45e1      	cmp	r9, ip
 8007cc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ccc:	f84e 2b04 	str.w	r2, [lr], #4
 8007cd0:	d2de      	bcs.n	8007c90 <quorem+0x42>
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	58eb      	ldr	r3, [r5, r3]
 8007cd6:	b92b      	cbnz	r3, 8007ce4 <quorem+0x96>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	d32f      	bcc.n	8007d42 <quorem+0xf4>
 8007ce2:	613c      	str	r4, [r7, #16]
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f001 f8c9 	bl	8008e7c <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	db25      	blt.n	8007d3a <quorem+0xec>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cf6:	f8d1 c000 	ldr.w	ip, [r1]
 8007cfa:	fa1f fe82 	uxth.w	lr, r2
 8007cfe:	fa1f f38c 	uxth.w	r3, ip
 8007d02:	eba3 030e 	sub.w	r3, r3, lr
 8007d06:	4403      	add	r3, r0
 8007d08:	0c12      	lsrs	r2, r2, #16
 8007d0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d18:	45c1      	cmp	r9, r8
 8007d1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d1e:	f841 3b04 	str.w	r3, [r1], #4
 8007d22:	d2e6      	bcs.n	8007cf2 <quorem+0xa4>
 8007d24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d2c:	b922      	cbnz	r2, 8007d38 <quorem+0xea>
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	429d      	cmp	r5, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	d30b      	bcc.n	8007d4e <quorem+0x100>
 8007d36:	613c      	str	r4, [r7, #16]
 8007d38:	3601      	adds	r6, #1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	b003      	add	sp, #12
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d1cb      	bne.n	8007ce2 <quorem+0x94>
 8007d4a:	3c01      	subs	r4, #1
 8007d4c:	e7c6      	b.n	8007cdc <quorem+0x8e>
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d1ef      	bne.n	8007d36 <quorem+0xe8>
 8007d56:	3c01      	subs	r4, #1
 8007d58:	e7ea      	b.n	8007d30 <quorem+0xe2>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e7ee      	b.n	8007d3c <quorem+0xee>
	...

08007d60 <_dtoa_r>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	4614      	mov	r4, r2
 8007d66:	461d      	mov	r5, r3
 8007d68:	69c7      	ldr	r7, [r0, #28]
 8007d6a:	b097      	sub	sp, #92	@ 0x5c
 8007d6c:	4681      	mov	r9, r0
 8007d6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d72:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007d74:	b97f      	cbnz	r7, 8007d96 <_dtoa_r+0x36>
 8007d76:	2010      	movs	r0, #16
 8007d78:	f7ff f83c 	bl	8006df4 <malloc>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007d82:	b920      	cbnz	r0, 8007d8e <_dtoa_r+0x2e>
 8007d84:	21ef      	movs	r1, #239	@ 0xef
 8007d86:	4bac      	ldr	r3, [pc, #688]	@ (8008038 <_dtoa_r+0x2d8>)
 8007d88:	48ac      	ldr	r0, [pc, #688]	@ (800803c <_dtoa_r+0x2dc>)
 8007d8a:	f001 fba7 	bl	80094dc <__assert_func>
 8007d8e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d92:	6007      	str	r7, [r0, #0]
 8007d94:	60c7      	str	r7, [r0, #12]
 8007d96:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d9a:	6819      	ldr	r1, [r3, #0]
 8007d9c:	b159      	cbz	r1, 8007db6 <_dtoa_r+0x56>
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	2301      	movs	r3, #1
 8007da2:	4093      	lsls	r3, r2
 8007da4:	604a      	str	r2, [r1, #4]
 8007da6:	608b      	str	r3, [r1, #8]
 8007da8:	4648      	mov	r0, r9
 8007daa:	f000 fe35 	bl	8008a18 <_Bfree>
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	1e2b      	subs	r3, r5, #0
 8007db8:	bfaf      	iteee	ge
 8007dba:	2300      	movge	r3, #0
 8007dbc:	2201      	movlt	r2, #1
 8007dbe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007dc2:	9307      	strlt	r3, [sp, #28]
 8007dc4:	bfa8      	it	ge
 8007dc6:	6033      	strge	r3, [r6, #0]
 8007dc8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8008040 <_dtoa_r+0x2e0>)
 8007dce:	bfb8      	it	lt
 8007dd0:	6032      	strlt	r2, [r6, #0]
 8007dd2:	ea33 0308 	bics.w	r3, r3, r8
 8007dd6:	d112      	bne.n	8007dfe <_dtoa_r+0x9e>
 8007dd8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ddc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007de4:	4323      	orrs	r3, r4
 8007de6:	f000 855e 	beq.w	80088a6 <_dtoa_r+0xb46>
 8007dea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007dec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008044 <_dtoa_r+0x2e4>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8560 	beq.w	80088b6 <_dtoa_r+0xb56>
 8007df6:	f10a 0303 	add.w	r3, sl, #3
 8007dfa:	f000 bd5a 	b.w	80088b2 <_dtoa_r+0xb52>
 8007dfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f7f8 fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8007e12:	4607      	mov	r7, r0
 8007e14:	b158      	cbz	r0, 8007e2e <_dtoa_r+0xce>
 8007e16:	2301      	movs	r3, #1
 8007e18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e1e:	b113      	cbz	r3, 8007e26 <_dtoa_r+0xc6>
 8007e20:	4b89      	ldr	r3, [pc, #548]	@ (8008048 <_dtoa_r+0x2e8>)
 8007e22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800804c <_dtoa_r+0x2ec>
 8007e2a:	f000 bd44 	b.w	80088b6 <_dtoa_r+0xb56>
 8007e2e:	ab14      	add	r3, sp, #80	@ 0x50
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	ab15      	add	r3, sp, #84	@ 0x54
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4648      	mov	r0, r9
 8007e38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e3c:	f001 f8ce 	bl	8008fdc <__d2b>
 8007e40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007e44:	9003      	str	r0, [sp, #12]
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d078      	beq.n	8007f3c <_dtoa_r+0x1dc>
 8007e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e60:	9712      	str	r7, [sp, #72]	@ 0x48
 8007e62:	4619      	mov	r1, r3
 8007e64:	2200      	movs	r2, #0
 8007e66:	4b7a      	ldr	r3, [pc, #488]	@ (8008050 <_dtoa_r+0x2f0>)
 8007e68:	f7f8 f97e 	bl	8000168 <__aeabi_dsub>
 8007e6c:	a36c      	add	r3, pc, #432	@ (adr r3, 8008020 <_dtoa_r+0x2c0>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f7f8 fb31 	bl	80004d8 <__aeabi_dmul>
 8007e76:	a36c      	add	r3, pc, #432	@ (adr r3, 8008028 <_dtoa_r+0x2c8>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 f976 	bl	800016c <__adddf3>
 8007e80:	4604      	mov	r4, r0
 8007e82:	4630      	mov	r0, r6
 8007e84:	460d      	mov	r5, r1
 8007e86:	f7f8 fabd 	bl	8000404 <__aeabi_i2d>
 8007e8a:	a369      	add	r3, pc, #420	@ (adr r3, 8008030 <_dtoa_r+0x2d0>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 f966 	bl	800016c <__adddf3>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	f7f8 fdc8 	bl	8000a38 <__aeabi_d2iz>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4607      	mov	r7, r0
 8007eac:	2300      	movs	r3, #0
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 fd83 	bl	80009bc <__aeabi_dcmplt>
 8007eb6:	b140      	cbz	r0, 8007eca <_dtoa_r+0x16a>
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7f8 faa3 	bl	8000404 <__aeabi_i2d>
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	f7f8 fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8007ec6:	b900      	cbnz	r0, 8007eca <_dtoa_r+0x16a>
 8007ec8:	3f01      	subs	r7, #1
 8007eca:	2f16      	cmp	r7, #22
 8007ecc:	d854      	bhi.n	8007f78 <_dtoa_r+0x218>
 8007ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ed2:	4b60      	ldr	r3, [pc, #384]	@ (8008054 <_dtoa_r+0x2f4>)
 8007ed4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f7f8 fd6e 	bl	80009bc <__aeabi_dcmplt>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d04b      	beq.n	8007f7c <_dtoa_r+0x21c>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3f01      	subs	r7, #1
 8007ee8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007eea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007eec:	1b9b      	subs	r3, r3, r6
 8007eee:	1e5a      	subs	r2, r3, #1
 8007ef0:	bf49      	itett	mi
 8007ef2:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ef6:	2300      	movpl	r3, #0
 8007ef8:	9304      	strmi	r3, [sp, #16]
 8007efa:	2300      	movmi	r3, #0
 8007efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007efe:	bf54      	ite	pl
 8007f00:	9304      	strpl	r3, [sp, #16]
 8007f02:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f04:	2f00      	cmp	r7, #0
 8007f06:	db3b      	blt.n	8007f80 <_dtoa_r+0x220>
 8007f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0a:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f0c:	443b      	add	r3, r7
 8007f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f10:	2300      	movs	r3, #0
 8007f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d865      	bhi.n	8007fe6 <_dtoa_r+0x286>
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	bfc4      	itt	gt
 8007f1e:	3b04      	subgt	r3, #4
 8007f20:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f24:	bfc8      	it	gt
 8007f26:	2400      	movgt	r4, #0
 8007f28:	f1a3 0302 	sub.w	r3, r3, #2
 8007f2c:	bfd8      	it	le
 8007f2e:	2401      	movle	r4, #1
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d864      	bhi.n	8007ffe <_dtoa_r+0x29e>
 8007f34:	e8df f003 	tbb	[pc, r3]
 8007f38:	2c385553 	.word	0x2c385553
 8007f3c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f40:	441e      	add	r6, r3
 8007f42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	bfc1      	itttt	gt
 8007f4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f4e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f5a:	bfd6      	itet	le
 8007f5c:	f1c3 0320 	rsble	r3, r3, #32
 8007f60:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f64:	fa04 f003 	lslle.w	r0, r4, r3
 8007f68:	f7f8 fa3c 	bl	80003e4 <__aeabi_ui2d>
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f72:	3e01      	subs	r6, #1
 8007f74:	9212      	str	r2, [sp, #72]	@ 0x48
 8007f76:	e774      	b.n	8007e62 <_dtoa_r+0x102>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7b5      	b.n	8007ee8 <_dtoa_r+0x188>
 8007f7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007f7e:	e7b4      	b.n	8007eea <_dtoa_r+0x18a>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	1bdb      	subs	r3, r3, r7
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	427b      	negs	r3, r7
 8007f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f8e:	e7c1      	b.n	8007f14 <_dtoa_r+0x1b4>
 8007f90:	2301      	movs	r3, #1
 8007f92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f96:	eb07 0b03 	add.w	fp, r7, r3
 8007f9a:	f10b 0301 	add.w	r3, fp, #1
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	9308      	str	r3, [sp, #32]
 8007fa2:	bfb8      	it	lt
 8007fa4:	2301      	movlt	r3, #1
 8007fa6:	e006      	b.n	8007fb6 <_dtoa_r+0x256>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd28      	ble.n	8008004 <_dtoa_r+0x2a4>
 8007fb2:	469b      	mov	fp, r3
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	2204      	movs	r2, #4
 8007fba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007fbe:	f102 0514 	add.w	r5, r2, #20
 8007fc2:	429d      	cmp	r5, r3
 8007fc4:	d926      	bls.n	8008014 <_dtoa_r+0x2b4>
 8007fc6:	6041      	str	r1, [r0, #4]
 8007fc8:	4648      	mov	r0, r9
 8007fca:	f000 fce5 	bl	8008998 <_Balloc>
 8007fce:	4682      	mov	sl, r0
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d143      	bne.n	800805c <_dtoa_r+0x2fc>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007fda:	4b1f      	ldr	r3, [pc, #124]	@ (8008058 <_dtoa_r+0x2f8>)
 8007fdc:	e6d4      	b.n	8007d88 <_dtoa_r+0x28>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e7e3      	b.n	8007faa <_dtoa_r+0x24a>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e7d5      	b.n	8007f92 <_dtoa_r+0x232>
 8007fe6:	2401      	movs	r4, #1
 8007fe8:	2300      	movs	r3, #0
 8007fea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fec:	9320      	str	r3, [sp, #128]	@ 0x80
 8007fee:	f04f 3bff 	mov.w	fp, #4294967295
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2312      	movs	r3, #18
 8007ff6:	f8cd b020 	str.w	fp, [sp, #32]
 8007ffa:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ffc:	e7db      	b.n	8007fb6 <_dtoa_r+0x256>
 8007ffe:	2301      	movs	r3, #1
 8008000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008002:	e7f4      	b.n	8007fee <_dtoa_r+0x28e>
 8008004:	f04f 0b01 	mov.w	fp, #1
 8008008:	465b      	mov	r3, fp
 800800a:	f8cd b020 	str.w	fp, [sp, #32]
 800800e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008012:	e7d0      	b.n	8007fb6 <_dtoa_r+0x256>
 8008014:	3101      	adds	r1, #1
 8008016:	0052      	lsls	r2, r2, #1
 8008018:	e7d1      	b.n	8007fbe <_dtoa_r+0x25e>
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w
 8008020:	636f4361 	.word	0x636f4361
 8008024:	3fd287a7 	.word	0x3fd287a7
 8008028:	8b60c8b3 	.word	0x8b60c8b3
 800802c:	3fc68a28 	.word	0x3fc68a28
 8008030:	509f79fb 	.word	0x509f79fb
 8008034:	3fd34413 	.word	0x3fd34413
 8008038:	0800a355 	.word	0x0800a355
 800803c:	0800a36c 	.word	0x0800a36c
 8008040:	7ff00000 	.word	0x7ff00000
 8008044:	0800a351 	.word	0x0800a351
 8008048:	0800a325 	.word	0x0800a325
 800804c:	0800a324 	.word	0x0800a324
 8008050:	3ff80000 	.word	0x3ff80000
 8008054:	0800a4c0 	.word	0x0800a4c0
 8008058:	0800a3c4 	.word	0x0800a3c4
 800805c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	2b0e      	cmp	r3, #14
 8008066:	f200 80a1 	bhi.w	80081ac <_dtoa_r+0x44c>
 800806a:	2c00      	cmp	r4, #0
 800806c:	f000 809e 	beq.w	80081ac <_dtoa_r+0x44c>
 8008070:	2f00      	cmp	r7, #0
 8008072:	dd33      	ble.n	80080dc <_dtoa_r+0x37c>
 8008074:	4b9c      	ldr	r3, [pc, #624]	@ (80082e8 <_dtoa_r+0x588>)
 8008076:	f007 020f 	and.w	r2, r7, #15
 800807a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800807e:	05f8      	lsls	r0, r7, #23
 8008080:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008084:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800808c:	d516      	bpl.n	80080bc <_dtoa_r+0x35c>
 800808e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008092:	4b96      	ldr	r3, [pc, #600]	@ (80082ec <_dtoa_r+0x58c>)
 8008094:	2603      	movs	r6, #3
 8008096:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800809a:	f7f8 fb47 	bl	800072c <__aeabi_ddiv>
 800809e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080a2:	f004 040f 	and.w	r4, r4, #15
 80080a6:	4d91      	ldr	r5, [pc, #580]	@ (80082ec <_dtoa_r+0x58c>)
 80080a8:	b954      	cbnz	r4, 80080c0 <_dtoa_r+0x360>
 80080aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080b2:	f7f8 fb3b 	bl	800072c <__aeabi_ddiv>
 80080b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080ba:	e028      	b.n	800810e <_dtoa_r+0x3ae>
 80080bc:	2602      	movs	r6, #2
 80080be:	e7f2      	b.n	80080a6 <_dtoa_r+0x346>
 80080c0:	07e1      	lsls	r1, r4, #31
 80080c2:	d508      	bpl.n	80080d6 <_dtoa_r+0x376>
 80080c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080cc:	f7f8 fa04 	bl	80004d8 <__aeabi_dmul>
 80080d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080d4:	3601      	adds	r6, #1
 80080d6:	1064      	asrs	r4, r4, #1
 80080d8:	3508      	adds	r5, #8
 80080da:	e7e5      	b.n	80080a8 <_dtoa_r+0x348>
 80080dc:	f000 80af 	beq.w	800823e <_dtoa_r+0x4de>
 80080e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080e4:	427c      	negs	r4, r7
 80080e6:	4b80      	ldr	r3, [pc, #512]	@ (80082e8 <_dtoa_r+0x588>)
 80080e8:	f004 020f 	and.w	r2, r4, #15
 80080ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	2602      	movs	r6, #2
 80080fa:	2300      	movs	r3, #0
 80080fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008100:	4d7a      	ldr	r5, [pc, #488]	@ (80082ec <_dtoa_r+0x58c>)
 8008102:	1124      	asrs	r4, r4, #4
 8008104:	2c00      	cmp	r4, #0
 8008106:	f040 808f 	bne.w	8008228 <_dtoa_r+0x4c8>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1d3      	bne.n	80080b6 <_dtoa_r+0x356>
 800810e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8094 	beq.w	8008242 <_dtoa_r+0x4e2>
 800811a:	2200      	movs	r2, #0
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	4b73      	ldr	r3, [pc, #460]	@ (80082f0 <_dtoa_r+0x590>)
 8008122:	f7f8 fc4b 	bl	80009bc <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f000 808b 	beq.w	8008242 <_dtoa_r+0x4e2>
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8087 	beq.w	8008242 <_dtoa_r+0x4e2>
 8008134:	f1bb 0f00 	cmp.w	fp, #0
 8008138:	dd34      	ble.n	80081a4 <_dtoa_r+0x444>
 800813a:	4620      	mov	r0, r4
 800813c:	2200      	movs	r2, #0
 800813e:	4629      	mov	r1, r5
 8008140:	4b6c      	ldr	r3, [pc, #432]	@ (80082f4 <_dtoa_r+0x594>)
 8008142:	f7f8 f9c9 	bl	80004d8 <__aeabi_dmul>
 8008146:	465c      	mov	r4, fp
 8008148:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800814c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008150:	3601      	adds	r6, #1
 8008152:	4630      	mov	r0, r6
 8008154:	f7f8 f956 	bl	8000404 <__aeabi_i2d>
 8008158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	4b65      	ldr	r3, [pc, #404]	@ (80082f8 <_dtoa_r+0x598>)
 8008164:	f7f8 f802 	bl	800016c <__adddf3>
 8008168:	4605      	mov	r5, r0
 800816a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800816e:	2c00      	cmp	r4, #0
 8008170:	d16a      	bne.n	8008248 <_dtoa_r+0x4e8>
 8008172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008176:	2200      	movs	r2, #0
 8008178:	4b60      	ldr	r3, [pc, #384]	@ (80082fc <_dtoa_r+0x59c>)
 800817a:	f7f7 fff5 	bl	8000168 <__aeabi_dsub>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008186:	462a      	mov	r2, r5
 8008188:	4633      	mov	r3, r6
 800818a:	f7f8 fc35 	bl	80009f8 <__aeabi_dcmpgt>
 800818e:	2800      	cmp	r0, #0
 8008190:	f040 8298 	bne.w	80086c4 <_dtoa_r+0x964>
 8008194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008198:	462a      	mov	r2, r5
 800819a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800819e:	f7f8 fc0d 	bl	80009bc <__aeabi_dcmplt>
 80081a2:	bb38      	cbnz	r0, 80081f4 <_dtoa_r+0x494>
 80081a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f2c0 8157 	blt.w	8008462 <_dtoa_r+0x702>
 80081b4:	2f0e      	cmp	r7, #14
 80081b6:	f300 8154 	bgt.w	8008462 <_dtoa_r+0x702>
 80081ba:	4b4b      	ldr	r3, [pc, #300]	@ (80082e8 <_dtoa_r+0x588>)
 80081bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f280 80e5 	bge.w	800839a <_dtoa_r+0x63a>
 80081d0:	9b08      	ldr	r3, [sp, #32]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f300 80e1 	bgt.w	800839a <_dtoa_r+0x63a>
 80081d8:	d10c      	bne.n	80081f4 <_dtoa_r+0x494>
 80081da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081de:	2200      	movs	r2, #0
 80081e0:	4b46      	ldr	r3, [pc, #280]	@ (80082fc <_dtoa_r+0x59c>)
 80081e2:	f7f8 f979 	bl	80004d8 <__aeabi_dmul>
 80081e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ea:	f7f8 fbfb 	bl	80009e4 <__aeabi_dcmpge>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f000 8266 	beq.w	80086c0 <_dtoa_r+0x960>
 80081f4:	2400      	movs	r4, #0
 80081f6:	4625      	mov	r5, r4
 80081f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081fa:	4656      	mov	r6, sl
 80081fc:	ea6f 0803 	mvn.w	r8, r3
 8008200:	2700      	movs	r7, #0
 8008202:	4621      	mov	r1, r4
 8008204:	4648      	mov	r0, r9
 8008206:	f000 fc07 	bl	8008a18 <_Bfree>
 800820a:	2d00      	cmp	r5, #0
 800820c:	f000 80bd 	beq.w	800838a <_dtoa_r+0x62a>
 8008210:	b12f      	cbz	r7, 800821e <_dtoa_r+0x4be>
 8008212:	42af      	cmp	r7, r5
 8008214:	d003      	beq.n	800821e <_dtoa_r+0x4be>
 8008216:	4639      	mov	r1, r7
 8008218:	4648      	mov	r0, r9
 800821a:	f000 fbfd 	bl	8008a18 <_Bfree>
 800821e:	4629      	mov	r1, r5
 8008220:	4648      	mov	r0, r9
 8008222:	f000 fbf9 	bl	8008a18 <_Bfree>
 8008226:	e0b0      	b.n	800838a <_dtoa_r+0x62a>
 8008228:	07e2      	lsls	r2, r4, #31
 800822a:	d505      	bpl.n	8008238 <_dtoa_r+0x4d8>
 800822c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008230:	f7f8 f952 	bl	80004d8 <__aeabi_dmul>
 8008234:	2301      	movs	r3, #1
 8008236:	3601      	adds	r6, #1
 8008238:	1064      	asrs	r4, r4, #1
 800823a:	3508      	adds	r5, #8
 800823c:	e762      	b.n	8008104 <_dtoa_r+0x3a4>
 800823e:	2602      	movs	r6, #2
 8008240:	e765      	b.n	800810e <_dtoa_r+0x3ae>
 8008242:	46b8      	mov	r8, r7
 8008244:	9c08      	ldr	r4, [sp, #32]
 8008246:	e784      	b.n	8008152 <_dtoa_r+0x3f2>
 8008248:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <_dtoa_r+0x588>)
 800824a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800824c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008254:	4454      	add	r4, sl
 8008256:	2900      	cmp	r1, #0
 8008258:	d054      	beq.n	8008304 <_dtoa_r+0x5a4>
 800825a:	2000      	movs	r0, #0
 800825c:	4928      	ldr	r1, [pc, #160]	@ (8008300 <_dtoa_r+0x5a0>)
 800825e:	f7f8 fa65 	bl	800072c <__aeabi_ddiv>
 8008262:	4633      	mov	r3, r6
 8008264:	462a      	mov	r2, r5
 8008266:	f7f7 ff7f 	bl	8000168 <__aeabi_dsub>
 800826a:	4656      	mov	r6, sl
 800826c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008274:	f7f8 fbe0 	bl	8000a38 <__aeabi_d2iz>
 8008278:	4605      	mov	r5, r0
 800827a:	f7f8 f8c3 	bl	8000404 <__aeabi_i2d>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008286:	f7f7 ff6f 	bl	8000168 <__aeabi_dsub>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	3530      	adds	r5, #48	@ 0x30
 8008290:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008298:	f806 5b01 	strb.w	r5, [r6], #1
 800829c:	f7f8 fb8e 	bl	80009bc <__aeabi_dcmplt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d172      	bne.n	800838a <_dtoa_r+0x62a>
 80082a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082a8:	2000      	movs	r0, #0
 80082aa:	4911      	ldr	r1, [pc, #68]	@ (80082f0 <_dtoa_r+0x590>)
 80082ac:	f7f7 ff5c 	bl	8000168 <__aeabi_dsub>
 80082b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082b4:	f7f8 fb82 	bl	80009bc <__aeabi_dcmplt>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 80b4 	bne.w	8008426 <_dtoa_r+0x6c6>
 80082be:	42a6      	cmp	r6, r4
 80082c0:	f43f af70 	beq.w	80081a4 <_dtoa_r+0x444>
 80082c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082c8:	2200      	movs	r2, #0
 80082ca:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <_dtoa_r+0x594>)
 80082cc:	f7f8 f904 	bl	80004d8 <__aeabi_dmul>
 80082d0:	2200      	movs	r2, #0
 80082d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082da:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <_dtoa_r+0x594>)
 80082dc:	f7f8 f8fc 	bl	80004d8 <__aeabi_dmul>
 80082e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082e4:	e7c4      	b.n	8008270 <_dtoa_r+0x510>
 80082e6:	bf00      	nop
 80082e8:	0800a4c0 	.word	0x0800a4c0
 80082ec:	0800a498 	.word	0x0800a498
 80082f0:	3ff00000 	.word	0x3ff00000
 80082f4:	40240000 	.word	0x40240000
 80082f8:	401c0000 	.word	0x401c0000
 80082fc:	40140000 	.word	0x40140000
 8008300:	3fe00000 	.word	0x3fe00000
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	4656      	mov	r6, sl
 800830e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008312:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008318:	f7f8 fb8e 	bl	8000a38 <__aeabi_d2iz>
 800831c:	4605      	mov	r5, r0
 800831e:	f7f8 f871 	bl	8000404 <__aeabi_i2d>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800832a:	f7f7 ff1d 	bl	8000168 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	3530      	adds	r5, #48	@ 0x30
 8008334:	f806 5b01 	strb.w	r5, [r6], #1
 8008338:	42a6      	cmp	r6, r4
 800833a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	d124      	bne.n	800838e <_dtoa_r+0x62e>
 8008344:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008348:	4bae      	ldr	r3, [pc, #696]	@ (8008604 <_dtoa_r+0x8a4>)
 800834a:	f7f7 ff0f 	bl	800016c <__adddf3>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008356:	f7f8 fb4f 	bl	80009f8 <__aeabi_dcmpgt>
 800835a:	2800      	cmp	r0, #0
 800835c:	d163      	bne.n	8008426 <_dtoa_r+0x6c6>
 800835e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008362:	2000      	movs	r0, #0
 8008364:	49a7      	ldr	r1, [pc, #668]	@ (8008604 <_dtoa_r+0x8a4>)
 8008366:	f7f7 feff 	bl	8000168 <__aeabi_dsub>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008372:	f7f8 fb23 	bl	80009bc <__aeabi_dcmplt>
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f af14 	beq.w	80081a4 <_dtoa_r+0x444>
 800837c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800837e:	1e73      	subs	r3, r6, #1
 8008380:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008382:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008386:	2b30      	cmp	r3, #48	@ 0x30
 8008388:	d0f8      	beq.n	800837c <_dtoa_r+0x61c>
 800838a:	4647      	mov	r7, r8
 800838c:	e03b      	b.n	8008406 <_dtoa_r+0x6a6>
 800838e:	4b9e      	ldr	r3, [pc, #632]	@ (8008608 <_dtoa_r+0x8a8>)
 8008390:	f7f8 f8a2 	bl	80004d8 <__aeabi_dmul>
 8008394:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008398:	e7bc      	b.n	8008314 <_dtoa_r+0x5b4>
 800839a:	4656      	mov	r6, sl
 800839c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80083a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a4:	4620      	mov	r0, r4
 80083a6:	4629      	mov	r1, r5
 80083a8:	f7f8 f9c0 	bl	800072c <__aeabi_ddiv>
 80083ac:	f7f8 fb44 	bl	8000a38 <__aeabi_d2iz>
 80083b0:	4680      	mov	r8, r0
 80083b2:	f7f8 f827 	bl	8000404 <__aeabi_i2d>
 80083b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ba:	f7f8 f88d 	bl	80004d8 <__aeabi_dmul>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f7 fecf 	bl	8000168 <__aeabi_dsub>
 80083ca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80083ce:	9d08      	ldr	r5, [sp, #32]
 80083d0:	f806 4b01 	strb.w	r4, [r6], #1
 80083d4:	eba6 040a 	sub.w	r4, r6, sl
 80083d8:	42a5      	cmp	r5, r4
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	d133      	bne.n	8008448 <_dtoa_r+0x6e8>
 80083e0:	f7f7 fec4 	bl	800016c <__adddf3>
 80083e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	f7f8 fb04 	bl	80009f8 <__aeabi_dcmpgt>
 80083f0:	b9c0      	cbnz	r0, 8008424 <_dtoa_r+0x6c4>
 80083f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fad5 	bl	80009a8 <__aeabi_dcmpeq>
 80083fe:	b110      	cbz	r0, 8008406 <_dtoa_r+0x6a6>
 8008400:	f018 0f01 	tst.w	r8, #1
 8008404:	d10e      	bne.n	8008424 <_dtoa_r+0x6c4>
 8008406:	4648      	mov	r0, r9
 8008408:	9903      	ldr	r1, [sp, #12]
 800840a:	f000 fb05 	bl	8008a18 <_Bfree>
 800840e:	2300      	movs	r3, #0
 8008410:	7033      	strb	r3, [r6, #0]
 8008412:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008414:	3701      	adds	r7, #1
 8008416:	601f      	str	r7, [r3, #0]
 8008418:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 824b 	beq.w	80088b6 <_dtoa_r+0xb56>
 8008420:	601e      	str	r6, [r3, #0]
 8008422:	e248      	b.n	80088b6 <_dtoa_r+0xb56>
 8008424:	46b8      	mov	r8, r7
 8008426:	4633      	mov	r3, r6
 8008428:	461e      	mov	r6, r3
 800842a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800842e:	2a39      	cmp	r2, #57	@ 0x39
 8008430:	d106      	bne.n	8008440 <_dtoa_r+0x6e0>
 8008432:	459a      	cmp	sl, r3
 8008434:	d1f8      	bne.n	8008428 <_dtoa_r+0x6c8>
 8008436:	2230      	movs	r2, #48	@ 0x30
 8008438:	f108 0801 	add.w	r8, r8, #1
 800843c:	f88a 2000 	strb.w	r2, [sl]
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	3201      	adds	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e7a0      	b.n	800838a <_dtoa_r+0x62a>
 8008448:	2200      	movs	r2, #0
 800844a:	4b6f      	ldr	r3, [pc, #444]	@ (8008608 <_dtoa_r+0x8a8>)
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	f7f8 faa6 	bl	80009a8 <__aeabi_dcmpeq>
 800845c:	2800      	cmp	r0, #0
 800845e:	d09f      	beq.n	80083a0 <_dtoa_r+0x640>
 8008460:	e7d1      	b.n	8008406 <_dtoa_r+0x6a6>
 8008462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008464:	2a00      	cmp	r2, #0
 8008466:	f000 80ea 	beq.w	800863e <_dtoa_r+0x8de>
 800846a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800846c:	2a01      	cmp	r2, #1
 800846e:	f300 80cd 	bgt.w	800860c <_dtoa_r+0x8ac>
 8008472:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008474:	2a00      	cmp	r2, #0
 8008476:	f000 80c1 	beq.w	80085fc <_dtoa_r+0x89c>
 800847a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800847e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008480:	9e04      	ldr	r6, [sp, #16]
 8008482:	9a04      	ldr	r2, [sp, #16]
 8008484:	2101      	movs	r1, #1
 8008486:	441a      	add	r2, r3
 8008488:	9204      	str	r2, [sp, #16]
 800848a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848c:	4648      	mov	r0, r9
 800848e:	441a      	add	r2, r3
 8008490:	9209      	str	r2, [sp, #36]	@ 0x24
 8008492:	f000 fb75 	bl	8008b80 <__i2b>
 8008496:	4605      	mov	r5, r0
 8008498:	b166      	cbz	r6, 80084b4 <_dtoa_r+0x754>
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd09      	ble.n	80084b4 <_dtoa_r+0x754>
 80084a0:	42b3      	cmp	r3, r6
 80084a2:	bfa8      	it	ge
 80084a4:	4633      	movge	r3, r6
 80084a6:	9a04      	ldr	r2, [sp, #16]
 80084a8:	1af6      	subs	r6, r6, r3
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	9204      	str	r2, [sp, #16]
 80084ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b6:	b30b      	cbz	r3, 80084fc <_dtoa_r+0x79c>
 80084b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80c6 	beq.w	800864c <_dtoa_r+0x8ec>
 80084c0:	2c00      	cmp	r4, #0
 80084c2:	f000 80c0 	beq.w	8008646 <_dtoa_r+0x8e6>
 80084c6:	4629      	mov	r1, r5
 80084c8:	4622      	mov	r2, r4
 80084ca:	4648      	mov	r0, r9
 80084cc:	f000 fc10 	bl	8008cf0 <__pow5mult>
 80084d0:	9a03      	ldr	r2, [sp, #12]
 80084d2:	4601      	mov	r1, r0
 80084d4:	4605      	mov	r5, r0
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 fb68 	bl	8008bac <__multiply>
 80084dc:	9903      	ldr	r1, [sp, #12]
 80084de:	4680      	mov	r8, r0
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 fa99 	bl	8008a18 <_Bfree>
 80084e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e8:	1b1b      	subs	r3, r3, r4
 80084ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ec:	f000 80b1 	beq.w	8008652 <_dtoa_r+0x8f2>
 80084f0:	4641      	mov	r1, r8
 80084f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084f4:	4648      	mov	r0, r9
 80084f6:	f000 fbfb 	bl	8008cf0 <__pow5mult>
 80084fa:	9003      	str	r0, [sp, #12]
 80084fc:	2101      	movs	r1, #1
 80084fe:	4648      	mov	r0, r9
 8008500:	f000 fb3e 	bl	8008b80 <__i2b>
 8008504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008506:	4604      	mov	r4, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 81d8 	beq.w	80088be <_dtoa_r+0xb5e>
 800850e:	461a      	mov	r2, r3
 8008510:	4601      	mov	r1, r0
 8008512:	4648      	mov	r0, r9
 8008514:	f000 fbec 	bl	8008cf0 <__pow5mult>
 8008518:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800851a:	4604      	mov	r4, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	f300 809f 	bgt.w	8008660 <_dtoa_r+0x900>
 8008522:	9b06      	ldr	r3, [sp, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f040 8097 	bne.w	8008658 <_dtoa_r+0x8f8>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 8093 	bne.w	800865c <_dtoa_r+0x8fc>
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800853c:	0d1b      	lsrs	r3, r3, #20
 800853e:	051b      	lsls	r3, r3, #20
 8008540:	b133      	cbz	r3, 8008550 <_dtoa_r+0x7f0>
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	3301      	adds	r3, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800854a:	3301      	adds	r3, #1
 800854c:	9309      	str	r3, [sp, #36]	@ 0x24
 800854e:	2301      	movs	r3, #1
 8008550:	930a      	str	r3, [sp, #40]	@ 0x28
 8008552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 81b8 	beq.w	80088ca <_dtoa_r+0xb6a>
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008560:	6918      	ldr	r0, [r3, #16]
 8008562:	f000 fac1 	bl	8008ae8 <__hi0bits>
 8008566:	f1c0 0020 	rsb	r0, r0, #32
 800856a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856c:	4418      	add	r0, r3
 800856e:	f010 001f 	ands.w	r0, r0, #31
 8008572:	f000 8082 	beq.w	800867a <_dtoa_r+0x91a>
 8008576:	f1c0 0320 	rsb	r3, r0, #32
 800857a:	2b04      	cmp	r3, #4
 800857c:	dd73      	ble.n	8008666 <_dtoa_r+0x906>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	f1c0 001c 	rsb	r0, r0, #28
 8008584:	4403      	add	r3, r0
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	4406      	add	r6, r0
 800858c:	4403      	add	r3, r0
 800858e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	dd05      	ble.n	80085a2 <_dtoa_r+0x842>
 8008596:	461a      	mov	r2, r3
 8008598:	4648      	mov	r0, r9
 800859a:	9903      	ldr	r1, [sp, #12]
 800859c:	f000 fc02 	bl	8008da4 <__lshift>
 80085a0:	9003      	str	r0, [sp, #12]
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd05      	ble.n	80085b4 <_dtoa_r+0x854>
 80085a8:	4621      	mov	r1, r4
 80085aa:	461a      	mov	r2, r3
 80085ac:	4648      	mov	r0, r9
 80085ae:	f000 fbf9 	bl	8008da4 <__lshift>
 80085b2:	4604      	mov	r4, r0
 80085b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d061      	beq.n	800867e <_dtoa_r+0x91e>
 80085ba:	4621      	mov	r1, r4
 80085bc:	9803      	ldr	r0, [sp, #12]
 80085be:	f000 fc5d 	bl	8008e7c <__mcmp>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	da5b      	bge.n	800867e <_dtoa_r+0x91e>
 80085c6:	2300      	movs	r3, #0
 80085c8:	220a      	movs	r2, #10
 80085ca:	4648      	mov	r0, r9
 80085cc:	9903      	ldr	r1, [sp, #12]
 80085ce:	f000 fa45 	bl	8008a5c <__multadd>
 80085d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80085d8:	9003      	str	r0, [sp, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8177 	beq.w	80088ce <_dtoa_r+0xb6e>
 80085e0:	4629      	mov	r1, r5
 80085e2:	2300      	movs	r3, #0
 80085e4:	220a      	movs	r2, #10
 80085e6:	4648      	mov	r0, r9
 80085e8:	f000 fa38 	bl	8008a5c <__multadd>
 80085ec:	f1bb 0f00 	cmp.w	fp, #0
 80085f0:	4605      	mov	r5, r0
 80085f2:	dc6f      	bgt.n	80086d4 <_dtoa_r+0x974>
 80085f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	dc49      	bgt.n	800868e <_dtoa_r+0x92e>
 80085fa:	e06b      	b.n	80086d4 <_dtoa_r+0x974>
 80085fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80085fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008602:	e73c      	b.n	800847e <_dtoa_r+0x71e>
 8008604:	3fe00000 	.word	0x3fe00000
 8008608:	40240000 	.word	0x40240000
 800860c:	9b08      	ldr	r3, [sp, #32]
 800860e:	1e5c      	subs	r4, r3, #1
 8008610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008612:	42a3      	cmp	r3, r4
 8008614:	db09      	blt.n	800862a <_dtoa_r+0x8ca>
 8008616:	1b1c      	subs	r4, r3, r4
 8008618:	9b08      	ldr	r3, [sp, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f6bf af30 	bge.w	8008480 <_dtoa_r+0x720>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	9a08      	ldr	r2, [sp, #32]
 8008624:	1a9e      	subs	r6, r3, r2
 8008626:	2300      	movs	r3, #0
 8008628:	e72b      	b.n	8008482 <_dtoa_r+0x722>
 800862a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800862e:	1ae3      	subs	r3, r4, r3
 8008630:	441a      	add	r2, r3
 8008632:	940a      	str	r4, [sp, #40]	@ 0x28
 8008634:	9e04      	ldr	r6, [sp, #16]
 8008636:	2400      	movs	r4, #0
 8008638:	9b08      	ldr	r3, [sp, #32]
 800863a:	920e      	str	r2, [sp, #56]	@ 0x38
 800863c:	e721      	b.n	8008482 <_dtoa_r+0x722>
 800863e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008640:	9e04      	ldr	r6, [sp, #16]
 8008642:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008644:	e728      	b.n	8008498 <_dtoa_r+0x738>
 8008646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800864a:	e751      	b.n	80084f0 <_dtoa_r+0x790>
 800864c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800864e:	9903      	ldr	r1, [sp, #12]
 8008650:	e750      	b.n	80084f4 <_dtoa_r+0x794>
 8008652:	f8cd 800c 	str.w	r8, [sp, #12]
 8008656:	e751      	b.n	80084fc <_dtoa_r+0x79c>
 8008658:	2300      	movs	r3, #0
 800865a:	e779      	b.n	8008550 <_dtoa_r+0x7f0>
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	e777      	b.n	8008550 <_dtoa_r+0x7f0>
 8008660:	2300      	movs	r3, #0
 8008662:	930a      	str	r3, [sp, #40]	@ 0x28
 8008664:	e779      	b.n	800855a <_dtoa_r+0x7fa>
 8008666:	d093      	beq.n	8008590 <_dtoa_r+0x830>
 8008668:	9a04      	ldr	r2, [sp, #16]
 800866a:	331c      	adds	r3, #28
 800866c:	441a      	add	r2, r3
 800866e:	9204      	str	r2, [sp, #16]
 8008670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008672:	441e      	add	r6, r3
 8008674:	441a      	add	r2, r3
 8008676:	9209      	str	r2, [sp, #36]	@ 0x24
 8008678:	e78a      	b.n	8008590 <_dtoa_r+0x830>
 800867a:	4603      	mov	r3, r0
 800867c:	e7f4      	b.n	8008668 <_dtoa_r+0x908>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	46b8      	mov	r8, r7
 8008682:	2b00      	cmp	r3, #0
 8008684:	dc20      	bgt.n	80086c8 <_dtoa_r+0x968>
 8008686:	469b      	mov	fp, r3
 8008688:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800868a:	2b02      	cmp	r3, #2
 800868c:	dd1e      	ble.n	80086cc <_dtoa_r+0x96c>
 800868e:	f1bb 0f00 	cmp.w	fp, #0
 8008692:	f47f adb1 	bne.w	80081f8 <_dtoa_r+0x498>
 8008696:	4621      	mov	r1, r4
 8008698:	465b      	mov	r3, fp
 800869a:	2205      	movs	r2, #5
 800869c:	4648      	mov	r0, r9
 800869e:	f000 f9dd 	bl	8008a5c <__multadd>
 80086a2:	4601      	mov	r1, r0
 80086a4:	4604      	mov	r4, r0
 80086a6:	9803      	ldr	r0, [sp, #12]
 80086a8:	f000 fbe8 	bl	8008e7c <__mcmp>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f77f ada3 	ble.w	80081f8 <_dtoa_r+0x498>
 80086b2:	4656      	mov	r6, sl
 80086b4:	2331      	movs	r3, #49	@ 0x31
 80086b6:	f108 0801 	add.w	r8, r8, #1
 80086ba:	f806 3b01 	strb.w	r3, [r6], #1
 80086be:	e59f      	b.n	8008200 <_dtoa_r+0x4a0>
 80086c0:	46b8      	mov	r8, r7
 80086c2:	9c08      	ldr	r4, [sp, #32]
 80086c4:	4625      	mov	r5, r4
 80086c6:	e7f4      	b.n	80086b2 <_dtoa_r+0x952>
 80086c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80086cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 8101 	beq.w	80088d6 <_dtoa_r+0xb76>
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	dd05      	ble.n	80086e4 <_dtoa_r+0x984>
 80086d8:	4629      	mov	r1, r5
 80086da:	4632      	mov	r2, r6
 80086dc:	4648      	mov	r0, r9
 80086de:	f000 fb61 	bl	8008da4 <__lshift>
 80086e2:	4605      	mov	r5, r0
 80086e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d05c      	beq.n	80087a4 <_dtoa_r+0xa44>
 80086ea:	4648      	mov	r0, r9
 80086ec:	6869      	ldr	r1, [r5, #4]
 80086ee:	f000 f953 	bl	8008998 <_Balloc>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b928      	cbnz	r0, 8008702 <_dtoa_r+0x9a2>
 80086f6:	4602      	mov	r2, r0
 80086f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80086fc:	4b80      	ldr	r3, [pc, #512]	@ (8008900 <_dtoa_r+0xba0>)
 80086fe:	f7ff bb43 	b.w	8007d88 <_dtoa_r+0x28>
 8008702:	692a      	ldr	r2, [r5, #16]
 8008704:	f105 010c 	add.w	r1, r5, #12
 8008708:	3202      	adds	r2, #2
 800870a:	0092      	lsls	r2, r2, #2
 800870c:	300c      	adds	r0, #12
 800870e:	f000 fed7 	bl	80094c0 <memcpy>
 8008712:	2201      	movs	r2, #1
 8008714:	4631      	mov	r1, r6
 8008716:	4648      	mov	r0, r9
 8008718:	f000 fb44 	bl	8008da4 <__lshift>
 800871c:	462f      	mov	r7, r5
 800871e:	4605      	mov	r5, r0
 8008720:	f10a 0301 	add.w	r3, sl, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	eb0a 030b 	add.w	r3, sl, fp
 800872a:	930a      	str	r3, [sp, #40]	@ 0x28
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	9309      	str	r3, [sp, #36]	@ 0x24
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	4621      	mov	r1, r4
 8008738:	9803      	ldr	r0, [sp, #12]
 800873a:	f103 3bff 	add.w	fp, r3, #4294967295
 800873e:	f7ff fa86 	bl	8007c4e <quorem>
 8008742:	4603      	mov	r3, r0
 8008744:	4639      	mov	r1, r7
 8008746:	3330      	adds	r3, #48	@ 0x30
 8008748:	9006      	str	r0, [sp, #24]
 800874a:	9803      	ldr	r0, [sp, #12]
 800874c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874e:	f000 fb95 	bl	8008e7c <__mcmp>
 8008752:	462a      	mov	r2, r5
 8008754:	9008      	str	r0, [sp, #32]
 8008756:	4621      	mov	r1, r4
 8008758:	4648      	mov	r0, r9
 800875a:	f000 fbab 	bl	8008eb4 <__mdiff>
 800875e:	68c2      	ldr	r2, [r0, #12]
 8008760:	4606      	mov	r6, r0
 8008762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008764:	bb02      	cbnz	r2, 80087a8 <_dtoa_r+0xa48>
 8008766:	4601      	mov	r1, r0
 8008768:	9803      	ldr	r0, [sp, #12]
 800876a:	f000 fb87 	bl	8008e7c <__mcmp>
 800876e:	4602      	mov	r2, r0
 8008770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008772:	4631      	mov	r1, r6
 8008774:	4648      	mov	r0, r9
 8008776:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800877a:	f000 f94d 	bl	8008a18 <_Bfree>
 800877e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008780:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008782:	9e04      	ldr	r6, [sp, #16]
 8008784:	ea42 0103 	orr.w	r1, r2, r3
 8008788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800878a:	4319      	orrs	r1, r3
 800878c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800878e:	d10d      	bne.n	80087ac <_dtoa_r+0xa4c>
 8008790:	2b39      	cmp	r3, #57	@ 0x39
 8008792:	d027      	beq.n	80087e4 <_dtoa_r+0xa84>
 8008794:	9a08      	ldr	r2, [sp, #32]
 8008796:	2a00      	cmp	r2, #0
 8008798:	dd01      	ble.n	800879e <_dtoa_r+0xa3e>
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	3331      	adds	r3, #49	@ 0x31
 800879e:	f88b 3000 	strb.w	r3, [fp]
 80087a2:	e52e      	b.n	8008202 <_dtoa_r+0x4a2>
 80087a4:	4628      	mov	r0, r5
 80087a6:	e7b9      	b.n	800871c <_dtoa_r+0x9bc>
 80087a8:	2201      	movs	r2, #1
 80087aa:	e7e2      	b.n	8008772 <_dtoa_r+0xa12>
 80087ac:	9908      	ldr	r1, [sp, #32]
 80087ae:	2900      	cmp	r1, #0
 80087b0:	db04      	blt.n	80087bc <_dtoa_r+0xa5c>
 80087b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80087b4:	4301      	orrs	r1, r0
 80087b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087b8:	4301      	orrs	r1, r0
 80087ba:	d120      	bne.n	80087fe <_dtoa_r+0xa9e>
 80087bc:	2a00      	cmp	r2, #0
 80087be:	ddee      	ble.n	800879e <_dtoa_r+0xa3e>
 80087c0:	2201      	movs	r2, #1
 80087c2:	9903      	ldr	r1, [sp, #12]
 80087c4:	4648      	mov	r0, r9
 80087c6:	9304      	str	r3, [sp, #16]
 80087c8:	f000 faec 	bl	8008da4 <__lshift>
 80087cc:	4621      	mov	r1, r4
 80087ce:	9003      	str	r0, [sp, #12]
 80087d0:	f000 fb54 	bl	8008e7c <__mcmp>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	9b04      	ldr	r3, [sp, #16]
 80087d8:	dc02      	bgt.n	80087e0 <_dtoa_r+0xa80>
 80087da:	d1e0      	bne.n	800879e <_dtoa_r+0xa3e>
 80087dc:	07da      	lsls	r2, r3, #31
 80087de:	d5de      	bpl.n	800879e <_dtoa_r+0xa3e>
 80087e0:	2b39      	cmp	r3, #57	@ 0x39
 80087e2:	d1da      	bne.n	800879a <_dtoa_r+0xa3a>
 80087e4:	2339      	movs	r3, #57	@ 0x39
 80087e6:	f88b 3000 	strb.w	r3, [fp]
 80087ea:	4633      	mov	r3, r6
 80087ec:	461e      	mov	r6, r3
 80087ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2a39      	cmp	r2, #57	@ 0x39
 80087f6:	d04e      	beq.n	8008896 <_dtoa_r+0xb36>
 80087f8:	3201      	adds	r2, #1
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	e501      	b.n	8008202 <_dtoa_r+0x4a2>
 80087fe:	2a00      	cmp	r2, #0
 8008800:	dd03      	ble.n	800880a <_dtoa_r+0xaaa>
 8008802:	2b39      	cmp	r3, #57	@ 0x39
 8008804:	d0ee      	beq.n	80087e4 <_dtoa_r+0xa84>
 8008806:	3301      	adds	r3, #1
 8008808:	e7c9      	b.n	800879e <_dtoa_r+0xa3e>
 800880a:	9a04      	ldr	r2, [sp, #16]
 800880c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800880e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008812:	428a      	cmp	r2, r1
 8008814:	d028      	beq.n	8008868 <_dtoa_r+0xb08>
 8008816:	2300      	movs	r3, #0
 8008818:	220a      	movs	r2, #10
 800881a:	9903      	ldr	r1, [sp, #12]
 800881c:	4648      	mov	r0, r9
 800881e:	f000 f91d 	bl	8008a5c <__multadd>
 8008822:	42af      	cmp	r7, r5
 8008824:	9003      	str	r0, [sp, #12]
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	f04f 020a 	mov.w	r2, #10
 800882e:	4639      	mov	r1, r7
 8008830:	4648      	mov	r0, r9
 8008832:	d107      	bne.n	8008844 <_dtoa_r+0xae4>
 8008834:	f000 f912 	bl	8008a5c <__multadd>
 8008838:	4607      	mov	r7, r0
 800883a:	4605      	mov	r5, r0
 800883c:	9b04      	ldr	r3, [sp, #16]
 800883e:	3301      	adds	r3, #1
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	e777      	b.n	8008734 <_dtoa_r+0x9d4>
 8008844:	f000 f90a 	bl	8008a5c <__multadd>
 8008848:	4629      	mov	r1, r5
 800884a:	4607      	mov	r7, r0
 800884c:	2300      	movs	r3, #0
 800884e:	220a      	movs	r2, #10
 8008850:	4648      	mov	r0, r9
 8008852:	f000 f903 	bl	8008a5c <__multadd>
 8008856:	4605      	mov	r5, r0
 8008858:	e7f0      	b.n	800883c <_dtoa_r+0xadc>
 800885a:	f1bb 0f00 	cmp.w	fp, #0
 800885e:	bfcc      	ite	gt
 8008860:	465e      	movgt	r6, fp
 8008862:	2601      	movle	r6, #1
 8008864:	2700      	movs	r7, #0
 8008866:	4456      	add	r6, sl
 8008868:	2201      	movs	r2, #1
 800886a:	9903      	ldr	r1, [sp, #12]
 800886c:	4648      	mov	r0, r9
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	f000 fa98 	bl	8008da4 <__lshift>
 8008874:	4621      	mov	r1, r4
 8008876:	9003      	str	r0, [sp, #12]
 8008878:	f000 fb00 	bl	8008e7c <__mcmp>
 800887c:	2800      	cmp	r0, #0
 800887e:	dcb4      	bgt.n	80087ea <_dtoa_r+0xa8a>
 8008880:	d102      	bne.n	8008888 <_dtoa_r+0xb28>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	07db      	lsls	r3, r3, #31
 8008886:	d4b0      	bmi.n	80087ea <_dtoa_r+0xa8a>
 8008888:	4633      	mov	r3, r6
 800888a:	461e      	mov	r6, r3
 800888c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008890:	2a30      	cmp	r2, #48	@ 0x30
 8008892:	d0fa      	beq.n	800888a <_dtoa_r+0xb2a>
 8008894:	e4b5      	b.n	8008202 <_dtoa_r+0x4a2>
 8008896:	459a      	cmp	sl, r3
 8008898:	d1a8      	bne.n	80087ec <_dtoa_r+0xa8c>
 800889a:	2331      	movs	r3, #49	@ 0x31
 800889c:	f108 0801 	add.w	r8, r8, #1
 80088a0:	f88a 3000 	strb.w	r3, [sl]
 80088a4:	e4ad      	b.n	8008202 <_dtoa_r+0x4a2>
 80088a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008904 <_dtoa_r+0xba4>
 80088ac:	b11b      	cbz	r3, 80088b6 <_dtoa_r+0xb56>
 80088ae:	f10a 0308 	add.w	r3, sl, #8
 80088b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	4650      	mov	r0, sl
 80088b8:	b017      	add	sp, #92	@ 0x5c
 80088ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	f77f ae2e 	ble.w	8008522 <_dtoa_r+0x7c2>
 80088c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ca:	2001      	movs	r0, #1
 80088cc:	e64d      	b.n	800856a <_dtoa_r+0x80a>
 80088ce:	f1bb 0f00 	cmp.w	fp, #0
 80088d2:	f77f aed9 	ble.w	8008688 <_dtoa_r+0x928>
 80088d6:	4656      	mov	r6, sl
 80088d8:	4621      	mov	r1, r4
 80088da:	9803      	ldr	r0, [sp, #12]
 80088dc:	f7ff f9b7 	bl	8007c4e <quorem>
 80088e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80088e4:	f806 3b01 	strb.w	r3, [r6], #1
 80088e8:	eba6 020a 	sub.w	r2, r6, sl
 80088ec:	4593      	cmp	fp, r2
 80088ee:	ddb4      	ble.n	800885a <_dtoa_r+0xafa>
 80088f0:	2300      	movs	r3, #0
 80088f2:	220a      	movs	r2, #10
 80088f4:	4648      	mov	r0, r9
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	f000 f8b0 	bl	8008a5c <__multadd>
 80088fc:	9003      	str	r0, [sp, #12]
 80088fe:	e7eb      	b.n	80088d8 <_dtoa_r+0xb78>
 8008900:	0800a3c4 	.word	0x0800a3c4
 8008904:	0800a348 	.word	0x0800a348

08008908 <_free_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4605      	mov	r5, r0
 800890c:	2900      	cmp	r1, #0
 800890e:	d040      	beq.n	8008992 <_free_r+0x8a>
 8008910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008914:	1f0c      	subs	r4, r1, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfb8      	it	lt
 800891a:	18e4      	addlt	r4, r4, r3
 800891c:	f7fe fb1c 	bl	8006f58 <__malloc_lock>
 8008920:	4a1c      	ldr	r2, [pc, #112]	@ (8008994 <_free_r+0x8c>)
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	b933      	cbnz	r3, 8008934 <_free_r+0x2c>
 8008926:	6063      	str	r3, [r4, #4]
 8008928:	6014      	str	r4, [r2, #0]
 800892a:	4628      	mov	r0, r5
 800892c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008930:	f7fe bb18 	b.w	8006f64 <__malloc_unlock>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d908      	bls.n	800894a <_free_r+0x42>
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	1821      	adds	r1, r4, r0
 800893c:	428b      	cmp	r3, r1
 800893e:	bf01      	itttt	eq
 8008940:	6819      	ldreq	r1, [r3, #0]
 8008942:	685b      	ldreq	r3, [r3, #4]
 8008944:	1809      	addeq	r1, r1, r0
 8008946:	6021      	streq	r1, [r4, #0]
 8008948:	e7ed      	b.n	8008926 <_free_r+0x1e>
 800894a:	461a      	mov	r2, r3
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b10b      	cbz	r3, 8008954 <_free_r+0x4c>
 8008950:	42a3      	cmp	r3, r4
 8008952:	d9fa      	bls.n	800894a <_free_r+0x42>
 8008954:	6811      	ldr	r1, [r2, #0]
 8008956:	1850      	adds	r0, r2, r1
 8008958:	42a0      	cmp	r0, r4
 800895a:	d10b      	bne.n	8008974 <_free_r+0x6c>
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	4401      	add	r1, r0
 8008960:	1850      	adds	r0, r2, r1
 8008962:	4283      	cmp	r3, r0
 8008964:	6011      	str	r1, [r2, #0]
 8008966:	d1e0      	bne.n	800892a <_free_r+0x22>
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4408      	add	r0, r1
 800896e:	6010      	str	r0, [r2, #0]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	e7da      	b.n	800892a <_free_r+0x22>
 8008974:	d902      	bls.n	800897c <_free_r+0x74>
 8008976:	230c      	movs	r3, #12
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	e7d6      	b.n	800892a <_free_r+0x22>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	1821      	adds	r1, r4, r0
 8008980:	428b      	cmp	r3, r1
 8008982:	bf01      	itttt	eq
 8008984:	6819      	ldreq	r1, [r3, #0]
 8008986:	685b      	ldreq	r3, [r3, #4]
 8008988:	1809      	addeq	r1, r1, r0
 800898a:	6021      	streq	r1, [r4, #0]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	6054      	str	r4, [r2, #4]
 8008990:	e7cb      	b.n	800892a <_free_r+0x22>
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20001984 	.word	0x20001984

08008998 <_Balloc>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	69c6      	ldr	r6, [r0, #28]
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	b976      	cbnz	r6, 80089c0 <_Balloc+0x28>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f7fe fa26 	bl	8006df4 <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	61e0      	str	r0, [r4, #28]
 80089ac:	b920      	cbnz	r0, 80089b8 <_Balloc+0x20>
 80089ae:	216b      	movs	r1, #107	@ 0x6b
 80089b0:	4b17      	ldr	r3, [pc, #92]	@ (8008a10 <_Balloc+0x78>)
 80089b2:	4818      	ldr	r0, [pc, #96]	@ (8008a14 <_Balloc+0x7c>)
 80089b4:	f000 fd92 	bl	80094dc <__assert_func>
 80089b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089bc:	6006      	str	r6, [r0, #0]
 80089be:	60c6      	str	r6, [r0, #12]
 80089c0:	69e6      	ldr	r6, [r4, #28]
 80089c2:	68f3      	ldr	r3, [r6, #12]
 80089c4:	b183      	cbz	r3, 80089e8 <_Balloc+0x50>
 80089c6:	69e3      	ldr	r3, [r4, #28]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089ce:	b9b8      	cbnz	r0, 8008a00 <_Balloc+0x68>
 80089d0:	2101      	movs	r1, #1
 80089d2:	fa01 f605 	lsl.w	r6, r1, r5
 80089d6:	1d72      	adds	r2, r6, #5
 80089d8:	4620      	mov	r0, r4
 80089da:	0092      	lsls	r2, r2, #2
 80089dc:	f000 fd9c 	bl	8009518 <_calloc_r>
 80089e0:	b160      	cbz	r0, 80089fc <_Balloc+0x64>
 80089e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089e6:	e00e      	b.n	8008a06 <_Balloc+0x6e>
 80089e8:	2221      	movs	r2, #33	@ 0x21
 80089ea:	2104      	movs	r1, #4
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fd93 	bl	8009518 <_calloc_r>
 80089f2:	69e3      	ldr	r3, [r4, #28]
 80089f4:	60f0      	str	r0, [r6, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e4      	bne.n	80089c6 <_Balloc+0x2e>
 80089fc:	2000      	movs	r0, #0
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	6802      	ldr	r2, [r0, #0]
 8008a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a06:	2300      	movs	r3, #0
 8008a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a0c:	e7f7      	b.n	80089fe <_Balloc+0x66>
 8008a0e:	bf00      	nop
 8008a10:	0800a355 	.word	0x0800a355
 8008a14:	0800a3d5 	.word	0x0800a3d5

08008a18 <_Bfree>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	69c6      	ldr	r6, [r0, #28]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b976      	cbnz	r6, 8008a40 <_Bfree+0x28>
 8008a22:	2010      	movs	r0, #16
 8008a24:	f7fe f9e6 	bl	8006df4 <malloc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	61e8      	str	r0, [r5, #28]
 8008a2c:	b920      	cbnz	r0, 8008a38 <_Bfree+0x20>
 8008a2e:	218f      	movs	r1, #143	@ 0x8f
 8008a30:	4b08      	ldr	r3, [pc, #32]	@ (8008a54 <_Bfree+0x3c>)
 8008a32:	4809      	ldr	r0, [pc, #36]	@ (8008a58 <_Bfree+0x40>)
 8008a34:	f000 fd52 	bl	80094dc <__assert_func>
 8008a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a3c:	6006      	str	r6, [r0, #0]
 8008a3e:	60c6      	str	r6, [r0, #12]
 8008a40:	b13c      	cbz	r4, 8008a52 <_Bfree+0x3a>
 8008a42:	69eb      	ldr	r3, [r5, #28]
 8008a44:	6862      	ldr	r2, [r4, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a4c:	6021      	str	r1, [r4, #0]
 8008a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	0800a355 	.word	0x0800a355
 8008a58:	0800a3d5 	.word	0x0800a3d5

08008a5c <__multadd>:
 8008a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	4607      	mov	r7, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	461e      	mov	r6, r3
 8008a66:	2000      	movs	r0, #0
 8008a68:	690d      	ldr	r5, [r1, #16]
 8008a6a:	f101 0c14 	add.w	ip, r1, #20
 8008a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a72:	3001      	adds	r0, #1
 8008a74:	b299      	uxth	r1, r3
 8008a76:	fb02 6101 	mla	r1, r2, r1, r6
 8008a7a:	0c1e      	lsrs	r6, r3, #16
 8008a7c:	0c0b      	lsrs	r3, r1, #16
 8008a7e:	fb02 3306 	mla	r3, r2, r6, r3
 8008a82:	b289      	uxth	r1, r1
 8008a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a88:	4285      	cmp	r5, r0
 8008a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8008a92:	dcec      	bgt.n	8008a6e <__multadd+0x12>
 8008a94:	b30e      	cbz	r6, 8008ada <__multadd+0x7e>
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dc19      	bgt.n	8008ad0 <__multadd+0x74>
 8008a9c:	6861      	ldr	r1, [r4, #4]
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	f7ff ff79 	bl	8008998 <_Balloc>
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <__multadd+0x5a>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	21ba      	movs	r1, #186	@ 0xba
 8008aae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <__multadd+0x84>)
 8008ab0:	480c      	ldr	r0, [pc, #48]	@ (8008ae4 <__multadd+0x88>)
 8008ab2:	f000 fd13 	bl	80094dc <__assert_func>
 8008ab6:	6922      	ldr	r2, [r4, #16]
 8008ab8:	f104 010c 	add.w	r1, r4, #12
 8008abc:	3202      	adds	r2, #2
 8008abe:	0092      	lsls	r2, r2, #2
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	f000 fcfd 	bl	80094c0 <memcpy>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff ffa5 	bl	8008a18 <_Bfree>
 8008ace:	4644      	mov	r4, r8
 8008ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	615e      	str	r6, [r3, #20]
 8008ad8:	6125      	str	r5, [r4, #16]
 8008ada:	4620      	mov	r0, r4
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	0800a3c4 	.word	0x0800a3c4
 8008ae4:	0800a3d5 	.word	0x0800a3d5

08008ae8 <__hi0bits>:
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008aee:	bf3a      	itte	cc
 8008af0:	0403      	lslcc	r3, r0, #16
 8008af2:	2010      	movcc	r0, #16
 8008af4:	2000      	movcs	r0, #0
 8008af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008afa:	bf3c      	itt	cc
 8008afc:	021b      	lslcc	r3, r3, #8
 8008afe:	3008      	addcc	r0, #8
 8008b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b04:	bf3c      	itt	cc
 8008b06:	011b      	lslcc	r3, r3, #4
 8008b08:	3004      	addcc	r0, #4
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0e:	bf3c      	itt	cc
 8008b10:	009b      	lslcc	r3, r3, #2
 8008b12:	3002      	addcc	r0, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	db05      	blt.n	8008b24 <__hi0bits+0x3c>
 8008b18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b1c:	f100 0001 	add.w	r0, r0, #1
 8008b20:	bf08      	it	eq
 8008b22:	2020      	moveq	r0, #32
 8008b24:	4770      	bx	lr

08008b26 <__lo0bits>:
 8008b26:	6803      	ldr	r3, [r0, #0]
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f013 0007 	ands.w	r0, r3, #7
 8008b2e:	d00b      	beq.n	8008b48 <__lo0bits+0x22>
 8008b30:	07d9      	lsls	r1, r3, #31
 8008b32:	d421      	bmi.n	8008b78 <__lo0bits+0x52>
 8008b34:	0798      	lsls	r0, r3, #30
 8008b36:	bf49      	itett	mi
 8008b38:	085b      	lsrmi	r3, r3, #1
 8008b3a:	089b      	lsrpl	r3, r3, #2
 8008b3c:	2001      	movmi	r0, #1
 8008b3e:	6013      	strmi	r3, [r2, #0]
 8008b40:	bf5c      	itt	pl
 8008b42:	2002      	movpl	r0, #2
 8008b44:	6013      	strpl	r3, [r2, #0]
 8008b46:	4770      	bx	lr
 8008b48:	b299      	uxth	r1, r3
 8008b4a:	b909      	cbnz	r1, 8008b50 <__lo0bits+0x2a>
 8008b4c:	2010      	movs	r0, #16
 8008b4e:	0c1b      	lsrs	r3, r3, #16
 8008b50:	b2d9      	uxtb	r1, r3
 8008b52:	b909      	cbnz	r1, 8008b58 <__lo0bits+0x32>
 8008b54:	3008      	adds	r0, #8
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	0719      	lsls	r1, r3, #28
 8008b5a:	bf04      	itt	eq
 8008b5c:	091b      	lsreq	r3, r3, #4
 8008b5e:	3004      	addeq	r0, #4
 8008b60:	0799      	lsls	r1, r3, #30
 8008b62:	bf04      	itt	eq
 8008b64:	089b      	lsreq	r3, r3, #2
 8008b66:	3002      	addeq	r0, #2
 8008b68:	07d9      	lsls	r1, r3, #31
 8008b6a:	d403      	bmi.n	8008b74 <__lo0bits+0x4e>
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	f100 0001 	add.w	r0, r0, #1
 8008b72:	d003      	beq.n	8008b7c <__lo0bits+0x56>
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4770      	bx	lr
 8008b78:	2000      	movs	r0, #0
 8008b7a:	4770      	bx	lr
 8008b7c:	2020      	movs	r0, #32
 8008b7e:	4770      	bx	lr

08008b80 <__i2b>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	2101      	movs	r1, #1
 8008b86:	f7ff ff07 	bl	8008998 <_Balloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	b928      	cbnz	r0, 8008b9a <__i2b+0x1a>
 8008b8e:	f240 1145 	movw	r1, #325	@ 0x145
 8008b92:	4b04      	ldr	r3, [pc, #16]	@ (8008ba4 <__i2b+0x24>)
 8008b94:	4804      	ldr	r0, [pc, #16]	@ (8008ba8 <__i2b+0x28>)
 8008b96:	f000 fca1 	bl	80094dc <__assert_func>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	6144      	str	r4, [r0, #20]
 8008b9e:	6103      	str	r3, [r0, #16]
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop
 8008ba4:	0800a3c4 	.word	0x0800a3c4
 8008ba8:	0800a3d5 	.word	0x0800a3d5

08008bac <__multiply>:
 8008bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4617      	mov	r7, r2
 8008bb2:	690a      	ldr	r2, [r1, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bfa2      	ittt	ge
 8008bbc:	463b      	movge	r3, r7
 8008bbe:	460f      	movge	r7, r1
 8008bc0:	4699      	movge	r9, r3
 8008bc2:	693d      	ldr	r5, [r7, #16]
 8008bc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	eb05 060a 	add.w	r6, r5, sl
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	bfb8      	it	lt
 8008bd6:	3101      	addlt	r1, #1
 8008bd8:	f7ff fede 	bl	8008998 <_Balloc>
 8008bdc:	b930      	cbnz	r0, 8008bec <__multiply+0x40>
 8008bde:	4602      	mov	r2, r0
 8008be0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008be4:	4b40      	ldr	r3, [pc, #256]	@ (8008ce8 <__multiply+0x13c>)
 8008be6:	4841      	ldr	r0, [pc, #260]	@ (8008cec <__multiply+0x140>)
 8008be8:	f000 fc78 	bl	80094dc <__assert_func>
 8008bec:	f100 0414 	add.w	r4, r0, #20
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008bf8:	4573      	cmp	r3, lr
 8008bfa:	d320      	bcc.n	8008c3e <__multiply+0x92>
 8008bfc:	f107 0814 	add.w	r8, r7, #20
 8008c00:	f109 0114 	add.w	r1, r9, #20
 8008c04:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008c08:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	1beb      	subs	r3, r5, r7
 8008c10:	3b15      	subs	r3, #21
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	3304      	adds	r3, #4
 8008c18:	3715      	adds	r7, #21
 8008c1a:	42bd      	cmp	r5, r7
 8008c1c:	bf38      	it	cc
 8008c1e:	2304      	movcc	r3, #4
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	9103      	str	r1, [sp, #12]
 8008c26:	428b      	cmp	r3, r1
 8008c28:	d80c      	bhi.n	8008c44 <__multiply+0x98>
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	dd03      	ble.n	8008c36 <__multiply+0x8a>
 8008c2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d055      	beq.n	8008ce2 <__multiply+0x136>
 8008c36:	6106      	str	r6, [r0, #16]
 8008c38:	b005      	add	sp, #20
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	f843 2b04 	str.w	r2, [r3], #4
 8008c42:	e7d9      	b.n	8008bf8 <__multiply+0x4c>
 8008c44:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c48:	f1ba 0f00 	cmp.w	sl, #0
 8008c4c:	d01f      	beq.n	8008c8e <__multiply+0xe2>
 8008c4e:	46c4      	mov	ip, r8
 8008c50:	46a1      	mov	r9, r4
 8008c52:	2700      	movs	r7, #0
 8008c54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c58:	f8d9 3000 	ldr.w	r3, [r9]
 8008c5c:	fa1f fb82 	uxth.w	fp, r2
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c66:	443b      	add	r3, r7
 8008c68:	f8d9 7000 	ldr.w	r7, [r9]
 8008c6c:	0c12      	lsrs	r2, r2, #16
 8008c6e:	0c3f      	lsrs	r7, r7, #16
 8008c70:	fb0a 7202 	mla	r2, sl, r2, r7
 8008c74:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7e:	4565      	cmp	r5, ip
 8008c80:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008c84:	f849 3b04 	str.w	r3, [r9], #4
 8008c88:	d8e4      	bhi.n	8008c54 <__multiply+0xa8>
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	50e7      	str	r7, [r4, r3]
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	3104      	adds	r1, #4
 8008c92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	d020      	beq.n	8008cde <__multiply+0x132>
 8008c9c:	4647      	mov	r7, r8
 8008c9e:	46a4      	mov	ip, r4
 8008ca0:	f04f 0a00 	mov.w	sl, #0
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	f8b7 b000 	ldrh.w	fp, [r7]
 8008caa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008cb4:	4452      	add	r2, sl
 8008cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cba:	f84c 3b04 	str.w	r3, [ip], #4
 8008cbe:	f857 3b04 	ldr.w	r3, [r7], #4
 8008cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cc6:	f8bc 3000 	ldrh.w	r3, [ip]
 8008cca:	42bd      	cmp	r5, r7
 8008ccc:	fb09 330a 	mla	r3, r9, sl, r3
 8008cd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008cd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cd8:	d8e5      	bhi.n	8008ca6 <__multiply+0xfa>
 8008cda:	9a01      	ldr	r2, [sp, #4]
 8008cdc:	50a3      	str	r3, [r4, r2]
 8008cde:	3404      	adds	r4, #4
 8008ce0:	e79f      	b.n	8008c22 <__multiply+0x76>
 8008ce2:	3e01      	subs	r6, #1
 8008ce4:	e7a1      	b.n	8008c2a <__multiply+0x7e>
 8008ce6:	bf00      	nop
 8008ce8:	0800a3c4 	.word	0x0800a3c4
 8008cec:	0800a3d5 	.word	0x0800a3d5

08008cf0 <__pow5mult>:
 8008cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	f012 0203 	ands.w	r2, r2, #3
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	d007      	beq.n	8008d10 <__pow5mult+0x20>
 8008d00:	4c25      	ldr	r4, [pc, #148]	@ (8008d98 <__pow5mult+0xa8>)
 8008d02:	3a01      	subs	r2, #1
 8008d04:	2300      	movs	r3, #0
 8008d06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d0a:	f7ff fea7 	bl	8008a5c <__multadd>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	10ad      	asrs	r5, r5, #2
 8008d12:	d03d      	beq.n	8008d90 <__pow5mult+0xa0>
 8008d14:	69fc      	ldr	r4, [r7, #28]
 8008d16:	b97c      	cbnz	r4, 8008d38 <__pow5mult+0x48>
 8008d18:	2010      	movs	r0, #16
 8008d1a:	f7fe f86b 	bl	8006df4 <malloc>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	61f8      	str	r0, [r7, #28]
 8008d22:	b928      	cbnz	r0, 8008d30 <__pow5mult+0x40>
 8008d24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d28:	4b1c      	ldr	r3, [pc, #112]	@ (8008d9c <__pow5mult+0xac>)
 8008d2a:	481d      	ldr	r0, [pc, #116]	@ (8008da0 <__pow5mult+0xb0>)
 8008d2c:	f000 fbd6 	bl	80094dc <__assert_func>
 8008d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d34:	6004      	str	r4, [r0, #0]
 8008d36:	60c4      	str	r4, [r0, #12]
 8008d38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d40:	b94c      	cbnz	r4, 8008d56 <__pow5mult+0x66>
 8008d42:	f240 2171 	movw	r1, #625	@ 0x271
 8008d46:	4638      	mov	r0, r7
 8008d48:	f7ff ff1a 	bl	8008b80 <__i2b>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 0900 	mov.w	r9, #0
 8008d5a:	07eb      	lsls	r3, r5, #31
 8008d5c:	d50a      	bpl.n	8008d74 <__pow5mult+0x84>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4622      	mov	r2, r4
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7ff ff22 	bl	8008bac <__multiply>
 8008d68:	4680      	mov	r8, r0
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff fe53 	bl	8008a18 <_Bfree>
 8008d72:	4646      	mov	r6, r8
 8008d74:	106d      	asrs	r5, r5, #1
 8008d76:	d00b      	beq.n	8008d90 <__pow5mult+0xa0>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	b938      	cbnz	r0, 8008d8c <__pow5mult+0x9c>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7ff ff13 	bl	8008bac <__multiply>
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	f8c0 9000 	str.w	r9, [r0]
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	e7e4      	b.n	8008d5a <__pow5mult+0x6a>
 8008d90:	4630      	mov	r0, r6
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	bf00      	nop
 8008d98:	0800a488 	.word	0x0800a488
 8008d9c:	0800a355 	.word	0x0800a355
 8008da0:	0800a3d5 	.word	0x0800a3d5

08008da4 <__lshift>:
 8008da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	460c      	mov	r4, r1
 8008daa:	4607      	mov	r7, r0
 8008dac:	4691      	mov	r9, r2
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	6849      	ldr	r1, [r1, #4]
 8008db2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dbc:	f108 0601 	add.w	r6, r8, #1
 8008dc0:	42b3      	cmp	r3, r6
 8008dc2:	db0b      	blt.n	8008ddc <__lshift+0x38>
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff fde7 	bl	8008998 <_Balloc>
 8008dca:	4605      	mov	r5, r0
 8008dcc:	b948      	cbnz	r0, 8008de2 <__lshift+0x3e>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008dd4:	4b27      	ldr	r3, [pc, #156]	@ (8008e74 <__lshift+0xd0>)
 8008dd6:	4828      	ldr	r0, [pc, #160]	@ (8008e78 <__lshift+0xd4>)
 8008dd8:	f000 fb80 	bl	80094dc <__assert_func>
 8008ddc:	3101      	adds	r1, #1
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	e7ee      	b.n	8008dc0 <__lshift+0x1c>
 8008de2:	2300      	movs	r3, #0
 8008de4:	f100 0114 	add.w	r1, r0, #20
 8008de8:	f100 0210 	add.w	r2, r0, #16
 8008dec:	4618      	mov	r0, r3
 8008dee:	4553      	cmp	r3, sl
 8008df0:	db33      	blt.n	8008e5a <__lshift+0xb6>
 8008df2:	6920      	ldr	r0, [r4, #16]
 8008df4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008df8:	f104 0314 	add.w	r3, r4, #20
 8008dfc:	f019 091f 	ands.w	r9, r9, #31
 8008e00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e08:	d02b      	beq.n	8008e62 <__lshift+0xbe>
 8008e0a:	468a      	mov	sl, r1
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	fa00 f009 	lsl.w	r0, r0, r9
 8008e18:	4310      	orrs	r0, r2
 8008e1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e22:	459c      	cmp	ip, r3
 8008e24:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e28:	d8f3      	bhi.n	8008e12 <__lshift+0x6e>
 8008e2a:	ebac 0304 	sub.w	r3, ip, r4
 8008e2e:	3b15      	subs	r3, #21
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	f104 0015 	add.w	r0, r4, #21
 8008e3a:	4560      	cmp	r0, ip
 8008e3c:	bf88      	it	hi
 8008e3e:	2304      	movhi	r3, #4
 8008e40:	50ca      	str	r2, [r1, r3]
 8008e42:	b10a      	cbz	r2, 8008e48 <__lshift+0xa4>
 8008e44:	f108 0602 	add.w	r6, r8, #2
 8008e48:	3e01      	subs	r6, #1
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	612e      	str	r6, [r5, #16]
 8008e50:	f7ff fde2 	bl	8008a18 <_Bfree>
 8008e54:	4628      	mov	r0, r5
 8008e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e5e:	3301      	adds	r3, #1
 8008e60:	e7c5      	b.n	8008dee <__lshift+0x4a>
 8008e62:	3904      	subs	r1, #4
 8008e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e68:	459c      	cmp	ip, r3
 8008e6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e6e:	d8f9      	bhi.n	8008e64 <__lshift+0xc0>
 8008e70:	e7ea      	b.n	8008e48 <__lshift+0xa4>
 8008e72:	bf00      	nop
 8008e74:	0800a3c4 	.word	0x0800a3c4
 8008e78:	0800a3d5 	.word	0x0800a3d5

08008e7c <__mcmp>:
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	690a      	ldr	r2, [r1, #16]
 8008e80:	6900      	ldr	r0, [r0, #16]
 8008e82:	b530      	push	{r4, r5, lr}
 8008e84:	1a80      	subs	r0, r0, r2
 8008e86:	d10e      	bne.n	8008ea6 <__mcmp+0x2a>
 8008e88:	3314      	adds	r3, #20
 8008e8a:	3114      	adds	r1, #20
 8008e8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e9c:	4295      	cmp	r5, r2
 8008e9e:	d003      	beq.n	8008ea8 <__mcmp+0x2c>
 8008ea0:	d205      	bcs.n	8008eae <__mcmp+0x32>
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	bd30      	pop	{r4, r5, pc}
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d3f3      	bcc.n	8008e94 <__mcmp+0x18>
 8008eac:	e7fb      	b.n	8008ea6 <__mcmp+0x2a>
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e7f9      	b.n	8008ea6 <__mcmp+0x2a>
	...

08008eb4 <__mdiff>:
 8008eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	4689      	mov	r9, r1
 8008eba:	4606      	mov	r6, r0
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4648      	mov	r0, r9
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	f7ff ffdb 	bl	8008e7c <__mcmp>
 8008ec6:	1e05      	subs	r5, r0, #0
 8008ec8:	d112      	bne.n	8008ef0 <__mdiff+0x3c>
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff fd63 	bl	8008998 <_Balloc>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <__mdiff+0x2e>
 8008ed6:	f240 2137 	movw	r1, #567	@ 0x237
 8008eda:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd4 <__mdiff+0x120>)
 8008edc:	483e      	ldr	r0, [pc, #248]	@ (8008fd8 <__mdiff+0x124>)
 8008ede:	f000 fafd 	bl	80094dc <__assert_func>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ee8:	4610      	mov	r0, r2
 8008eea:	b003      	add	sp, #12
 8008eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef0:	bfbc      	itt	lt
 8008ef2:	464b      	movlt	r3, r9
 8008ef4:	46a1      	movlt	r9, r4
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008efc:	bfba      	itte	lt
 8008efe:	461c      	movlt	r4, r3
 8008f00:	2501      	movlt	r5, #1
 8008f02:	2500      	movge	r5, #0
 8008f04:	f7ff fd48 	bl	8008998 <_Balloc>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	b918      	cbnz	r0, 8008f14 <__mdiff+0x60>
 8008f0c:	f240 2145 	movw	r1, #581	@ 0x245
 8008f10:	4b30      	ldr	r3, [pc, #192]	@ (8008fd4 <__mdiff+0x120>)
 8008f12:	e7e3      	b.n	8008edc <__mdiff+0x28>
 8008f14:	f100 0b14 	add.w	fp, r0, #20
 8008f18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f1c:	f109 0310 	add.w	r3, r9, #16
 8008f20:	60c5      	str	r5, [r0, #12]
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	f109 0514 	add.w	r5, r9, #20
 8008f2a:	46d9      	mov	r9, fp
 8008f2c:	6926      	ldr	r6, [r4, #16]
 8008f2e:	f104 0e14 	add.w	lr, r4, #20
 8008f32:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f46:	b281      	uxth	r1, r0
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	fa1f f38a 	uxth.w	r3, sl
 8008f4e:	1a5b      	subs	r3, r3, r1
 8008f50:	0c00      	lsrs	r0, r0, #16
 8008f52:	4463      	add	r3, ip
 8008f54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f62:	4576      	cmp	r6, lr
 8008f64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f68:	f849 3b04 	str.w	r3, [r9], #4
 8008f6c:	d8e6      	bhi.n	8008f3c <__mdiff+0x88>
 8008f6e:	1b33      	subs	r3, r6, r4
 8008f70:	3b15      	subs	r3, #21
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	3415      	adds	r4, #21
 8008f78:	3304      	adds	r3, #4
 8008f7a:	42a6      	cmp	r6, r4
 8008f7c:	bf38      	it	cc
 8008f7e:	2304      	movcc	r3, #4
 8008f80:	441d      	add	r5, r3
 8008f82:	445b      	add	r3, fp
 8008f84:	461e      	mov	r6, r3
 8008f86:	462c      	mov	r4, r5
 8008f88:	4544      	cmp	r4, r8
 8008f8a:	d30e      	bcc.n	8008faa <__mdiff+0xf6>
 8008f8c:	f108 0103 	add.w	r1, r8, #3
 8008f90:	1b49      	subs	r1, r1, r5
 8008f92:	f021 0103 	bic.w	r1, r1, #3
 8008f96:	3d03      	subs	r5, #3
 8008f98:	45a8      	cmp	r8, r5
 8008f9a:	bf38      	it	cc
 8008f9c:	2100      	movcc	r1, #0
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fa4:	b199      	cbz	r1, 8008fce <__mdiff+0x11a>
 8008fa6:	6117      	str	r7, [r2, #16]
 8008fa8:	e79e      	b.n	8008ee8 <__mdiff+0x34>
 8008faa:	46e6      	mov	lr, ip
 8008fac:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fb0:	fa1f fc81 	uxth.w	ip, r1
 8008fb4:	44f4      	add	ip, lr
 8008fb6:	0c08      	lsrs	r0, r1, #16
 8008fb8:	4471      	add	r1, lr
 8008fba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008fbe:	b289      	uxth	r1, r1
 8008fc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fc8:	f846 1b04 	str.w	r1, [r6], #4
 8008fcc:	e7dc      	b.n	8008f88 <__mdiff+0xd4>
 8008fce:	3f01      	subs	r7, #1
 8008fd0:	e7e6      	b.n	8008fa0 <__mdiff+0xec>
 8008fd2:	bf00      	nop
 8008fd4:	0800a3c4 	.word	0x0800a3c4
 8008fd8:	0800a3d5 	.word	0x0800a3d5

08008fdc <__d2b>:
 8008fdc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	4690      	mov	r8, r2
 8008fe4:	4699      	mov	r9, r3
 8008fe6:	9e08      	ldr	r6, [sp, #32]
 8008fe8:	f7ff fcd6 	bl	8008998 <_Balloc>
 8008fec:	4604      	mov	r4, r0
 8008fee:	b930      	cbnz	r0, 8008ffe <__d2b+0x22>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ff6:	4b23      	ldr	r3, [pc, #140]	@ (8009084 <__d2b+0xa8>)
 8008ff8:	4823      	ldr	r0, [pc, #140]	@ (8009088 <__d2b+0xac>)
 8008ffa:	f000 fa6f 	bl	80094dc <__assert_func>
 8008ffe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009002:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009006:	b10d      	cbz	r5, 800900c <__d2b+0x30>
 8009008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	f1b8 0300 	subs.w	r3, r8, #0
 8009012:	d024      	beq.n	800905e <__d2b+0x82>
 8009014:	4668      	mov	r0, sp
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	f7ff fd85 	bl	8008b26 <__lo0bits>
 800901c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009020:	b1d8      	cbz	r0, 800905a <__d2b+0x7e>
 8009022:	f1c0 0320 	rsb	r3, r0, #32
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	430b      	orrs	r3, r1
 800902c:	40c2      	lsrs	r2, r0
 800902e:	6163      	str	r3, [r4, #20]
 8009030:	9201      	str	r2, [sp, #4]
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf0c      	ite	eq
 8009038:	2201      	moveq	r2, #1
 800903a:	2202      	movne	r2, #2
 800903c:	61a3      	str	r3, [r4, #24]
 800903e:	6122      	str	r2, [r4, #16]
 8009040:	b1ad      	cbz	r5, 800906e <__d2b+0x92>
 8009042:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009046:	4405      	add	r5, r0
 8009048:	6035      	str	r5, [r6, #0]
 800904a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800904e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009050:	6018      	str	r0, [r3, #0]
 8009052:	4620      	mov	r0, r4
 8009054:	b002      	add	sp, #8
 8009056:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800905a:	6161      	str	r1, [r4, #20]
 800905c:	e7e9      	b.n	8009032 <__d2b+0x56>
 800905e:	a801      	add	r0, sp, #4
 8009060:	f7ff fd61 	bl	8008b26 <__lo0bits>
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	6163      	str	r3, [r4, #20]
 800906a:	3020      	adds	r0, #32
 800906c:	e7e7      	b.n	800903e <__d2b+0x62>
 800906e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009072:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	6918      	ldr	r0, [r3, #16]
 800907a:	f7ff fd35 	bl	8008ae8 <__hi0bits>
 800907e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009082:	e7e4      	b.n	800904e <__d2b+0x72>
 8009084:	0800a3c4 	.word	0x0800a3c4
 8009088:	0800a3d5 	.word	0x0800a3d5

0800908c <__ssputs_r>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	461f      	mov	r7, r3
 8009092:	688e      	ldr	r6, [r1, #8]
 8009094:	4682      	mov	sl, r0
 8009096:	42be      	cmp	r6, r7
 8009098:	460c      	mov	r4, r1
 800909a:	4690      	mov	r8, r2
 800909c:	680b      	ldr	r3, [r1, #0]
 800909e:	d82d      	bhi.n	80090fc <__ssputs_r+0x70>
 80090a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090a8:	d026      	beq.n	80090f8 <__ssputs_r+0x6c>
 80090aa:	6965      	ldr	r5, [r4, #20]
 80090ac:	6909      	ldr	r1, [r1, #16]
 80090ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b2:	eba3 0901 	sub.w	r9, r3, r1
 80090b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090ba:	1c7b      	adds	r3, r7, #1
 80090bc:	444b      	add	r3, r9
 80090be:	106d      	asrs	r5, r5, #1
 80090c0:	429d      	cmp	r5, r3
 80090c2:	bf38      	it	cc
 80090c4:	461d      	movcc	r5, r3
 80090c6:	0553      	lsls	r3, r2, #21
 80090c8:	d527      	bpl.n	800911a <__ssputs_r+0x8e>
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7fd fec4 	bl	8006e58 <_malloc_r>
 80090d0:	4606      	mov	r6, r0
 80090d2:	b360      	cbz	r0, 800912e <__ssputs_r+0xa2>
 80090d4:	464a      	mov	r2, r9
 80090d6:	6921      	ldr	r1, [r4, #16]
 80090d8:	f000 f9f2 	bl	80094c0 <memcpy>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	6126      	str	r6, [r4, #16]
 80090ea:	444e      	add	r6, r9
 80090ec:	6026      	str	r6, [r4, #0]
 80090ee:	463e      	mov	r6, r7
 80090f0:	6165      	str	r5, [r4, #20]
 80090f2:	eba5 0509 	sub.w	r5, r5, r9
 80090f6:	60a5      	str	r5, [r4, #8]
 80090f8:	42be      	cmp	r6, r7
 80090fa:	d900      	bls.n	80090fe <__ssputs_r+0x72>
 80090fc:	463e      	mov	r6, r7
 80090fe:	4632      	mov	r2, r6
 8009100:	4641      	mov	r1, r8
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	f000 f9c2 	bl	800948c <memmove>
 8009108:	2000      	movs	r0, #0
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	4433      	add	r3, r6
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911a:	462a      	mov	r2, r5
 800911c:	f000 fa22 	bl	8009564 <_realloc_r>
 8009120:	4606      	mov	r6, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d1e0      	bne.n	80090e8 <__ssputs_r+0x5c>
 8009126:	4650      	mov	r0, sl
 8009128:	6921      	ldr	r1, [r4, #16]
 800912a:	f7ff fbed 	bl	8008908 <_free_r>
 800912e:	230c      	movs	r3, #12
 8009130:	f8ca 3000 	str.w	r3, [sl]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	e7e9      	b.n	8009116 <__ssputs_r+0x8a>
	...

08009144 <_svfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4698      	mov	r8, r3
 800914a:	898b      	ldrh	r3, [r1, #12]
 800914c:	4607      	mov	r7, r0
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	460d      	mov	r5, r1
 8009152:	4614      	mov	r4, r2
 8009154:	b09d      	sub	sp, #116	@ 0x74
 8009156:	d510      	bpl.n	800917a <_svfiprintf_r+0x36>
 8009158:	690b      	ldr	r3, [r1, #16]
 800915a:	b973      	cbnz	r3, 800917a <_svfiprintf_r+0x36>
 800915c:	2140      	movs	r1, #64	@ 0x40
 800915e:	f7fd fe7b 	bl	8006e58 <_malloc_r>
 8009162:	6028      	str	r0, [r5, #0]
 8009164:	6128      	str	r0, [r5, #16]
 8009166:	b930      	cbnz	r0, 8009176 <_svfiprintf_r+0x32>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b01d      	add	sp, #116	@ 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	2340      	movs	r3, #64	@ 0x40
 8009178:	616b      	str	r3, [r5, #20]
 800917a:	2300      	movs	r3, #0
 800917c:	9309      	str	r3, [sp, #36]	@ 0x24
 800917e:	2320      	movs	r3, #32
 8009180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009184:	2330      	movs	r3, #48	@ 0x30
 8009186:	f04f 0901 	mov.w	r9, #1
 800918a:	f8cd 800c 	str.w	r8, [sp, #12]
 800918e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009328 <_svfiprintf_r+0x1e4>
 8009192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009196:	4623      	mov	r3, r4
 8009198:	469a      	mov	sl, r3
 800919a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919e:	b10a      	cbz	r2, 80091a4 <_svfiprintf_r+0x60>
 80091a0:	2a25      	cmp	r2, #37	@ 0x25
 80091a2:	d1f9      	bne.n	8009198 <_svfiprintf_r+0x54>
 80091a4:	ebba 0b04 	subs.w	fp, sl, r4
 80091a8:	d00b      	beq.n	80091c2 <_svfiprintf_r+0x7e>
 80091aa:	465b      	mov	r3, fp
 80091ac:	4622      	mov	r2, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ff6b 	bl	800908c <__ssputs_r>
 80091b6:	3001      	adds	r0, #1
 80091b8:	f000 80a7 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091be:	445a      	add	r2, fp
 80091c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091c2:	f89a 3000 	ldrb.w	r3, [sl]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 809f 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091cc:	2300      	movs	r3, #0
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d6:	f10a 0a01 	add.w	sl, sl, #1
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	9307      	str	r3, [sp, #28]
 80091de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091e4:	4654      	mov	r4, sl
 80091e6:	2205      	movs	r2, #5
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	484e      	ldr	r0, [pc, #312]	@ (8009328 <_svfiprintf_r+0x1e4>)
 80091ee:	f7fe fd20 	bl	8007c32 <memchr>
 80091f2:	9a04      	ldr	r2, [sp, #16]
 80091f4:	b9d8      	cbnz	r0, 800922e <_svfiprintf_r+0xea>
 80091f6:	06d0      	lsls	r0, r2, #27
 80091f8:	bf44      	itt	mi
 80091fa:	2320      	movmi	r3, #32
 80091fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009200:	0711      	lsls	r1, r2, #28
 8009202:	bf44      	itt	mi
 8009204:	232b      	movmi	r3, #43	@ 0x2b
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920a:	f89a 3000 	ldrb.w	r3, [sl]
 800920e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009210:	d015      	beq.n	800923e <_svfiprintf_r+0xfa>
 8009212:	4654      	mov	r4, sl
 8009214:	2000      	movs	r0, #0
 8009216:	f04f 0c0a 	mov.w	ip, #10
 800921a:	9a07      	ldr	r2, [sp, #28]
 800921c:	4621      	mov	r1, r4
 800921e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009222:	3b30      	subs	r3, #48	@ 0x30
 8009224:	2b09      	cmp	r3, #9
 8009226:	d94b      	bls.n	80092c0 <_svfiprintf_r+0x17c>
 8009228:	b1b0      	cbz	r0, 8009258 <_svfiprintf_r+0x114>
 800922a:	9207      	str	r2, [sp, #28]
 800922c:	e014      	b.n	8009258 <_svfiprintf_r+0x114>
 800922e:	eba0 0308 	sub.w	r3, r0, r8
 8009232:	fa09 f303 	lsl.w	r3, r9, r3
 8009236:	4313      	orrs	r3, r2
 8009238:	46a2      	mov	sl, r4
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	e7d2      	b.n	80091e4 <_svfiprintf_r+0xa0>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	1d19      	adds	r1, r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	9103      	str	r1, [sp, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfbb      	ittet	lt
 800924a:	425b      	neglt	r3, r3
 800924c:	f042 0202 	orrlt.w	r2, r2, #2
 8009250:	9307      	strge	r3, [sp, #28]
 8009252:	9307      	strlt	r3, [sp, #28]
 8009254:	bfb8      	it	lt
 8009256:	9204      	strlt	r2, [sp, #16]
 8009258:	7823      	ldrb	r3, [r4, #0]
 800925a:	2b2e      	cmp	r3, #46	@ 0x2e
 800925c:	d10a      	bne.n	8009274 <_svfiprintf_r+0x130>
 800925e:	7863      	ldrb	r3, [r4, #1]
 8009260:	2b2a      	cmp	r3, #42	@ 0x2a
 8009262:	d132      	bne.n	80092ca <_svfiprintf_r+0x186>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	3402      	adds	r4, #2
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9203      	str	r2, [sp, #12]
 800926e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800932c <_svfiprintf_r+0x1e8>
 8009278:	2203      	movs	r2, #3
 800927a:	4650      	mov	r0, sl
 800927c:	7821      	ldrb	r1, [r4, #0]
 800927e:	f7fe fcd8 	bl	8007c32 <memchr>
 8009282:	b138      	cbz	r0, 8009294 <_svfiprintf_r+0x150>
 8009284:	2240      	movs	r2, #64	@ 0x40
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	eba0 000a 	sub.w	r0, r0, sl
 800928c:	4082      	lsls	r2, r0
 800928e:	4313      	orrs	r3, r2
 8009290:	3401      	adds	r4, #1
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	2206      	movs	r2, #6
 800929a:	4825      	ldr	r0, [pc, #148]	@ (8009330 <_svfiprintf_r+0x1ec>)
 800929c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092a0:	f7fe fcc7 	bl	8007c32 <memchr>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d036      	beq.n	8009316 <_svfiprintf_r+0x1d2>
 80092a8:	4b22      	ldr	r3, [pc, #136]	@ (8009334 <_svfiprintf_r+0x1f0>)
 80092aa:	bb1b      	cbnz	r3, 80092f4 <_svfiprintf_r+0x1b0>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	3307      	adds	r3, #7
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	3308      	adds	r3, #8
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ba:	4433      	add	r3, r6
 80092bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092be:	e76a      	b.n	8009196 <_svfiprintf_r+0x52>
 80092c0:	460c      	mov	r4, r1
 80092c2:	2001      	movs	r0, #1
 80092c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c8:	e7a8      	b.n	800921c <_svfiprintf_r+0xd8>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f04f 0c0a 	mov.w	ip, #10
 80092d0:	4619      	mov	r1, r3
 80092d2:	3401      	adds	r4, #1
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	4620      	mov	r0, r4
 80092d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092dc:	3a30      	subs	r2, #48	@ 0x30
 80092de:	2a09      	cmp	r2, #9
 80092e0:	d903      	bls.n	80092ea <_svfiprintf_r+0x1a6>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0c6      	beq.n	8009274 <_svfiprintf_r+0x130>
 80092e6:	9105      	str	r1, [sp, #20]
 80092e8:	e7c4      	b.n	8009274 <_svfiprintf_r+0x130>
 80092ea:	4604      	mov	r4, r0
 80092ec:	2301      	movs	r3, #1
 80092ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f2:	e7f0      	b.n	80092d6 <_svfiprintf_r+0x192>
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4638      	mov	r0, r7
 80092fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009338 <_svfiprintf_r+0x1f4>)
 80092fe:	a904      	add	r1, sp, #16
 8009300:	f7fd fed4 	bl	80070ac <_printf_float>
 8009304:	1c42      	adds	r2, r0, #1
 8009306:	4606      	mov	r6, r0
 8009308:	d1d6      	bne.n	80092b8 <_svfiprintf_r+0x174>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	065b      	lsls	r3, r3, #25
 800930e:	f53f af2d 	bmi.w	800916c <_svfiprintf_r+0x28>
 8009312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009314:	e72c      	b.n	8009170 <_svfiprintf_r+0x2c>
 8009316:	ab03      	add	r3, sp, #12
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	462a      	mov	r2, r5
 800931c:	4638      	mov	r0, r7
 800931e:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <_svfiprintf_r+0x1f4>)
 8009320:	a904      	add	r1, sp, #16
 8009322:	f7fe f961 	bl	80075e8 <_printf_i>
 8009326:	e7ed      	b.n	8009304 <_svfiprintf_r+0x1c0>
 8009328:	0800a42e 	.word	0x0800a42e
 800932c:	0800a434 	.word	0x0800a434
 8009330:	0800a438 	.word	0x0800a438
 8009334:	080070ad 	.word	0x080070ad
 8009338:	0800908d 	.word	0x0800908d

0800933c <__sflush_r>:
 800933c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	0716      	lsls	r6, r2, #28
 8009344:	4605      	mov	r5, r0
 8009346:	460c      	mov	r4, r1
 8009348:	d454      	bmi.n	80093f4 <__sflush_r+0xb8>
 800934a:	684b      	ldr	r3, [r1, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dc02      	bgt.n	8009356 <__sflush_r+0x1a>
 8009350:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd48      	ble.n	80093e8 <__sflush_r+0xac>
 8009356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009358:	2e00      	cmp	r6, #0
 800935a:	d045      	beq.n	80093e8 <__sflush_r+0xac>
 800935c:	2300      	movs	r3, #0
 800935e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009362:	682f      	ldr	r7, [r5, #0]
 8009364:	6a21      	ldr	r1, [r4, #32]
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	d030      	beq.n	80093cc <__sflush_r+0x90>
 800936a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	0759      	lsls	r1, r3, #29
 8009370:	d505      	bpl.n	800937e <__sflush_r+0x42>
 8009372:	6863      	ldr	r3, [r4, #4]
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009378:	b10b      	cbz	r3, 800937e <__sflush_r+0x42>
 800937a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800937c:	1ad2      	subs	r2, r2, r3
 800937e:	2300      	movs	r3, #0
 8009380:	4628      	mov	r0, r5
 8009382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009384:	6a21      	ldr	r1, [r4, #32]
 8009386:	47b0      	blx	r6
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	d106      	bne.n	800939c <__sflush_r+0x60>
 800938e:	6829      	ldr	r1, [r5, #0]
 8009390:	291d      	cmp	r1, #29
 8009392:	d82b      	bhi.n	80093ec <__sflush_r+0xb0>
 8009394:	4a28      	ldr	r2, [pc, #160]	@ (8009438 <__sflush_r+0xfc>)
 8009396:	40ca      	lsrs	r2, r1
 8009398:	07d6      	lsls	r6, r2, #31
 800939a:	d527      	bpl.n	80093ec <__sflush_r+0xb0>
 800939c:	2200      	movs	r2, #0
 800939e:	6062      	str	r2, [r4, #4]
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	04d9      	lsls	r1, r3, #19
 80093a4:	6022      	str	r2, [r4, #0]
 80093a6:	d504      	bpl.n	80093b2 <__sflush_r+0x76>
 80093a8:	1c42      	adds	r2, r0, #1
 80093aa:	d101      	bne.n	80093b0 <__sflush_r+0x74>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b903      	cbnz	r3, 80093b2 <__sflush_r+0x76>
 80093b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80093b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093b4:	602f      	str	r7, [r5, #0]
 80093b6:	b1b9      	cbz	r1, 80093e8 <__sflush_r+0xac>
 80093b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093bc:	4299      	cmp	r1, r3
 80093be:	d002      	beq.n	80093c6 <__sflush_r+0x8a>
 80093c0:	4628      	mov	r0, r5
 80093c2:	f7ff faa1 	bl	8008908 <_free_r>
 80093c6:	2300      	movs	r3, #0
 80093c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093ca:	e00d      	b.n	80093e8 <__sflush_r+0xac>
 80093cc:	2301      	movs	r3, #1
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b0      	blx	r6
 80093d2:	4602      	mov	r2, r0
 80093d4:	1c50      	adds	r0, r2, #1
 80093d6:	d1c9      	bne.n	800936c <__sflush_r+0x30>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0c6      	beq.n	800936c <__sflush_r+0x30>
 80093de:	2b1d      	cmp	r3, #29
 80093e0:	d001      	beq.n	80093e6 <__sflush_r+0xaa>
 80093e2:	2b16      	cmp	r3, #22
 80093e4:	d11d      	bne.n	8009422 <__sflush_r+0xe6>
 80093e6:	602f      	str	r7, [r5, #0]
 80093e8:	2000      	movs	r0, #0
 80093ea:	e021      	b.n	8009430 <__sflush_r+0xf4>
 80093ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	e01a      	b.n	800942a <__sflush_r+0xee>
 80093f4:	690f      	ldr	r7, [r1, #16]
 80093f6:	2f00      	cmp	r7, #0
 80093f8:	d0f6      	beq.n	80093e8 <__sflush_r+0xac>
 80093fa:	0793      	lsls	r3, r2, #30
 80093fc:	bf18      	it	ne
 80093fe:	2300      	movne	r3, #0
 8009400:	680e      	ldr	r6, [r1, #0]
 8009402:	bf08      	it	eq
 8009404:	694b      	ldreq	r3, [r1, #20]
 8009406:	1bf6      	subs	r6, r6, r7
 8009408:	600f      	str	r7, [r1, #0]
 800940a:	608b      	str	r3, [r1, #8]
 800940c:	2e00      	cmp	r6, #0
 800940e:	ddeb      	ble.n	80093e8 <__sflush_r+0xac>
 8009410:	4633      	mov	r3, r6
 8009412:	463a      	mov	r2, r7
 8009414:	4628      	mov	r0, r5
 8009416:	6a21      	ldr	r1, [r4, #32]
 8009418:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800941c:	47e0      	blx	ip
 800941e:	2800      	cmp	r0, #0
 8009420:	dc07      	bgt.n	8009432 <__sflush_r+0xf6>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009432:	4407      	add	r7, r0
 8009434:	1a36      	subs	r6, r6, r0
 8009436:	e7e9      	b.n	800940c <__sflush_r+0xd0>
 8009438:	20400001 	.word	0x20400001

0800943c <_fflush_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	b913      	cbnz	r3, 800944c <_fflush_r+0x10>
 8009446:	2500      	movs	r5, #0
 8009448:	4628      	mov	r0, r5
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	b118      	cbz	r0, 8009456 <_fflush_r+0x1a>
 800944e:	6a03      	ldr	r3, [r0, #32]
 8009450:	b90b      	cbnz	r3, 8009456 <_fflush_r+0x1a>
 8009452:	f7fe fa73 	bl	800793c <__sinit>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f3      	beq.n	8009446 <_fflush_r+0xa>
 800945e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009460:	07d0      	lsls	r0, r2, #31
 8009462:	d404      	bmi.n	800946e <_fflush_r+0x32>
 8009464:	0599      	lsls	r1, r3, #22
 8009466:	d402      	bmi.n	800946e <_fflush_r+0x32>
 8009468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946a:	f7fe fbe0 	bl	8007c2e <__retarget_lock_acquire_recursive>
 800946e:	4628      	mov	r0, r5
 8009470:	4621      	mov	r1, r4
 8009472:	f7ff ff63 	bl	800933c <__sflush_r>
 8009476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009478:	4605      	mov	r5, r0
 800947a:	07da      	lsls	r2, r3, #31
 800947c:	d4e4      	bmi.n	8009448 <_fflush_r+0xc>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	059b      	lsls	r3, r3, #22
 8009482:	d4e1      	bmi.n	8009448 <_fflush_r+0xc>
 8009484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009486:	f7fe fbd3 	bl	8007c30 <__retarget_lock_release_recursive>
 800948a:	e7dd      	b.n	8009448 <_fflush_r+0xc>

0800948c <memmove>:
 800948c:	4288      	cmp	r0, r1
 800948e:	b510      	push	{r4, lr}
 8009490:	eb01 0402 	add.w	r4, r1, r2
 8009494:	d902      	bls.n	800949c <memmove+0x10>
 8009496:	4284      	cmp	r4, r0
 8009498:	4623      	mov	r3, r4
 800949a:	d807      	bhi.n	80094ac <memmove+0x20>
 800949c:	1e43      	subs	r3, r0, #1
 800949e:	42a1      	cmp	r1, r4
 80094a0:	d008      	beq.n	80094b4 <memmove+0x28>
 80094a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094aa:	e7f8      	b.n	800949e <memmove+0x12>
 80094ac:	4601      	mov	r1, r0
 80094ae:	4402      	add	r2, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	d100      	bne.n	80094b6 <memmove+0x2a>
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094be:	e7f7      	b.n	80094b0 <memmove+0x24>

080094c0 <memcpy>:
 80094c0:	440a      	add	r2, r1
 80094c2:	4291      	cmp	r1, r2
 80094c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094c8:	d100      	bne.n	80094cc <memcpy+0xc>
 80094ca:	4770      	bx	lr
 80094cc:	b510      	push	{r4, lr}
 80094ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d2:	4291      	cmp	r1, r2
 80094d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d8:	d1f9      	bne.n	80094ce <memcpy+0xe>
 80094da:	bd10      	pop	{r4, pc}

080094dc <__assert_func>:
 80094dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094de:	4614      	mov	r4, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	4b09      	ldr	r3, [pc, #36]	@ (8009508 <__assert_func+0x2c>)
 80094e4:	4605      	mov	r5, r0
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68d8      	ldr	r0, [r3, #12]
 80094ea:	b14c      	cbz	r4, 8009500 <__assert_func+0x24>
 80094ec:	4b07      	ldr	r3, [pc, #28]	@ (800950c <__assert_func+0x30>)
 80094ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094f2:	9100      	str	r1, [sp, #0]
 80094f4:	462b      	mov	r3, r5
 80094f6:	4906      	ldr	r1, [pc, #24]	@ (8009510 <__assert_func+0x34>)
 80094f8:	f000 f870 	bl	80095dc <fiprintf>
 80094fc:	f000 f880 	bl	8009600 <abort>
 8009500:	4b04      	ldr	r3, [pc, #16]	@ (8009514 <__assert_func+0x38>)
 8009502:	461c      	mov	r4, r3
 8009504:	e7f3      	b.n	80094ee <__assert_func+0x12>
 8009506:	bf00      	nop
 8009508:	20000424 	.word	0x20000424
 800950c:	0800a449 	.word	0x0800a449
 8009510:	0800a456 	.word	0x0800a456
 8009514:	0800a484 	.word	0x0800a484

08009518 <_calloc_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	fba1 5402 	umull	r5, r4, r1, r2
 800951e:	b934      	cbnz	r4, 800952e <_calloc_r+0x16>
 8009520:	4629      	mov	r1, r5
 8009522:	f7fd fc99 	bl	8006e58 <_malloc_r>
 8009526:	4606      	mov	r6, r0
 8009528:	b928      	cbnz	r0, 8009536 <_calloc_r+0x1e>
 800952a:	4630      	mov	r0, r6
 800952c:	bd70      	pop	{r4, r5, r6, pc}
 800952e:	220c      	movs	r2, #12
 8009530:	2600      	movs	r6, #0
 8009532:	6002      	str	r2, [r0, #0]
 8009534:	e7f9      	b.n	800952a <_calloc_r+0x12>
 8009536:	462a      	mov	r2, r5
 8009538:	4621      	mov	r1, r4
 800953a:	f7fe faeb 	bl	8007b14 <memset>
 800953e:	e7f4      	b.n	800952a <_calloc_r+0x12>

08009540 <__ascii_mbtowc>:
 8009540:	b082      	sub	sp, #8
 8009542:	b901      	cbnz	r1, 8009546 <__ascii_mbtowc+0x6>
 8009544:	a901      	add	r1, sp, #4
 8009546:	b142      	cbz	r2, 800955a <__ascii_mbtowc+0x1a>
 8009548:	b14b      	cbz	r3, 800955e <__ascii_mbtowc+0x1e>
 800954a:	7813      	ldrb	r3, [r2, #0]
 800954c:	600b      	str	r3, [r1, #0]
 800954e:	7812      	ldrb	r2, [r2, #0]
 8009550:	1e10      	subs	r0, r2, #0
 8009552:	bf18      	it	ne
 8009554:	2001      	movne	r0, #1
 8009556:	b002      	add	sp, #8
 8009558:	4770      	bx	lr
 800955a:	4610      	mov	r0, r2
 800955c:	e7fb      	b.n	8009556 <__ascii_mbtowc+0x16>
 800955e:	f06f 0001 	mvn.w	r0, #1
 8009562:	e7f8      	b.n	8009556 <__ascii_mbtowc+0x16>

08009564 <_realloc_r>:
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	4607      	mov	r7, r0
 800956a:	4614      	mov	r4, r2
 800956c:	460d      	mov	r5, r1
 800956e:	b921      	cbnz	r1, 800957a <_realloc_r+0x16>
 8009570:	4611      	mov	r1, r2
 8009572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009576:	f7fd bc6f 	b.w	8006e58 <_malloc_r>
 800957a:	b92a      	cbnz	r2, 8009588 <_realloc_r+0x24>
 800957c:	f7ff f9c4 	bl	8008908 <_free_r>
 8009580:	4625      	mov	r5, r4
 8009582:	4628      	mov	r0, r5
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	f000 f841 	bl	800960e <_malloc_usable_size_r>
 800958c:	4284      	cmp	r4, r0
 800958e:	4606      	mov	r6, r0
 8009590:	d802      	bhi.n	8009598 <_realloc_r+0x34>
 8009592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009596:	d8f4      	bhi.n	8009582 <_realloc_r+0x1e>
 8009598:	4621      	mov	r1, r4
 800959a:	4638      	mov	r0, r7
 800959c:	f7fd fc5c 	bl	8006e58 <_malloc_r>
 80095a0:	4680      	mov	r8, r0
 80095a2:	b908      	cbnz	r0, 80095a8 <_realloc_r+0x44>
 80095a4:	4645      	mov	r5, r8
 80095a6:	e7ec      	b.n	8009582 <_realloc_r+0x1e>
 80095a8:	42b4      	cmp	r4, r6
 80095aa:	4622      	mov	r2, r4
 80095ac:	4629      	mov	r1, r5
 80095ae:	bf28      	it	cs
 80095b0:	4632      	movcs	r2, r6
 80095b2:	f7ff ff85 	bl	80094c0 <memcpy>
 80095b6:	4629      	mov	r1, r5
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff f9a5 	bl	8008908 <_free_r>
 80095be:	e7f1      	b.n	80095a4 <_realloc_r+0x40>

080095c0 <__ascii_wctomb>:
 80095c0:	4603      	mov	r3, r0
 80095c2:	4608      	mov	r0, r1
 80095c4:	b141      	cbz	r1, 80095d8 <__ascii_wctomb+0x18>
 80095c6:	2aff      	cmp	r2, #255	@ 0xff
 80095c8:	d904      	bls.n	80095d4 <__ascii_wctomb+0x14>
 80095ca:	228a      	movs	r2, #138	@ 0x8a
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	4770      	bx	lr
 80095d4:	2001      	movs	r0, #1
 80095d6:	700a      	strb	r2, [r1, #0]
 80095d8:	4770      	bx	lr
	...

080095dc <fiprintf>:
 80095dc:	b40e      	push	{r1, r2, r3}
 80095de:	b503      	push	{r0, r1, lr}
 80095e0:	4601      	mov	r1, r0
 80095e2:	ab03      	add	r3, sp, #12
 80095e4:	4805      	ldr	r0, [pc, #20]	@ (80095fc <fiprintf+0x20>)
 80095e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	f000 f83d 	bl	800966c <_vfiprintf_r>
 80095f2:	b002      	add	sp, #8
 80095f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095f8:	b003      	add	sp, #12
 80095fa:	4770      	bx	lr
 80095fc:	20000424 	.word	0x20000424

08009600 <abort>:
 8009600:	2006      	movs	r0, #6
 8009602:	b508      	push	{r3, lr}
 8009604:	f000 fa06 	bl	8009a14 <raise>
 8009608:	2001      	movs	r0, #1
 800960a:	f7f7 fdb8 	bl	800117e <_exit>

0800960e <_malloc_usable_size_r>:
 800960e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009612:	1f18      	subs	r0, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfbc      	itt	lt
 8009618:	580b      	ldrlt	r3, [r1, r0]
 800961a:	18c0      	addlt	r0, r0, r3
 800961c:	4770      	bx	lr

0800961e <__sfputc_r>:
 800961e:	6893      	ldr	r3, [r2, #8]
 8009620:	b410      	push	{r4}
 8009622:	3b01      	subs	r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	6093      	str	r3, [r2, #8]
 8009628:	da07      	bge.n	800963a <__sfputc_r+0x1c>
 800962a:	6994      	ldr	r4, [r2, #24]
 800962c:	42a3      	cmp	r3, r4
 800962e:	db01      	blt.n	8009634 <__sfputc_r+0x16>
 8009630:	290a      	cmp	r1, #10
 8009632:	d102      	bne.n	800963a <__sfputc_r+0x1c>
 8009634:	bc10      	pop	{r4}
 8009636:	f000 b931 	b.w	800989c <__swbuf_r>
 800963a:	6813      	ldr	r3, [r2, #0]
 800963c:	1c58      	adds	r0, r3, #1
 800963e:	6010      	str	r0, [r2, #0]
 8009640:	7019      	strb	r1, [r3, #0]
 8009642:	4608      	mov	r0, r1
 8009644:	bc10      	pop	{r4}
 8009646:	4770      	bx	lr

08009648 <__sfputs_r>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	4614      	mov	r4, r2
 8009650:	18d5      	adds	r5, r2, r3
 8009652:	42ac      	cmp	r4, r5
 8009654:	d101      	bne.n	800965a <__sfputs_r+0x12>
 8009656:	2000      	movs	r0, #0
 8009658:	e007      	b.n	800966a <__sfputs_r+0x22>
 800965a:	463a      	mov	r2, r7
 800965c:	4630      	mov	r0, r6
 800965e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009662:	f7ff ffdc 	bl	800961e <__sfputc_r>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d1f3      	bne.n	8009652 <__sfputs_r+0xa>
 800966a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800966c <_vfiprintf_r>:
 800966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	460d      	mov	r5, r1
 8009672:	4614      	mov	r4, r2
 8009674:	4698      	mov	r8, r3
 8009676:	4606      	mov	r6, r0
 8009678:	b09d      	sub	sp, #116	@ 0x74
 800967a:	b118      	cbz	r0, 8009684 <_vfiprintf_r+0x18>
 800967c:	6a03      	ldr	r3, [r0, #32]
 800967e:	b90b      	cbnz	r3, 8009684 <_vfiprintf_r+0x18>
 8009680:	f7fe f95c 	bl	800793c <__sinit>
 8009684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009686:	07d9      	lsls	r1, r3, #31
 8009688:	d405      	bmi.n	8009696 <_vfiprintf_r+0x2a>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d402      	bmi.n	8009696 <_vfiprintf_r+0x2a>
 8009690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009692:	f7fe facc 	bl	8007c2e <__retarget_lock_acquire_recursive>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	071b      	lsls	r3, r3, #28
 800969a:	d501      	bpl.n	80096a0 <_vfiprintf_r+0x34>
 800969c:	692b      	ldr	r3, [r5, #16]
 800969e:	b99b      	cbnz	r3, 80096c8 <_vfiprintf_r+0x5c>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4630      	mov	r0, r6
 80096a4:	f000 f938 	bl	8009918 <__swsetup_r>
 80096a8:	b170      	cbz	r0, 80096c8 <_vfiprintf_r+0x5c>
 80096aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096ac:	07dc      	lsls	r4, r3, #31
 80096ae:	d504      	bpl.n	80096ba <_vfiprintf_r+0x4e>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	b01d      	add	sp, #116	@ 0x74
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	89ab      	ldrh	r3, [r5, #12]
 80096bc:	0598      	lsls	r0, r3, #22
 80096be:	d4f7      	bmi.n	80096b0 <_vfiprintf_r+0x44>
 80096c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096c2:	f7fe fab5 	bl	8007c30 <__retarget_lock_release_recursive>
 80096c6:	e7f3      	b.n	80096b0 <_vfiprintf_r+0x44>
 80096c8:	2300      	movs	r3, #0
 80096ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80096cc:	2320      	movs	r3, #32
 80096ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096d2:	2330      	movs	r3, #48	@ 0x30
 80096d4:	f04f 0901 	mov.w	r9, #1
 80096d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80096dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009888 <_vfiprintf_r+0x21c>
 80096e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096e4:	4623      	mov	r3, r4
 80096e6:	469a      	mov	sl, r3
 80096e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ec:	b10a      	cbz	r2, 80096f2 <_vfiprintf_r+0x86>
 80096ee:	2a25      	cmp	r2, #37	@ 0x25
 80096f0:	d1f9      	bne.n	80096e6 <_vfiprintf_r+0x7a>
 80096f2:	ebba 0b04 	subs.w	fp, sl, r4
 80096f6:	d00b      	beq.n	8009710 <_vfiprintf_r+0xa4>
 80096f8:	465b      	mov	r3, fp
 80096fa:	4622      	mov	r2, r4
 80096fc:	4629      	mov	r1, r5
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ffa2 	bl	8009648 <__sfputs_r>
 8009704:	3001      	adds	r0, #1
 8009706:	f000 80a7 	beq.w	8009858 <_vfiprintf_r+0x1ec>
 800970a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800970c:	445a      	add	r2, fp
 800970e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009710:	f89a 3000 	ldrb.w	r3, [sl]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 809f 	beq.w	8009858 <_vfiprintf_r+0x1ec>
 800971a:	2300      	movs	r3, #0
 800971c:	f04f 32ff 	mov.w	r2, #4294967295
 8009720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009724:	f10a 0a01 	add.w	sl, sl, #1
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009730:	931a      	str	r3, [sp, #104]	@ 0x68
 8009732:	4654      	mov	r4, sl
 8009734:	2205      	movs	r2, #5
 8009736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973a:	4853      	ldr	r0, [pc, #332]	@ (8009888 <_vfiprintf_r+0x21c>)
 800973c:	f7fe fa79 	bl	8007c32 <memchr>
 8009740:	9a04      	ldr	r2, [sp, #16]
 8009742:	b9d8      	cbnz	r0, 800977c <_vfiprintf_r+0x110>
 8009744:	06d1      	lsls	r1, r2, #27
 8009746:	bf44      	itt	mi
 8009748:	2320      	movmi	r3, #32
 800974a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800974e:	0713      	lsls	r3, r2, #28
 8009750:	bf44      	itt	mi
 8009752:	232b      	movmi	r3, #43	@ 0x2b
 8009754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009758:	f89a 3000 	ldrb.w	r3, [sl]
 800975c:	2b2a      	cmp	r3, #42	@ 0x2a
 800975e:	d015      	beq.n	800978c <_vfiprintf_r+0x120>
 8009760:	4654      	mov	r4, sl
 8009762:	2000      	movs	r0, #0
 8009764:	f04f 0c0a 	mov.w	ip, #10
 8009768:	9a07      	ldr	r2, [sp, #28]
 800976a:	4621      	mov	r1, r4
 800976c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009770:	3b30      	subs	r3, #48	@ 0x30
 8009772:	2b09      	cmp	r3, #9
 8009774:	d94b      	bls.n	800980e <_vfiprintf_r+0x1a2>
 8009776:	b1b0      	cbz	r0, 80097a6 <_vfiprintf_r+0x13a>
 8009778:	9207      	str	r2, [sp, #28]
 800977a:	e014      	b.n	80097a6 <_vfiprintf_r+0x13a>
 800977c:	eba0 0308 	sub.w	r3, r0, r8
 8009780:	fa09 f303 	lsl.w	r3, r9, r3
 8009784:	4313      	orrs	r3, r2
 8009786:	46a2      	mov	sl, r4
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	e7d2      	b.n	8009732 <_vfiprintf_r+0xc6>
 800978c:	9b03      	ldr	r3, [sp, #12]
 800978e:	1d19      	adds	r1, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	9103      	str	r1, [sp, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfbb      	ittet	lt
 8009798:	425b      	neglt	r3, r3
 800979a:	f042 0202 	orrlt.w	r2, r2, #2
 800979e:	9307      	strge	r3, [sp, #28]
 80097a0:	9307      	strlt	r3, [sp, #28]
 80097a2:	bfb8      	it	lt
 80097a4:	9204      	strlt	r2, [sp, #16]
 80097a6:	7823      	ldrb	r3, [r4, #0]
 80097a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80097aa:	d10a      	bne.n	80097c2 <_vfiprintf_r+0x156>
 80097ac:	7863      	ldrb	r3, [r4, #1]
 80097ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b0:	d132      	bne.n	8009818 <_vfiprintf_r+0x1ac>
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	3402      	adds	r4, #2
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	9203      	str	r2, [sp, #12]
 80097bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800988c <_vfiprintf_r+0x220>
 80097c6:	2203      	movs	r2, #3
 80097c8:	4650      	mov	r0, sl
 80097ca:	7821      	ldrb	r1, [r4, #0]
 80097cc:	f7fe fa31 	bl	8007c32 <memchr>
 80097d0:	b138      	cbz	r0, 80097e2 <_vfiprintf_r+0x176>
 80097d2:	2240      	movs	r2, #64	@ 0x40
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	eba0 000a 	sub.w	r0, r0, sl
 80097da:	4082      	lsls	r2, r0
 80097dc:	4313      	orrs	r3, r2
 80097de:	3401      	adds	r4, #1
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e6:	2206      	movs	r2, #6
 80097e8:	4829      	ldr	r0, [pc, #164]	@ (8009890 <_vfiprintf_r+0x224>)
 80097ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097ee:	f7fe fa20 	bl	8007c32 <memchr>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d03f      	beq.n	8009876 <_vfiprintf_r+0x20a>
 80097f6:	4b27      	ldr	r3, [pc, #156]	@ (8009894 <_vfiprintf_r+0x228>)
 80097f8:	bb1b      	cbnz	r3, 8009842 <_vfiprintf_r+0x1d6>
 80097fa:	9b03      	ldr	r3, [sp, #12]
 80097fc:	3307      	adds	r3, #7
 80097fe:	f023 0307 	bic.w	r3, r3, #7
 8009802:	3308      	adds	r3, #8
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009808:	443b      	add	r3, r7
 800980a:	9309      	str	r3, [sp, #36]	@ 0x24
 800980c:	e76a      	b.n	80096e4 <_vfiprintf_r+0x78>
 800980e:	460c      	mov	r4, r1
 8009810:	2001      	movs	r0, #1
 8009812:	fb0c 3202 	mla	r2, ip, r2, r3
 8009816:	e7a8      	b.n	800976a <_vfiprintf_r+0xfe>
 8009818:	2300      	movs	r3, #0
 800981a:	f04f 0c0a 	mov.w	ip, #10
 800981e:	4619      	mov	r1, r3
 8009820:	3401      	adds	r4, #1
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	4620      	mov	r0, r4
 8009826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800982a:	3a30      	subs	r2, #48	@ 0x30
 800982c:	2a09      	cmp	r2, #9
 800982e:	d903      	bls.n	8009838 <_vfiprintf_r+0x1cc>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0c6      	beq.n	80097c2 <_vfiprintf_r+0x156>
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	e7c4      	b.n	80097c2 <_vfiprintf_r+0x156>
 8009838:	4604      	mov	r4, r0
 800983a:	2301      	movs	r3, #1
 800983c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009840:	e7f0      	b.n	8009824 <_vfiprintf_r+0x1b8>
 8009842:	ab03      	add	r3, sp, #12
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	462a      	mov	r2, r5
 8009848:	4630      	mov	r0, r6
 800984a:	4b13      	ldr	r3, [pc, #76]	@ (8009898 <_vfiprintf_r+0x22c>)
 800984c:	a904      	add	r1, sp, #16
 800984e:	f7fd fc2d 	bl	80070ac <_printf_float>
 8009852:	4607      	mov	r7, r0
 8009854:	1c78      	adds	r0, r7, #1
 8009856:	d1d6      	bne.n	8009806 <_vfiprintf_r+0x19a>
 8009858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800985a:	07d9      	lsls	r1, r3, #31
 800985c:	d405      	bmi.n	800986a <_vfiprintf_r+0x1fe>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	059a      	lsls	r2, r3, #22
 8009862:	d402      	bmi.n	800986a <_vfiprintf_r+0x1fe>
 8009864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009866:	f7fe f9e3 	bl	8007c30 <__retarget_lock_release_recursive>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	065b      	lsls	r3, r3, #25
 800986e:	f53f af1f 	bmi.w	80096b0 <_vfiprintf_r+0x44>
 8009872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009874:	e71e      	b.n	80096b4 <_vfiprintf_r+0x48>
 8009876:	ab03      	add	r3, sp, #12
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	462a      	mov	r2, r5
 800987c:	4630      	mov	r0, r6
 800987e:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <_vfiprintf_r+0x22c>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	f7fd feb1 	bl	80075e8 <_printf_i>
 8009886:	e7e4      	b.n	8009852 <_vfiprintf_r+0x1e6>
 8009888:	0800a42e 	.word	0x0800a42e
 800988c:	0800a434 	.word	0x0800a434
 8009890:	0800a438 	.word	0x0800a438
 8009894:	080070ad 	.word	0x080070ad
 8009898:	08009649 	.word	0x08009649

0800989c <__swbuf_r>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	4605      	mov	r5, r0
 80098a4:	b118      	cbz	r0, 80098ae <__swbuf_r+0x12>
 80098a6:	6a03      	ldr	r3, [r0, #32]
 80098a8:	b90b      	cbnz	r3, 80098ae <__swbuf_r+0x12>
 80098aa:	f7fe f847 	bl	800793c <__sinit>
 80098ae:	69a3      	ldr	r3, [r4, #24]
 80098b0:	60a3      	str	r3, [r4, #8]
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	071a      	lsls	r2, r3, #28
 80098b6:	d501      	bpl.n	80098bc <__swbuf_r+0x20>
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	b943      	cbnz	r3, 80098ce <__swbuf_r+0x32>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f82a 	bl	8009918 <__swsetup_r>
 80098c4:	b118      	cbz	r0, 80098ce <__swbuf_r+0x32>
 80098c6:	f04f 37ff 	mov.w	r7, #4294967295
 80098ca:	4638      	mov	r0, r7
 80098cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	b2f6      	uxtb	r6, r6
 80098d4:	1a98      	subs	r0, r3, r2
 80098d6:	6963      	ldr	r3, [r4, #20]
 80098d8:	4637      	mov	r7, r6
 80098da:	4283      	cmp	r3, r0
 80098dc:	dc05      	bgt.n	80098ea <__swbuf_r+0x4e>
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f7ff fdab 	bl	800943c <_fflush_r>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d1ed      	bne.n	80098c6 <__swbuf_r+0x2a>
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	6022      	str	r2, [r4, #0]
 80098f6:	701e      	strb	r6, [r3, #0]
 80098f8:	6962      	ldr	r2, [r4, #20]
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d004      	beq.n	800990a <__swbuf_r+0x6e>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	07db      	lsls	r3, r3, #31
 8009904:	d5e1      	bpl.n	80098ca <__swbuf_r+0x2e>
 8009906:	2e0a      	cmp	r6, #10
 8009908:	d1df      	bne.n	80098ca <__swbuf_r+0x2e>
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f7ff fd95 	bl	800943c <_fflush_r>
 8009912:	2800      	cmp	r0, #0
 8009914:	d0d9      	beq.n	80098ca <__swbuf_r+0x2e>
 8009916:	e7d6      	b.n	80098c6 <__swbuf_r+0x2a>

08009918 <__swsetup_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4b29      	ldr	r3, [pc, #164]	@ (80099c0 <__swsetup_r+0xa8>)
 800991c:	4605      	mov	r5, r0
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	460c      	mov	r4, r1
 8009922:	b118      	cbz	r0, 800992c <__swsetup_r+0x14>
 8009924:	6a03      	ldr	r3, [r0, #32]
 8009926:	b90b      	cbnz	r3, 800992c <__swsetup_r+0x14>
 8009928:	f7fe f808 	bl	800793c <__sinit>
 800992c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009930:	0719      	lsls	r1, r3, #28
 8009932:	d422      	bmi.n	800997a <__swsetup_r+0x62>
 8009934:	06da      	lsls	r2, r3, #27
 8009936:	d407      	bmi.n	8009948 <__swsetup_r+0x30>
 8009938:	2209      	movs	r2, #9
 800993a:	602a      	str	r2, [r5, #0]
 800993c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e033      	b.n	80099b0 <__swsetup_r+0x98>
 8009948:	0758      	lsls	r0, r3, #29
 800994a:	d512      	bpl.n	8009972 <__swsetup_r+0x5a>
 800994c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994e:	b141      	cbz	r1, 8009962 <__swsetup_r+0x4a>
 8009950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009954:	4299      	cmp	r1, r3
 8009956:	d002      	beq.n	800995e <__swsetup_r+0x46>
 8009958:	4628      	mov	r0, r5
 800995a:	f7fe ffd5 	bl	8008908 <_free_r>
 800995e:	2300      	movs	r3, #0
 8009960:	6363      	str	r3, [r4, #52]	@ 0x34
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	2300      	movs	r3, #0
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f043 0308 	orr.w	r3, r3, #8
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	b94b      	cbnz	r3, 8009992 <__swsetup_r+0x7a>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009988:	d003      	beq.n	8009992 <__swsetup_r+0x7a>
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f000 f882 	bl	8009a96 <__smakebuf_r>
 8009992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009996:	f013 0201 	ands.w	r2, r3, #1
 800999a:	d00a      	beq.n	80099b2 <__swsetup_r+0x9a>
 800999c:	2200      	movs	r2, #0
 800999e:	60a2      	str	r2, [r4, #8]
 80099a0:	6962      	ldr	r2, [r4, #20]
 80099a2:	4252      	negs	r2, r2
 80099a4:	61a2      	str	r2, [r4, #24]
 80099a6:	6922      	ldr	r2, [r4, #16]
 80099a8:	b942      	cbnz	r2, 80099bc <__swsetup_r+0xa4>
 80099aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099ae:	d1c5      	bne.n	800993c <__swsetup_r+0x24>
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	0799      	lsls	r1, r3, #30
 80099b4:	bf58      	it	pl
 80099b6:	6962      	ldrpl	r2, [r4, #20]
 80099b8:	60a2      	str	r2, [r4, #8]
 80099ba:	e7f4      	b.n	80099a6 <__swsetup_r+0x8e>
 80099bc:	2000      	movs	r0, #0
 80099be:	e7f7      	b.n	80099b0 <__swsetup_r+0x98>
 80099c0:	20000424 	.word	0x20000424

080099c4 <_raise_r>:
 80099c4:	291f      	cmp	r1, #31
 80099c6:	b538      	push	{r3, r4, r5, lr}
 80099c8:	4605      	mov	r5, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	d904      	bls.n	80099d8 <_raise_r+0x14>
 80099ce:	2316      	movs	r3, #22
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80099da:	b112      	cbz	r2, 80099e2 <_raise_r+0x1e>
 80099dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099e0:	b94b      	cbnz	r3, 80099f6 <_raise_r+0x32>
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f830 	bl	8009a48 <_getpid_r>
 80099e8:	4622      	mov	r2, r4
 80099ea:	4601      	mov	r1, r0
 80099ec:	4628      	mov	r0, r5
 80099ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099f2:	f000 b817 	b.w	8009a24 <_kill_r>
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d00a      	beq.n	8009a10 <_raise_r+0x4c>
 80099fa:	1c59      	adds	r1, r3, #1
 80099fc:	d103      	bne.n	8009a06 <_raise_r+0x42>
 80099fe:	2316      	movs	r3, #22
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	2001      	movs	r0, #1
 8009a04:	e7e7      	b.n	80099d6 <_raise_r+0x12>
 8009a06:	2100      	movs	r1, #0
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a0e:	4798      	blx	r3
 8009a10:	2000      	movs	r0, #0
 8009a12:	e7e0      	b.n	80099d6 <_raise_r+0x12>

08009a14 <raise>:
 8009a14:	4b02      	ldr	r3, [pc, #8]	@ (8009a20 <raise+0xc>)
 8009a16:	4601      	mov	r1, r0
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f7ff bfd3 	b.w	80099c4 <_raise_r>
 8009a1e:	bf00      	nop
 8009a20:	20000424 	.word	0x20000424

08009a24 <_kill_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	2300      	movs	r3, #0
 8009a28:	4d06      	ldr	r5, [pc, #24]	@ (8009a44 <_kill_r+0x20>)
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	4611      	mov	r1, r2
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	f7f7 fb94 	bl	800115e <_kill>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d102      	bne.n	8009a40 <_kill_r+0x1c>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b103      	cbz	r3, 8009a40 <_kill_r+0x1c>
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	bf00      	nop
 8009a44:	20001ac4 	.word	0x20001ac4

08009a48 <_getpid_r>:
 8009a48:	f7f7 bb82 	b.w	8001150 <_getpid>

08009a4c <__swhatbuf_r>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	460c      	mov	r4, r1
 8009a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a54:	4615      	mov	r5, r2
 8009a56:	2900      	cmp	r1, #0
 8009a58:	461e      	mov	r6, r3
 8009a5a:	b096      	sub	sp, #88	@ 0x58
 8009a5c:	da0c      	bge.n	8009a78 <__swhatbuf_r+0x2c>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	2100      	movs	r1, #0
 8009a62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a66:	bf14      	ite	ne
 8009a68:	2340      	movne	r3, #64	@ 0x40
 8009a6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a6e:	2000      	movs	r0, #0
 8009a70:	6031      	str	r1, [r6, #0]
 8009a72:	602b      	str	r3, [r5, #0]
 8009a74:	b016      	add	sp, #88	@ 0x58
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	466a      	mov	r2, sp
 8009a7a:	f000 f849 	bl	8009b10 <_fstat_r>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	dbed      	blt.n	8009a5e <__swhatbuf_r+0x12>
 8009a82:	9901      	ldr	r1, [sp, #4]
 8009a84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a8c:	4259      	negs	r1, r3
 8009a8e:	4159      	adcs	r1, r3
 8009a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a94:	e7eb      	b.n	8009a6e <__swhatbuf_r+0x22>

08009a96 <__smakebuf_r>:
 8009a96:	898b      	ldrh	r3, [r1, #12]
 8009a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a9a:	079d      	lsls	r5, r3, #30
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	d507      	bpl.n	8009ab2 <__smakebuf_r+0x1c>
 8009aa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	6123      	str	r3, [r4, #16]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	6163      	str	r3, [r4, #20]
 8009aae:	b003      	add	sp, #12
 8009ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab2:	466a      	mov	r2, sp
 8009ab4:	ab01      	add	r3, sp, #4
 8009ab6:	f7ff ffc9 	bl	8009a4c <__swhatbuf_r>
 8009aba:	9f00      	ldr	r7, [sp, #0]
 8009abc:	4605      	mov	r5, r0
 8009abe:	4639      	mov	r1, r7
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7fd f9c9 	bl	8006e58 <_malloc_r>
 8009ac6:	b948      	cbnz	r0, 8009adc <__smakebuf_r+0x46>
 8009ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009acc:	059a      	lsls	r2, r3, #22
 8009ace:	d4ee      	bmi.n	8009aae <__smakebuf_r+0x18>
 8009ad0:	f023 0303 	bic.w	r3, r3, #3
 8009ad4:	f043 0302 	orr.w	r3, r3, #2
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	e7e2      	b.n	8009aa2 <__smakebuf_r+0xc>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	6020      	str	r0, [r4, #0]
 8009aec:	b15b      	cbz	r3, 8009b06 <__smakebuf_r+0x70>
 8009aee:	4630      	mov	r0, r6
 8009af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af4:	f000 f81e 	bl	8009b34 <_isatty_r>
 8009af8:	b128      	cbz	r0, 8009b06 <__smakebuf_r+0x70>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f023 0303 	bic.w	r3, r3, #3
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	431d      	orrs	r5, r3
 8009b0a:	81a5      	strh	r5, [r4, #12]
 8009b0c:	e7cf      	b.n	8009aae <__smakebuf_r+0x18>
	...

08009b10 <_fstat_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	2300      	movs	r3, #0
 8009b14:	4d06      	ldr	r5, [pc, #24]	@ (8009b30 <_fstat_r+0x20>)
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f7f7 fb7d 	bl	800121c <_fstat>
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	d102      	bne.n	8009b2c <_fstat_r+0x1c>
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	b103      	cbz	r3, 8009b2c <_fstat_r+0x1c>
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	20001ac4 	.word	0x20001ac4

08009b34 <_isatty_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	2300      	movs	r3, #0
 8009b38:	4d05      	ldr	r5, [pc, #20]	@ (8009b50 <_isatty_r+0x1c>)
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f7 fb7b 	bl	800123a <_isatty>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_isatty_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_isatty_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20001ac4 	.word	0x20001ac4

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
